class Macros {

	@:has_untyped
	public static macro function getDirectory[Function:Void -> haxe.macro.Expr]
		[Block:Void]
			[If:Void]
				[Binop:Bool]
					[Call:String]
						[Field:Void -> String]
							[TypeExpr Macros:Class<Macros>]
							[FStatic:Void -> String]
								Macros
								get_target:Void -> String
					!=
					[Const:String] "eval"
				[Then:Dynamic] [Block:Dynamic]
					[Return:Dynamic]
						[Cast:haxe.macro.Expr]
							[Call:haxe.macro.Expr]
								[Field:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr]
									[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
									[FStatic:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr]
										haxe.macro.Context
										makeExpr:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr
								[Const:String] "/"
								[Call:haxe.macro.Position]
									[Ident:(String, Int, Int) -> Unknown<23>] $__mk_pos__
									[Const:String] "C:/haxe issues/haxe-integer-reporter/Macros.hx"
									[Const:Int] 473
									[Const:Int] 478
				[Else:Dynamic] [Block:Dynamic]
					[Return:Dynamic]
						[Cast:haxe.macro.Expr]
							[Call:haxe.macro.Expr]
								[Field:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr]
									[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
									[FStatic:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr]
										haxe.macro.Context
										makeExpr:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr
								[Field:String]
									[TypeExpr Macros:Class<Macros>]
									[FStatic:String]
										Macros
										directory:String
								[Call:haxe.macro.Position]
									[Ident:(String, Int, Int) -> Unknown<22>] $__mk_pos__
									[Const:String] "C:/haxe issues/haxe-integer-reporter/Macros.hx"
									[Const:Int] 528
									[Const:Int] 539

	@:has_untyped
	public static macro function getHaxever[Function:Void -> haxe.macro.Expr]
		[Block:Dynamic]
			[Return:Dynamic]
				[Cast:haxe.macro.Expr]
					[Call:haxe.macro.Expr]
						[Field:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr]
								haxe.macro.Context
								makeExpr:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr
						[Call:String]
							[Field:Void -> String]
								[TypeExpr Macros:Class<Macros>]
								[FStatic:Void -> String]
									Macros
									get_haxever:Void -> String
						[Call:haxe.macro.Position]
							[Ident:(String, Int, Int) -> Unknown<24>] $__mk_pos__
							[Const:String] "C:/haxe issues/haxe-integer-reporter/Macros.hx"
							[Const:Int] 649
							[Const:Int] 658

	@:has_untyped
	public static macro function getTarget[Function:Void -> haxe.macro.Expr]
		[Block:Dynamic]
			[Return:Dynamic]
				[Cast:haxe.macro.Expr]
					[Call:haxe.macro.Expr]
						[Field:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr]
								haxe.macro.Context
								makeExpr:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr
						[Call:String]
							[Field:Void -> String]
								[TypeExpr Macros:Class<Macros>]
								[FStatic:Void -> String]
									Macros
									get_target:Void -> String
						[Call:haxe.macro.Position]
							[Ident:(String, Int, Int) -> Unknown<25>] $__mk_pos__
							[Const:String] "C:/haxe issues/haxe-integer-reporter/Macros.hx"
							[Const:Int] 756
							[Const:Int] 764

	public static function setup[Function:Void -> Void]
		[Block:Void]
			[Call:Void]
				[Field:(flag : String, ?value : Null<String>) -> Void]
					[TypeExpr haxe.macro.Compiler:Class<haxe.macro.Compiler>]
					[FStatic:(flag : String, ?value : Null<String>) -> Void]
						haxe.macro.Compiler
						define:(flag : String, ?value : Null<String>) -> Void
				[Const:String] "dump-path"
				[Binop:String]
					[Binop:String]
						[Binop:String]
							[Binop:String]
								[Const:String] "./"
								+
								[Field:String]
									[TypeExpr Macros:Class<Macros>]
									[FStatic:String]
										Macros
										directory:String
							+
							[Const:String] "/"
						+
						[Call:String]
							[Field:Void -> String]
								[TypeExpr Macros:Class<Macros>]
								[FStatic:Void -> String]
									Macros
									get_target:Void -> String
					+
					[Const:String] "-dump/"
			[Call:Void]
				[Field:(flag : String, ?value : Null<String>) -> Void]
					[TypeExpr haxe.macro.Compiler:Class<haxe.macro.Compiler>]
					[FStatic:(flag : String, ?value : Null<String>) -> Void]
						haxe.macro.Compiler
						define:(flag : String, ?value : Null<String>) -> Void
				[Const:String] "dump"
				[Const:String] "pretty"
			[Call:Void]
				[Field:(callback : (Array<haxe.macro.ModuleType> -> Void)) -> Void]
					[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
					[FStatic:(callback : (Array<haxe.macro.ModuleType> -> Void)) -> Void]
						haxe.macro.Context
						onAfterTyping:(callback : (Array<haxe.macro.ModuleType> -> Void)) -> Void
				[Field:(types : Array<haxe.macro.ModuleType>) -> Void]
					[TypeExpr Macros:Class<Macros>]
					[FStatic:(types : Array<haxe.macro.ModuleType>) -> Void]
						Macros
						onGenerate:(types : Array<haxe.macro.ModuleType>) -> Void

	@:value(~/[ \\-\\:\\.]/)
	public static var ereg:EReg = [New:EReg]
		EReg
		[Const:String] "[ \\\\-\\\\:\\\\.]"
		[Const:String] "gi";

	@:value(Context.defined("collect.info"))
	public static var collect:Bool = [Call:Bool]
		[Field:(s : String) -> Bool]
			[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
			[FStatic:(s : String) -> Bool]
				haxe.macro.Context
				defined:(s : String) -> Bool
		[Const:String] "collect.info";

	@:value([])
	public static var info:Map<Int, Array<Info>> = [Block:haxe.ds.IntMap<Array<Info>>]
		[Block:Void]
		[New:haxe.ds.IntMap<Array<Info>>] haxe.ds.IntMap<Array<Info>>;

	@:isVar
	public static var haxever(get,null):String;

	static function get_haxever[Function:Void -> String]
		[Block:Dynamic]
			[If:Void]
				[Binop:Bool]
					[Field:String]
						[TypeExpr Macros:Class<Macros>]
						[FStatic:String]
							Macros
							haxever:String
					==
					[Const:String] null
				[Then:Void] [Block:Void]
					[Binop:String]
						[Field:String]
							[TypeExpr Macros:Class<Macros>]
							[FStatic:String]
								Macros
								haxever:String
						=
						[Binop:String]
							[Const:String] ""
							+
							[Call:String]
								[Field:(key : String) -> String]
									[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
									[FStatic:(key : String) -> String]
										haxe.macro.Context
										definedValue:(key : String) -> String
								[Const:String] "haxe"
					[If:Void]
						[Call:Bool]
							[Field:(path : String) -> Bool]
								[TypeExpr sys.FileSystem:Class<sys.FileSystem>]
								[FStatic:(path : String) -> Bool]
									sys.FileSystem
									exists:(path : String) -> Bool
							[Const:String] "./.haxerc"
						[Then:Void] [Block:Void]
							[Var str(109977):String]
								[Call:String]
									[Field:(path : String) -> String]
										[TypeExpr sys.io.File:Class<sys.io.File>]
										[FStatic:(path : String) -> String]
											sys.io.File
											getContent:(path : String) -> String
									[Const:String] "./.haxerc"
							[Var json(110097):{ version : String }]
								[Call:Dynamic]
									[Field:Void -> Dynamic]
										[New:haxe.format.JsonParser]
											haxe.format.JsonParser
											[Local str(109977):String:String]
										[FInstance:Void -> Dynamic]
											haxe.format.JsonParser
											doParse:Void -> Dynamic
							[If:Void]
								[Binop:Bool]
									[Call:Int]
										[Field:(str : String, ?startIndex : Null<Int>) -> Int]
											[Field:String]
												[TypeExpr Macros:Class<Macros>]
												[FStatic:String]
													Macros
													haxever:String
											[FInstance:(str : String, ?startIndex : Null<Int>) -> Int]
												String
												indexOf:(str : String, ?startIndex : Null<Int>) -> Int
										[Call:String]
											[Field:(s : String, by : String) -> String]
												[Field:EReg]
													[TypeExpr Macros:Class<Macros>]
													[FStatic:EReg]
														Macros
														ereg:EReg
												[FInstance:(s : String, by : String) -> String]
													EReg
													replace:(s : String, by : String) -> String
											[Field:String]
												[Local json(110097):{ version : String }:{ version : String }]
												[FAnon:String] version:String
											[Const:String] "_"
										[Const:Null<Int>] null
									==
									[Const:Int] -1
								[Then:Void] [Block:Void]
									[Var haxerc(110098):String]
										[Call:String]
											[Field:(s : String, by : String) -> String]
												[Field:EReg]
													[TypeExpr Macros:Class<Macros>]
													[FStatic:EReg]
														Macros
														ereg:EReg
												[FInstance:(s : String, by : String) -> String]
													EReg
													replace:(s : String, by : String) -> String
											[Field:String]
												[Local json(110097):{ version : String }:{ version : String }]
												[FAnon:String] version:String
											[Const:String] "_"
									[If:Void]
										[Binop:Bool]
											[Field:String]
												[Local json(110097):{ version : String }:{ version : String }]
												[FAnon:String] version:String
											!=
											[Field:String]
												[TypeExpr Macros:Class<Macros>]
												[FStatic:String]
													Macros
													haxever:String
										[Then:String] [Block:String]
											[Binop:String]
												[Field:String]
													[TypeExpr Macros:Class<Macros>]
													[FStatic:String]
														Macros
														haxever:String
												+=
												[Binop:String]
													[Const:String] "_"
													+
													[Local haxerc(110098):String:String]
			[Return:Dynamic]
				[Field:String]
					[TypeExpr Macros:Class<Macros>]
					[FStatic:String]
						Macros
						haxever:String

	@:isVar
	public static var target(get,null):String;

	static function get_target[Function:Void -> String]
		[Block:Dynamic]
			[If:Void]
				[Binop:Bool]
					[Field:String]
						[TypeExpr Macros:Class<Macros>]
						[FStatic:String]
							Macros
							target:String
					==
					[Const:String] null
				[Then:Void] [Block:Void]
					[Binop:String]
						[Field:String]
							[TypeExpr Macros:Class<Macros>]
							[FStatic:String]
								Macros
								target:String
						=
						[Call:String]
							[Field:(key : String) -> String]
								[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
								[FStatic:(key : String) -> String]
									haxe.macro.Context
									definedValue:(key : String) -> String
							[Const:String] "target.name"
					[If:Void]
						[Binop:Bool]
							[Binop:Bool]
								[Field:String]
									[TypeExpr Macros:Class<Macros>]
									[FStatic:String]
										Macros
										target:String
								==
								[Const:String] "java"
							&&
							[Call:Bool]
								[Field:(s : String) -> Bool]
									[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
									[FStatic:(s : String) -> Bool]
										haxe.macro.Context
										defined:(s : String) -> Bool
								[Const:String] "jvm"
						[Then:String] [Block:String]
							[Binop:String]
								[Field:String]
									[TypeExpr Macros:Class<Macros>]
									[FStatic:String]
										Macros
										target:String
								=
								[Const:String] "jvm"
			[Return:Dynamic]
				[Field:String]
					[TypeExpr Macros:Class<Macros>]
					[FStatic:String]
						Macros
						target:String

	@:value(ereg.replace("$haxever", "_"))
	public static var directory:String = [Call:String]
		[Field:(s : String, by : String) -> String]
			[Field:EReg]
				[TypeExpr Macros:Class<Macros>]
				[FStatic:EReg]
					Macros
					ereg:EReg
			[FInstance:(s : String, by : String) -> String]
				EReg
				replace:(s : String, by : String) -> String
		[Binop:String]
			[Const:String] ""
			+
			[Call:String]
				[Field:Void -> String]
					[TypeExpr Macros:Class<Macros>]
					[FStatic:Void -> String]
						Macros
						get_haxever:Void -> String
		[Const:String] "_";

	@:value("$target")
	public static var file:String = [Binop:String]
		[Const:String] ""
		+
		[Call:String]
			[Field:Void -> String]
				[TypeExpr Macros:Class<Macros>]
				[FStatic:Void -> String]
					Macros
					get_target:Void -> String;

	@:isVar
	public static var handle(get,null):haxe.io.Output;

	static function get_handle[Function:Void -> haxe.io.Output]
		[Block:Dynamic]
			[If:Void]
				[Binop:Bool]
					[Field:haxe.io.Output]
						[TypeExpr Macros:Class<Macros>]
						[FStatic:haxe.io.Output]
							Macros
							handle:haxe.io.Output
					==
					[Const:haxe.io.Output] null
				[Then:Void] [Block:Void]
					[If:Void]
						[Field:Bool]
							[TypeExpr Macros:Class<Macros>]
							[FStatic:Bool]
								Macros
								collect:Bool
						[Then:haxe.io.Output] [Block:haxe.io.Output]
							[If:Void]
								[Unop:Bool]
									!
									Prefix
									[Call:Bool]
										[Field:(path : String) -> Bool]
											[TypeExpr sys.FileSystem:Class<sys.FileSystem>]
											[FStatic:(path : String) -> Bool]
												sys.FileSystem
												exists:(path : String) -> Bool
										[Binop:String]
											[Const:String] "./"
											+
											[Field:String]
												[TypeExpr Macros:Class<Macros>]
												[FStatic:String]
													Macros
													directory:String
								[Then:Void] [Block:Void]
									[Call:Void]
										[Field:(path : String) -> Void]
											[TypeExpr sys.FileSystem:Class<sys.FileSystem>]
											[FStatic:(path : String) -> Void]
												sys.FileSystem
												createDirectory:(path : String) -> Void
										[Binop:String]
											[Const:String] "./"
											+
											[Field:String]
												[TypeExpr Macros:Class<Macros>]
												[FStatic:String]
													Macros
													directory:String
							[Binop:haxe.io.Output]
								[Field:haxe.io.Output]
									[TypeExpr Macros:Class<Macros>]
									[FStatic:haxe.io.Output]
										Macros
										handle:haxe.io.Output
								=
								[Call:sys.io.FileOutput]
									[Field:(path : String, ?binary : Bool) -> sys.io.FileOutput]
										[TypeExpr sys.io.File:Class<sys.io.File>]
										[FStatic:(path : String, ?binary : Bool) -> sys.io.FileOutput]
											sys.io.File
											write:(path : String, ?binary : Bool) -> sys.io.FileOutput
									[Binop:String]
										[Binop:String]
											[Binop:String]
												[Binop:String]
													[Const:String] "./"
													+
													[Field:String]
														[TypeExpr Macros:Class<Macros>]
														[FStatic:String]
															Macros
															directory:String
												+
												[Const:String] "/"
											+
											[Field:String]
												[TypeExpr Macros:Class<Macros>]
												[FStatic:String]
													Macros
													file:String
										+
										[Const:String] ".md"
									[Const:Null<Bool>] null
						[Else:haxe.io.Output] [Block:haxe.io.Output]
							[Binop:haxe.io.Output]
								[Field:haxe.io.Output]
									[TypeExpr Macros:Class<Macros>]
									[FStatic:haxe.io.Output]
										Macros
										handle:haxe.io.Output
								=
								[New:haxe.io.BytesOutput] haxe.io.BytesOutput
			[Return:Dynamic]
				[Field:haxe.io.Output]
					[TypeExpr Macros:Class<Macros>]
					[FStatic:haxe.io.Output]
						Macros
						handle:haxe.io.Output

	@:value(haxe.macro.Compiler.getOutput())
	static var output:String = [Call:String]
		[Field:Void -> String]
			[TypeExpr haxe.macro.Compiler:Class<haxe.macro.Compiler>]
			[FStatic:Void -> String]
				haxe.macro.Compiler
				getOutput:Void -> String;

	public static function build[Function:Void -> Array<haxe.macro.Field>]
		[Block:Dynamic]
			[Call:Void]
				[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					[TypeExpr haxe.Log:Class<haxe.Log>]
					[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
						haxe.Log
						trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
				[Block:String]
					[Var tmp(115152):Map<String, String>]
						[Call:Map<String, String>]
							[Field:Void -> Map<String, String>]
								[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
								[FStatic:Void -> Map<String, String>]
									haxe.macro.Context
									getDefines:Void -> Map<String, String>
					[If:String]
						[Binop:Bool]
							[Local tmp(115152):Map<String, String>:Map<String, String>]
							==
							[Const:Map<String, String>] null
						[Then:String] [Const:String] "null"
						[Else:String] [Call:String]
							[Field:Void -> String]
								[Local tmp(115152):Map<String, String>:haxe.ds.StringMap<String>]
								[FInstance:Void -> String]
									haxe.ds.StringMap<String>
									toString:Void -> String
				[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, className : String }]
					fileName: [Const:String] "C:/haxe issues/haxe-integer-reporter/Macros.hx"
					lineNumber: [Const:Int] 103
					className: [Const:String] "Macros"
					methodName: [Const:String] "build"
			[Var ext(115156):String]
				[Call:String]
					[Field:(path : String) -> String]
						[TypeExpr haxe.io.Path:Class<haxe.io.Path>]
						[FStatic:(path : String) -> String]
							haxe.io.Path
							extension:(path : String) -> String
					[Field:String]
						[TypeExpr Macros:Class<Macros>]
						[FStatic:String]
							Macros
							output:String
			[Var dir(115157):String]
				[Call:String]
					[Field:(path : String) -> String]
						[TypeExpr haxe.io.Path:Class<haxe.io.Path>]
						[FStatic:(path : String) -> String]
							haxe.io.Path
							directory:(path : String) -> String
					[Field:String]
						[TypeExpr Macros:Class<Macros>]
						[FStatic:String]
							Macros
							output:String
			[Call:Void]
				[Field:(fileOrDir : String) -> Void]
					[TypeExpr haxe.macro.Compiler:Class<haxe.macro.Compiler>]
					[FStatic:(fileOrDir : String) -> Void]
						haxe.macro.Compiler
						setOutput:(fileOrDir : String) -> Void
				[Binop:String]
					[Binop:String]
						[Binop:String]
							[Const:String] "./"
							+
							[Field:String]
								[TypeExpr Macros:Class<Macros>]
								[FStatic:String]
									Macros
									directory:String
						+
						[Const:String] "/"
					+
					[Field:String]
						[TypeExpr Macros:Class<Macros>]
						[FStatic:String]
							Macros
							output:String
			[Var fields(115158):Array<haxe.macro.Field>]
				[Call:Array<haxe.macro.Field>]
					[Field:Void -> Array<haxe.macro.Field>]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:Void -> Array<haxe.macro.Field>]
							haxe.macro.Context
							getBuildFields:Void -> Array<haxe.macro.Field>
			[Block:Void]
				[Var `(115267):Int] [Const:Int] 0
				[While:Void]
					[Binop:Bool]
						[Local `(115267):Int:Int]
						<
						[Field:Int]
							[Local fields(115158):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
							[FInstance:Int]
								Array<haxe.macro.Field>
								length:Int
					[Block:Void]
						[Var field(115159):haxe.macro.Field]
							[Array:haxe.macro.Field]
								[Local fields(115158):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
								[Local `(115267):Int:Int]
						[Unop:Int]
							++
							Prefix
							[Local `(115267):Int:Int]
						[If:Void]
							[Binop:Bool]
								[Field:String]
									[Local field(115159):haxe.macro.Field:haxe.macro.Field]
									[FAnon:String] name:String
								==
								[Const:String] "main"
							[Then:Dynamic] [Block:Dynamic]
								[Meta:Void]
									:ast(switch field.kind {
	case FFun(_.expr => _.expr => EBlock(es)):
		function itr(e:Expr) switch e {
			case _.expr => EConst(CInt(v)):
				var pos = Context.getPosInfos(e.pos);
				var loc = e.pos.toLocation();
				var line = loc.range.start.line;
				if ("$v" != "${loc.range.start.line}") {
					if (info.exists(line)) {
						info.get(line)[0].value2 = "" + v;
					} else {
						info.set(line, [{ lineNumber : line, value1 : "$v", value2 : "" }]);
					};
				};			
			case ({ expr : EField({ expr : EConst(CIdent("haxe")), pos : untyped $__mk_pos__("C:/haxe issues/haxe-integer-reporter/Macros.hx", 4039, 4043) }, "PosInfos"), pos : untyped $__mk_pos__("C:/haxe issues/haxe-integer-reporter/Macros.hx", 4039, 4052) } : haxe.macro.Expr):
			case _:
				e.iter(itr);			
		};
		es.iter(itr);	
	case _:
})
									[Block:Void]
										[Var `(115233):haxe.macro.FieldType]
											[Field:haxe.macro.FieldType]
												[Local field(115159):haxe.macro.Field:haxe.macro.Field]
												[FAnon:haxe.macro.FieldType] kind:haxe.macro.FieldType
										[If:Void]
											[Binop:Bool]
												[EnumIndex:Int] [Local `(115233):haxe.macro.FieldType:haxe.macro.FieldType]
												==
												[Const:Int] 1
											[Then:Void] [Block:Void]
												[Var `1(115234):haxe.macro.Function]
													[EnumParameter:haxe.macro.Function]
														[Local `(115233):haxe.macro.FieldType:haxe.macro.FieldType]
														FFun
														0
												[Block:Void]
													[Var _hx_tmp(115235):Null<haxe.macro.Expr>]
													[Block:Void]
														[Var _hx_tmp(115236):haxe.macro.ExprDef]
														[If:Void]
															[Binop:Bool]
																[EnumIndex:Int]
																	[Parenthesis:haxe.macro.ExprDef]
																		[Binop:haxe.macro.ExprDef]
																			[Local _hx_tmp(115236):haxe.macro.ExprDef:haxe.macro.ExprDef]
																			=
																			[Field:haxe.macro.ExprDef]
																				[Parenthesis:Null<haxe.macro.Expr>]
																					[Binop:Null<haxe.macro.Expr>]
																						[Local _hx_tmp(115235):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
																						=
																						[Field:Null<haxe.macro.Expr>]
																							[Local `1(115234):haxe.macro.Function:haxe.macro.Function]
																							[FAnon:Null<haxe.macro.Expr>] expr:Null<haxe.macro.Expr>
																				[FAnon:haxe.macro.ExprDef] expr:haxe.macro.ExprDef
																==
																[Const:Int] 12
															[Then:Void] [Block:Void]
																[Var `2(115237):Array<haxe.macro.Expr>]
																	[EnumParameter:Array<haxe.macro.Expr>]
																		[Local _hx_tmp(115236):haxe.macro.ExprDef:haxe.macro.ExprDef]
																		EBlock
																		0
																[Block:Void]
																	[Var es(115238):Array<haxe.macro.Expr>] [Local `2(115237):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
																	[Block:Void]
																		[Var itr(115239):Array<(e : haxe.macro.Expr) -> Void>] [ArrayDecl:Array<(e : haxe.macro.Expr) -> Void>] [Const:(e : haxe.macro.Expr) -> Void] null
																		[Binop:(e : haxe.macro.Expr) -> Void]
																			[Array:(e : haxe.macro.Expr) -> Void]
																				[Local itr(115239):Array<(e : haxe.macro.Expr) -> Void>:Array<(e : haxe.macro.Expr) -> Void>]
																				[Const:Int] 0
																			=
																			[Function:(e : haxe.macro.Expr) -> Void]
																				[Arg:haxe.macro.Expr] [Local e(115240):haxe.macro.Expr]
																				[Meta:Void]
																					:ast(switch e {
	case _.expr => EConst(CInt(v)):
		var pos = Context.getPosInfos(e.pos);
		var loc = e.pos.toLocation();
		var line = loc.range.start.line;
		if ("$v" != "${loc.range.start.line}") {
			if (info.exists(line)) {
				info.get(line)[0].value2 = "" + v;
			} else {
				info.set(line, [{ lineNumber : line, value1 : "$v", value2 : "" }]);
			};
		};	
	case ({ expr : EField({ expr : EConst(CIdent("haxe")), pos : untyped $__mk_pos__("C:/haxe issues/haxe-integer-reporter/Macros.hx", 4039, 4043) }, "PosInfos"), pos : untyped $__mk_pos__("C:/haxe issues/haxe-integer-reporter/Macros.hx", 4039, 4052) } : haxe.macro.Expr):
	case _:
		e.iter(itr);	
})
																					[Block:Void]
																						[Var _hx_tmp(115241):haxe.macro.ExprDef]
																						[If:Void]
																							[Binop:Bool]
																								[EnumIndex:Int]
																									[Parenthesis:haxe.macro.ExprDef]
																										[Binop:haxe.macro.ExprDef]
																											[Local _hx_tmp(115241):haxe.macro.ExprDef:haxe.macro.ExprDef]
																											=
																											[Field:haxe.macro.ExprDef]
																												[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																												[FAnon:haxe.macro.ExprDef] expr:haxe.macro.ExprDef
																								==
																								[Const:Int] 0
																							[Then:Void] [Block:Void]
																								[Var `(115242):haxe.macro.Constant]
																									[EnumParameter:haxe.macro.Constant]
																										[Local _hx_tmp(115241):haxe.macro.ExprDef:haxe.macro.ExprDef]
																										EConst
																										0
																								[If:Void]
																									[Binop:Bool]
																										[EnumIndex:Int] [Local `(115242):haxe.macro.Constant:haxe.macro.Constant]
																										==
																										[Const:Int] 0
																									[Then:Void] [Block:Void]
																										[Var `1(115243):String]
																											[EnumParameter:String]
																												[Local `(115242):haxe.macro.Constant:haxe.macro.Constant]
																												CInt
																												0
																										[Block:Void]
																											[Var v(115244):String] [Local `1(115243):String:String]
																											[Block:Void]
																												[Var pos(115245):{ min : Int, max : Int, file : String }]
																													[Call:{ min : Int, max : Int, file : String }]
																														[Field:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }]
																															[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
																															[FStatic:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }]
																																haxe.macro.Context
																																getPosInfos:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }
																														[Field:haxe.macro.Position]
																															[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																															[FAnon:haxe.macro.Position] pos:haxe.macro.Position
																												[Var loc(115246):haxe.display.Location]
																													[Call:haxe.display.Location]
																														[Field:(p : haxe.macro.Position) -> haxe.display.Location]
																															[TypeExpr haxe.macro.PositionTools:Class<haxe.macro.PositionTools>]
																															[FStatic:(p : haxe.macro.Position) -> haxe.display.Location]
																																haxe.macro.PositionTools
																																toLocation:(p : haxe.macro.Position) -> haxe.display.Location
																														[Field:haxe.macro.Position]
																															[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																															[FAnon:haxe.macro.Position] pos:haxe.macro.Position
																												[Var line(115247):Int]
																													[Field:Int]
																														[Field:haxe.display.Position]
																															[Field:haxe.display.Range]
																																[Local loc(115246):haxe.display.Location:haxe.display.Location]
																																[FAnon:haxe.display.Range] range:haxe.display.Range
																															[FAnon:haxe.display.Position] start:haxe.display.Position
																														[FAnon:Int] line:Int
																												[If:Void]
																													[Binop:Bool]
																														[Binop:String]
																															[Const:String] ""
																															+
																															[Local v(115244):String:String]
																														!=
																														[Binop:String]
																															[Const:String] ""
																															+
																															[Field:Int]
																																[Field:haxe.display.Position]
																																	[Field:haxe.display.Range]
																																		[Local loc(115246):haxe.display.Location:haxe.display.Location]
																																		[FAnon:haxe.display.Range] range:haxe.display.Range
																																	[FAnon:haxe.display.Position] start:haxe.display.Position
																																[FAnon:Int] line:Int
																													[Then:Void] [Block:Void]
																														[If:Void]
																															[Block:Bool]
																																[Var this(115248):haxe.IMap<Int, Array<Info>>]
																																	[Field:Map<Int, Array<Info>>]
																																		[TypeExpr Macros:Class<Macros>]
																																		[FStatic:Map<Int, Array<Info>>]
																																			Macros
																																			info:Map<Int, Array<Info>>
																																[Call:Bool]
																																	[Field:(key : Int) -> Bool]
																																		[Cast:haxe.ds.IntMap<Array<Info>>] [Local this(115248):haxe.IMap<Int, Array<Info>>:haxe.IMap<Int, Array<Info>>]
																																		[FInstance:(key : Int) -> Bool]
																																			haxe.ds.IntMap<Array<Info>>
																																			exists:(key : Int) -> Bool
																																	[Local line(115247):Int:Int]
																															[Then:String] [Block:String]
																																[Binop:String]
																																	[Field:String]
																																		[Array:Info]
																																			[Block:Null<Array<Info>>]
																																				[Var this(115249):haxe.IMap<Int, Array<Info>>]
																																					[Field:Map<Int, Array<Info>>]
																																						[TypeExpr Macros:Class<Macros>]
																																						[FStatic:Map<Int, Array<Info>>]
																																							Macros
																																							info:Map<Int, Array<Info>>
																																				[Call:Null<Array<Info>>]
																																					[Field:(key : Int) -> Null<Array<Info>>]
																																						[Cast:haxe.ds.IntMap<Array<Info>>] [Local this(115249):haxe.IMap<Int, Array<Info>>:haxe.IMap<Int, Array<Info>>]
																																						[FInstance:(key : Int) -> Null<Array<Info>>]
																																							haxe.ds.IntMap<Array<Info>>
																																							get:(key : Int) -> Null<haxe.ds.IntMap.T>
																																					[Local line(115247):Int:Int]
																																			[Const:Int] 0
																																		[FAnon:String] value2:String
																																	=
																																	[Binop:String]
																																		[Const:String] ""
																																		+
																																		[Local v(115244):String:String]
																															[Else:Void] [Block:Void]
																																[Block:Void]
																																	[Var this(115250):haxe.IMap<Int, Array<Info>>]
																																		[Field:Map<Int, Array<Info>>]
																																			[TypeExpr Macros:Class<Macros>]
																																			[FStatic:Map<Int, Array<Info>>]
																																				Macros
																																				info:Map<Int, Array<Info>>
																																	[Call:Void]
																																		[Field:(key : Int, value : Array<Info>) -> Void]
																																			[Cast:haxe.ds.IntMap<Array<Info>>] [Local this(115250):haxe.IMap<Int, Array<Info>>:haxe.IMap<Int, Array<Info>>]
																																			[FInstance:(key : Int, value : Array<Info>) -> Void]
																																				haxe.ds.IntMap<Array<Info>>
																																				set:(key : Int, value : haxe.ds.IntMap.T) -> Void
																																		[Local line(115247):Int:Int]
																																		[ArrayDecl:Array<Info>]
																																			[ObjectDecl:{ value2 : String, value1 : String, lineNumber : Int }]
																																				lineNumber: [Local line(115247):Int:Int]
																																				value1: [Binop:String]
																																					[Const:String] ""
																																					+
																																					[Local v(115244):String:String]
																																				value2: [Const:String] ""
																									[Else:Void] [Block:Void]
																										[Var `3(115251):haxe.macro.Position]
																											[Field:haxe.macro.Position]
																												[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																												[FAnon:haxe.macro.Position] pos:haxe.macro.Position
																										[Var `2(115252):haxe.macro.ExprDef]
																											[Field:haxe.macro.ExprDef]
																												[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																												[FAnon:haxe.macro.ExprDef] expr:haxe.macro.ExprDef
																										[If:Void]
																											[Binop:Bool]
																												[EnumIndex:Int] [Local `2(115252):haxe.macro.ExprDef:haxe.macro.ExprDef]
																												==
																												[Const:Int] 3
																											[Then:Void] [Block:Void]
																												[Var `5(115253):String]
																													[EnumParameter:String]
																														[Local `2(115252):haxe.macro.ExprDef:haxe.macro.ExprDef]
																														EField
																														1
																												[Var `4(115254):haxe.macro.Expr]
																													[EnumParameter:haxe.macro.Expr]
																														[Local `2(115252):haxe.macro.ExprDef:haxe.macro.ExprDef]
																														EField
																														0
																												[Block:Void]
																													[Var `7(115255):haxe.macro.Position]
																														[Field:haxe.macro.Position]
																															[Local `4(115254):haxe.macro.Expr:haxe.macro.Expr]
																															[FAnon:haxe.macro.Position] pos:haxe.macro.Position
																													[Var `6(115256):haxe.macro.ExprDef]
																														[Field:haxe.macro.ExprDef]
																															[Local `4(115254):haxe.macro.Expr:haxe.macro.Expr]
																															[FAnon:haxe.macro.ExprDef] expr:haxe.macro.ExprDef
																													[If:Void]
																														[Binop:Bool]
																															[EnumIndex:Int] [Local `6(115256):haxe.macro.ExprDef:haxe.macro.ExprDef]
																															==
																															[Const:Int] 0
																														[Then:Void] [Block:Void]
																															[Var `8(115257):haxe.macro.Constant]
																																[EnumParameter:haxe.macro.Constant]
																																	[Local `6(115256):haxe.macro.ExprDef:haxe.macro.ExprDef]
																																	EConst
																																	0
																															[If:Void]
																																[Binop:Bool]
																																	[EnumIndex:Int] [Local `8(115257):haxe.macro.Constant:haxe.macro.Constant]
																																	==
																																	[Const:Int] 3
																																[Then:Void] [Block:Void]
																																	[Var `9(115258):String]
																																		[EnumParameter:String]
																																			[Local `8(115257):haxe.macro.Constant:haxe.macro.Constant]
																																			CIdent
																																			0
																																	[If:Void]
																																		[Binop:Bool]
																																			[Local `9(115258):String:String]
																																			==
																																			[Const:String] "haxe"
																																		[Then:Void] [Block:Void]
																																			[If:Void]
																																				[Binop:Bool]
																																					[Local `5(115253):String:String]
																																					==
																																					[Const:String] "PosInfos"
																																				[Then:Void] [Block:Void] [Block:Void]
																																				[Else:Void] [Block:Void]
																																					[Call:Void]
																																						[Field:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																							[TypeExpr haxe.macro.ExprTools:Class<haxe.macro.ExprTools>]
																																							[FStatic:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																								haxe.macro.ExprTools
																																								iter:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void
																																						[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																																						[Array:(e : haxe.macro.Expr) -> Void]
																																							[Local itr(115239):Array<(e : haxe.macro.Expr) -> Void>:Array<(e : haxe.macro.Expr) -> Void>]
																																							[Const:Int] 0
																																		[Else:Void] [Block:Void]
																																			[Call:Void]
																																				[Field:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																					[TypeExpr haxe.macro.ExprTools:Class<haxe.macro.ExprTools>]
																																					[FStatic:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																						haxe.macro.ExprTools
																																						iter:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void
																																				[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																																				[Array:(e : haxe.macro.Expr) -> Void]
																																					[Local itr(115239):Array<(e : haxe.macro.Expr) -> Void>:Array<(e : haxe.macro.Expr) -> Void>]
																																					[Const:Int] 0
																																[Else:Void] [Block:Void]
																																	[Call:Void]
																																		[Field:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																			[TypeExpr haxe.macro.ExprTools:Class<haxe.macro.ExprTools>]
																																			[FStatic:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																				haxe.macro.ExprTools
																																				iter:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void
																																		[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																																		[Array:(e : haxe.macro.Expr) -> Void]
																																			[Local itr(115239):Array<(e : haxe.macro.Expr) -> Void>:Array<(e : haxe.macro.Expr) -> Void>]
																																			[Const:Int] 0
																														[Else:Void] [Block:Void]
																															[Call:Void]
																																[Field:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																	[TypeExpr haxe.macro.ExprTools:Class<haxe.macro.ExprTools>]
																																	[FStatic:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																		haxe.macro.ExprTools
																																		iter:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void
																																[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																																[Array:(e : haxe.macro.Expr) -> Void]
																																	[Local itr(115239):Array<(e : haxe.macro.Expr) -> Void>:Array<(e : haxe.macro.Expr) -> Void>]
																																	[Const:Int] 0
																											[Else:Void] [Block:Void]
																												[Call:Void]
																													[Field:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																														[TypeExpr haxe.macro.ExprTools:Class<haxe.macro.ExprTools>]
																														[FStatic:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																															haxe.macro.ExprTools
																															iter:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void
																													[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																													[Array:(e : haxe.macro.Expr) -> Void]
																														[Local itr(115239):Array<(e : haxe.macro.Expr) -> Void>:Array<(e : haxe.macro.Expr) -> Void>]
																														[Const:Int] 0
																							[Else:Void] [Block:Void]
																								[Var `11(115259):haxe.macro.Position]
																									[Field:haxe.macro.Position]
																										[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																										[FAnon:haxe.macro.Position] pos:haxe.macro.Position
																								[Var `10(115260):haxe.macro.ExprDef]
																									[Field:haxe.macro.ExprDef]
																										[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																										[FAnon:haxe.macro.ExprDef] expr:haxe.macro.ExprDef
																								[If:Void]
																									[Binop:Bool]
																										[EnumIndex:Int] [Local `10(115260):haxe.macro.ExprDef:haxe.macro.ExprDef]
																										==
																										[Const:Int] 3
																									[Then:Void] [Block:Void]
																										[Var `13(115261):String]
																											[EnumParameter:String]
																												[Local `10(115260):haxe.macro.ExprDef:haxe.macro.ExprDef]
																												EField
																												1
																										[Var `12(115262):haxe.macro.Expr]
																											[EnumParameter:haxe.macro.Expr]
																												[Local `10(115260):haxe.macro.ExprDef:haxe.macro.ExprDef]
																												EField
																												0
																										[Block:Void]
																											[Var `15(115263):haxe.macro.Position]
																												[Field:haxe.macro.Position]
																													[Local `12(115262):haxe.macro.Expr:haxe.macro.Expr]
																													[FAnon:haxe.macro.Position] pos:haxe.macro.Position
																											[Var `14(115264):haxe.macro.ExprDef]
																												[Field:haxe.macro.ExprDef]
																													[Local `12(115262):haxe.macro.Expr:haxe.macro.Expr]
																													[FAnon:haxe.macro.ExprDef] expr:haxe.macro.ExprDef
																											[If:Void]
																												[Binop:Bool]
																													[EnumIndex:Int] [Local `14(115264):haxe.macro.ExprDef:haxe.macro.ExprDef]
																													==
																													[Const:Int] 0
																												[Then:Void] [Block:Void]
																													[Var `16(115265):haxe.macro.Constant]
																														[EnumParameter:haxe.macro.Constant]
																															[Local `14(115264):haxe.macro.ExprDef:haxe.macro.ExprDef]
																															EConst
																															0
																													[If:Void]
																														[Binop:Bool]
																															[EnumIndex:Int] [Local `16(115265):haxe.macro.Constant:haxe.macro.Constant]
																															==
																															[Const:Int] 3
																														[Then:Void] [Block:Void]
																															[Var `17(115266):String]
																																[EnumParameter:String]
																																	[Local `16(115265):haxe.macro.Constant:haxe.macro.Constant]
																																	CIdent
																																	0
																															[If:Void]
																																[Binop:Bool]
																																	[Local `17(115266):String:String]
																																	==
																																	[Const:String] "haxe"
																																[Then:Void] [Block:Void]
																																	[If:Void]
																																		[Binop:Bool]
																																			[Local `13(115261):String:String]
																																			==
																																			[Const:String] "PosInfos"
																																		[Then:Void] [Block:Void] [Block:Void]
																																		[Else:Void] [Block:Void]
																																			[Call:Void]
																																				[Field:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																					[TypeExpr haxe.macro.ExprTools:Class<haxe.macro.ExprTools>]
																																					[FStatic:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																						haxe.macro.ExprTools
																																						iter:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void
																																				[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																																				[Array:(e : haxe.macro.Expr) -> Void]
																																					[Local itr(115239):Array<(e : haxe.macro.Expr) -> Void>:Array<(e : haxe.macro.Expr) -> Void>]
																																					[Const:Int] 0
																																[Else:Void] [Block:Void]
																																	[Call:Void]
																																		[Field:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																			[TypeExpr haxe.macro.ExprTools:Class<haxe.macro.ExprTools>]
																																			[FStatic:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																				haxe.macro.ExprTools
																																				iter:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void
																																		[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																																		[Array:(e : haxe.macro.Expr) -> Void]
																																			[Local itr(115239):Array<(e : haxe.macro.Expr) -> Void>:Array<(e : haxe.macro.Expr) -> Void>]
																																			[Const:Int] 0
																														[Else:Void] [Block:Void]
																															[Call:Void]
																																[Field:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																	[TypeExpr haxe.macro.ExprTools:Class<haxe.macro.ExprTools>]
																																	[FStatic:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																		haxe.macro.ExprTools
																																		iter:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void
																																[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																																[Array:(e : haxe.macro.Expr) -> Void]
																																	[Local itr(115239):Array<(e : haxe.macro.Expr) -> Void>:Array<(e : haxe.macro.Expr) -> Void>]
																																	[Const:Int] 0
																												[Else:Void] [Block:Void]
																													[Call:Void]
																														[Field:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																															[TypeExpr haxe.macro.ExprTools:Class<haxe.macro.ExprTools>]
																															[FStatic:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																																haxe.macro.ExprTools
																																iter:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void
																														[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																														[Array:(e : haxe.macro.Expr) -> Void]
																															[Local itr(115239):Array<(e : haxe.macro.Expr) -> Void>:Array<(e : haxe.macro.Expr) -> Void>]
																															[Const:Int] 0
																									[Else:Void] [Block:Void]
																										[Call:Void]
																											[Field:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																												[TypeExpr haxe.macro.ExprTools:Class<haxe.macro.ExprTools>]
																												[FStatic:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void]
																													haxe.macro.ExprTools
																													iter:(e : haxe.macro.Expr, f : (haxe.macro.Expr -> Void)) -> Void
																											[Local e(115240):haxe.macro.Expr:haxe.macro.Expr]
																											[Array:(e : haxe.macro.Expr) -> Void]
																												[Local itr(115239):Array<(e : haxe.macro.Expr) -> Void>:Array<(e : haxe.macro.Expr) -> Void>]
																												[Const:Int] 0
																		[Call:Void]
																			[Field:(el : Array<haxe.macro.Expr>, f : (haxe.macro.Expr -> Void)) -> Void]
																				[TypeExpr haxe.macro.ExprArrayTools:Class<haxe.macro.ExprArrayTools>]
																				[FStatic:(el : Array<haxe.macro.Expr>, f : (haxe.macro.Expr -> Void)) -> Void]
																					haxe.macro.ExprArrayTools
																					iter:(el : Array<haxe.macro.Expr>, f : (haxe.macro.Expr -> Void)) -> Void
																			[Local es(115238):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
																			[Array:(e : haxe.macro.Expr) -> Void]
																				[Local itr(115239):Array<(e : haxe.macro.Expr) -> Void>:Array<(e : haxe.macro.Expr) -> Void>]
																				[Const:Int] 0
															[Else:Void] [Block:Void]
											[Else:Void] [Block:Void]
								[Break:Dynamic]
			[Return:Dynamic] [Local fields(115158):Array<haxe.macro.Field>:Array<haxe.macro.Field>]

	public static function onGenerate[Function:(types : Array<haxe.macro.ModuleType>) -> Void]
		[Arg:Array<haxe.macro.ModuleType>] [Local types(114951):Array<haxe.macro.ModuleType>]
		[Block:Void]
			[Block:Void]
				[Var `(115125):Int] [Const:Int] 0
				[While:Void]
					[Binop:Bool]
						[Local `(115125):Int:Int]
						<
						[Field:Int]
							[Local types(114951):Array<haxe.macro.ModuleType>:Array<haxe.macro.ModuleType>]
							[FInstance:Int]
								Array<haxe.macro.ModuleType>
								length:Int
					[Block:Void]
						[Var type(114952):haxe.macro.ModuleType]
							[Array:haxe.macro.ModuleType]
								[Local types(114951):Array<haxe.macro.ModuleType>:Array<haxe.macro.ModuleType>]
								[Local `(115125):Int:Int]
						[Unop:Int]
							++
							Prefix
							[Local `(115125):Int:Int]
						[Meta:Void]
							:ast(switch type {
	case TClassDecl(_.get() => cls = { name : "Main" }):
		function itr(e:TypedExpr) switch e {
			case _.expr => TConst(TInt(v)):
				var loc = e.pos.toLocation();
				var line = loc.range.start.line;
				if (v != loc.range.start.line) {
					if (info.exists(line)) {
						var info = info.get(line);
						if (info.length == 1) {
							info.push({ lineNumber : line, value1 : "$v", value2 : "" });
						} else {
							info[1].value2 = "" + v;
						};
					} else {
						throw "Line number $line should already exist in `info`.";
					};
				};			
			case _.t => TAnonymous(_.get() => anon):
				var sf = anon.fields.map(function(f) ->  @:implicitReturn return f.name);
				var cs = ["fileName", "lineNumber", "className", "methodName"];
				var has = false;
				for (c  in  cs) if (sf.indexOf(c) > -1) {
					has = true;
					break;
				};
				if (!has) {
					e.iter(itr);
				};			
			case _:
				e.iter(itr);			
		};
		for (field  in  cls.statics.get()) if (field.name == "main") {
			field.expr().iter(itr);
			break;
		};
		break;	
	case x:
})
							[If:Void]
								[Binop:Bool]
									[EnumIndex:Int] [Local type(114952):haxe.macro.ModuleType:haxe.macro.ModuleType]
									==
									[Const:Int] 0
								[Then:Void] [Block:Void]
									[Var `(115058):haxe.macro.Ref<haxe.macro.ClassType>]
										[EnumParameter:haxe.macro.Ref<haxe.macro.ClassType>]
											[Local type(114952):haxe.macro.ModuleType:haxe.macro.ModuleType]
											TClassDecl
											0
									[Block:Void]
										[Var _hx_tmp(115059):haxe.macro.ClassType]
										[Block:Void]
											[Var `19(115060):Null<{ t : haxe.macro.Ref<haxe.macro.ClassType>, params : Array<haxe.macro.Type> }>]
												[Field:Null<{ t : haxe.macro.Ref<haxe.macro.ClassType>, params : Array<haxe.macro.Type> }>]
													[Parenthesis:haxe.macro.ClassType]
														[Binop:haxe.macro.ClassType]
															[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
															=
															[Call:haxe.macro.ClassType]
																[Field:Void -> haxe.macro.ClassType]
																	[Local `(115058):haxe.macro.Ref<haxe.macro.ClassType>:haxe.macro.Ref<haxe.macro.ClassType>]
																	[FAnon:Void -> haxe.macro.ClassType] get:Void -> haxe.macro.ClassType
													[FAnon:Null<{ t : haxe.macro.Ref<haxe.macro.ClassType>, params : Array<haxe.macro.Type> }>] superClass:Null<{ t : haxe.macro.Ref<haxe.macro.ClassType>, params : Array<haxe.macro.Type> }>
											[Var `18(115061):haxe.macro.Ref<Array<haxe.macro.ClassField>>]
												[Field:haxe.macro.Ref<Array<haxe.macro.ClassField>>]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:haxe.macro.Ref<Array<haxe.macro.ClassField>>] statics:haxe.macro.Ref<Array<haxe.macro.ClassField>>
											[Var `17(115062):haxe.macro.Position]
												[Field:haxe.macro.Position]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:haxe.macro.Position] pos:haxe.macro.Position
											[Var `16(115063):Array<haxe.macro.TypeParameter>]
												[Field:Array<haxe.macro.TypeParameter>]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:Array<haxe.macro.TypeParameter>] params:Array<haxe.macro.TypeParameter>
											[Var `15(115064):Array<String>]
												[Field:Array<String>]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:Array<String>] pack:Array<String>
											[Var `14(115065):Array<haxe.macro.Ref<haxe.macro.ClassField>>]
												[Field:Array<haxe.macro.Ref<haxe.macro.ClassField>>]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:Array<haxe.macro.Ref<haxe.macro.ClassField>>] overrides:Array<haxe.macro.Ref<haxe.macro.ClassField>>
											[Var `13(115066):String]
												[Field:String]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:String] name:String
											[Var `12(115067):String]
												[Field:String]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:String] module:String
											[Var `11(115068):haxe.macro.MetaAccess]
												[Field:haxe.macro.MetaAccess]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:haxe.macro.MetaAccess] meta:haxe.macro.MetaAccess
											[Var `10(115069):haxe.macro.ClassKind]
												[Field:haxe.macro.ClassKind]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:haxe.macro.ClassKind] kind:haxe.macro.ClassKind
											[Var `9(115070):Bool]
												[Field:Bool]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:Bool] isPrivate:Bool
											[Var `8(115071):Bool]
												[Field:Bool]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:Bool] isInterface:Bool
											[Var `7(115072):Bool]
												[Field:Bool]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:Bool] isFinal:Bool
											[Var `6(115073):Bool]
												[Field:Bool]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:Bool] isExtern:Bool
											[Var `5(115074):Array<{ t : haxe.macro.Ref<haxe.macro.ClassType>, params : Array<haxe.macro.Type> }>]
												[Field:Array<{ t : haxe.macro.Ref<haxe.macro.ClassType>, params : Array<haxe.macro.Type> }>]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:Array<{ t : haxe.macro.Ref<haxe.macro.ClassType>, params : Array<haxe.macro.Type> }>] interfaces:Array<{ t : haxe.macro.Ref<haxe.macro.ClassType>, params : Array<haxe.macro.Type> }>
											[Var `4(115075):Null<haxe.macro.TypedExpr>]
												[Field:Null<haxe.macro.TypedExpr>]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:Null<haxe.macro.TypedExpr>] init:Null<haxe.macro.TypedExpr>
											[Var `3(115076):haxe.macro.Ref<Array<haxe.macro.ClassField>>]
												[Field:haxe.macro.Ref<Array<haxe.macro.ClassField>>]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:haxe.macro.Ref<Array<haxe.macro.ClassField>>] fields:haxe.macro.Ref<Array<haxe.macro.ClassField>>
											[Var `2(115077):Null<String>]
												[Field:Null<String>]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:Null<String>] doc:Null<String>
											[Var `1(115078):Null<haxe.macro.Ref<haxe.macro.ClassField>>]
												[Field:Null<haxe.macro.Ref<haxe.macro.ClassField>>]
													[Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
													[FAnon:Null<haxe.macro.Ref<haxe.macro.ClassField>>] constructor:Null<haxe.macro.Ref<haxe.macro.ClassField>>
											[If:Void]
												[Binop:Bool]
													[Local `13(115066):String:String]
													==
													[Const:String] "Main"
												[Then:Dynamic] [Block:Dynamic]
													[Block:Dynamic]
														[Var cls(115079):haxe.macro.ClassType] [Local _hx_tmp(115059):haxe.macro.ClassType:haxe.macro.ClassType]
														[Block:Dynamic]
															[Var itr(115080):Array<(e : haxe.macro.TypedExpr) -> Void>] [ArrayDecl:Array<(e : haxe.macro.TypedExpr) -> Void>] [Const:(e : haxe.macro.TypedExpr) -> Void] null
															[Binop:(e : haxe.macro.TypedExpr) -> Void]
																[Array:(e : haxe.macro.TypedExpr) -> Void]
																	[Local itr(115080):Array<(e : haxe.macro.TypedExpr) -> Void>:Array<(e : haxe.macro.TypedExpr) -> Void>]
																	[Const:Int] 0
																=
																[Function:(e : haxe.macro.TypedExpr) -> Void]
																	[Arg:haxe.macro.TypedExpr] [Local e(115081):haxe.macro.TypedExpr]
																	[Meta:Void]
																		:ast(switch e {
	case _.expr => TConst(TInt(v)):
		var loc = e.pos.toLocation();
		var line = loc.range.start.line;
		if (v != loc.range.start.line) {
			if (info.exists(line)) {
				var info = info.get(line);
				if (info.length == 1) {
					info.push({ lineNumber : line, value1 : "$v", value2 : "" });
				} else {
					info[1].value2 = "" + v;
				};
			} else {
				throw "Line number $line should already exist in `info`.";
			};
		};	
	case _.t => TAnonymous(_.get() => anon):
		var sf = anon.fields.map(function(f) ->  @:implicitReturn return f.name);
		var cs = ["fileName", "lineNumber", "className", "methodName"];
		var has = false;
		for (c  in  cs) if (sf.indexOf(c) > -1) {
			has = true;
			break;
		};
		if (!has) {
			e.iter(itr);
		};	
	case _:
		e.iter(itr);	
})
																		[Block:Void]
																			[Var _hx_tmp(115082):haxe.macro.TypedExprDef]
																			[Var _hx_tmp(115083):haxe.macro.Type]
																			[If:Void]
																				[Binop:Bool]
																					[EnumIndex:Int]
																						[Parenthesis:haxe.macro.TypedExprDef]
																							[Binop:haxe.macro.TypedExprDef]
																								[Local _hx_tmp(115082):haxe.macro.TypedExprDef:haxe.macro.TypedExprDef]
																								=
																								[Field:haxe.macro.TypedExprDef]
																									[Local e(115081):haxe.macro.TypedExpr:haxe.macro.TypedExpr]
																									[FAnon:haxe.macro.TypedExprDef] expr:haxe.macro.TypedExprDef
																					==
																					[Const:Int] 0
																				[Then:Void] [Block:Void]
																					[Var `(115084):haxe.macro.TConstant]
																						[EnumParameter:haxe.macro.TConstant]
																							[Local _hx_tmp(115082):haxe.macro.TypedExprDef:haxe.macro.TypedExprDef]
																							TConst
																							0
																					[If:Void]
																						[Binop:Bool]
																							[EnumIndex:Int] [Local `(115084):haxe.macro.TConstant:haxe.macro.TConstant]
																							==
																							[Const:Int] 0
																						[Then:Void] [Block:Void]
																							[Var `1(115085):Int]
																								[EnumParameter:Int]
																									[Local `(115084):haxe.macro.TConstant:haxe.macro.TConstant]
																									TInt
																									0
																							[Block:Void]
																								[Var v(115086):Int] [Local `1(115085):Int:Int]
																								[Block:Void]
																									[Var loc(115087):haxe.display.Location]
																										[Call:haxe.display.Location]
																											[Field:(p : haxe.macro.Position) -> haxe.display.Location]
																												[TypeExpr haxe.macro.PositionTools:Class<haxe.macro.PositionTools>]
																												[FStatic:(p : haxe.macro.Position) -> haxe.display.Location]
																													haxe.macro.PositionTools
																													toLocation:(p : haxe.macro.Position) -> haxe.display.Location
																											[Field:haxe.macro.Position]
																												[Local e(115081):haxe.macro.TypedExpr:haxe.macro.TypedExpr]
																												[FAnon:haxe.macro.Position] pos:haxe.macro.Position
																									[Var line(115088):Int]
																										[Field:Int]
																											[Field:haxe.display.Position]
																												[Field:haxe.display.Range]
																													[Local loc(115087):haxe.display.Location:haxe.display.Location]
																													[FAnon:haxe.display.Range] range:haxe.display.Range
																												[FAnon:haxe.display.Position] start:haxe.display.Position
																											[FAnon:Int] line:Int
																									[If:Void]
																										[Binop:Bool]
																											[Local v(115086):Int:Int]
																											!=
																											[Field:Int]
																												[Field:haxe.display.Position]
																													[Field:haxe.display.Range]
																														[Local loc(115087):haxe.display.Location:haxe.display.Location]
																														[FAnon:haxe.display.Range] range:haxe.display.Range
																													[FAnon:haxe.display.Position] start:haxe.display.Position
																												[FAnon:Int] line:Int
																										[Then:Void] [Block:Void]
																											[If:Void]
																												[Block:Bool]
																													[Var this(115089):haxe.IMap<Int, Array<Info>>]
																														[Field:Map<Int, Array<Info>>]
																															[TypeExpr Macros:Class<Macros>]
																															[FStatic:Map<Int, Array<Info>>]
																																Macros
																																info:Map<Int, Array<Info>>
																													[Call:Bool]
																														[Field:(key : Int) -> Bool]
																															[Cast:haxe.ds.IntMap<Array<Info>>] [Local this(115089):haxe.IMap<Int, Array<Info>>:haxe.IMap<Int, Array<Info>>]
																															[FInstance:(key : Int) -> Bool]
																																haxe.ds.IntMap<Array<Info>>
																																exists:(key : Int) -> Bool
																														[Local line(115088):Int:Int]
																												[Then:Void] [Block:Void]
																													[Var info(115090):Null<Array<Info>>]
																														[Block:Null<Array<Info>>]
																															[Var this(115091):haxe.IMap<Int, Array<Info>>]
																																[Field:Map<Int, Array<Info>>]
																																	[TypeExpr Macros:Class<Macros>]
																																	[FStatic:Map<Int, Array<Info>>]
																																		Macros
																																		info:Map<Int, Array<Info>>
																															[Call:Null<Array<Info>>]
																																[Field:(key : Int) -> Null<Array<Info>>]
																																	[Cast:haxe.ds.IntMap<Array<Info>>] [Local this(115091):haxe.IMap<Int, Array<Info>>:haxe.IMap<Int, Array<Info>>]
																																	[FInstance:(key : Int) -> Null<Array<Info>>]
																																		haxe.ds.IntMap<Array<Info>>
																																		get:(key : Int) -> Null<haxe.ds.IntMap.T>
																																[Local line(115088):Int:Int]
																													[If:Void]
																														[Binop:Bool]
																															[Field:Int]
																																[Local info(115090):Null<Array<Info>>:Null<Array<Info>>]
																																[FInstance:Int]
																																	Array<Info>
																																	length:Int
																															==
																															[Const:Int] 1
																														[Then:Int] [Block:Int]
																															[Call:Int]
																																[Field:(x : Info) -> Int]
																																	[Local info(115090):Null<Array<Info>>:Null<Array<Info>>]
																																	[FInstance:(x : Info) -> Int]
																																		Array<Info>
																																		push:(x : Array.T) -> Int
																																[ObjectDecl:{ value2 : String, value1 : String, lineNumber : Int }]
																																	lineNumber: [Local line(115088):Int:Int]
																																	value1: [Binop:String]
																																		[Const:String] ""
																																		+
																																		[Local v(115086):Int:Int]
																																	value2: [Const:String] ""
																														[Else:String] [Block:String]
																															[Binop:String]
																																[Field:String]
																																	[Array:Info]
																																		[Local info(115090):Null<Array<Info>>:Null<Array<Info>>]
																																		[Const:Int] 1
																																	[FAnon:String] value2:String
																																=
																																[Binop:String]
																																	[Const:String] ""
																																	+
																																	[Local v(115086):Int:Int]
																												[Else:Unknown<26>] [Block:Unknown<26>]
																													[Throw:Unknown<26>]
																														[Throw:Unknown<26>]
																															[Call:Any]
																																[Field:(value : Any) -> Any]
																																	[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
																																	[FStatic:(value : Any) -> Any]
																																		haxe.Exception
																																		thrown:(value : Any) -> Any
																																[Binop:String]
																																	[Binop:String]
																																		[Const:String] "Line number "
																																		+
																																		[Local line(115088):Int:Int]
																																	+
																																	[Const:String] " should already exist in `info`."
																						[Else:Void] [If:Void]
																							[Binop:Bool]
																								[EnumIndex:Int]
																									[Parenthesis:haxe.macro.Type]
																										[Binop:haxe.macro.Type]
																											[Local _hx_tmp(115083):haxe.macro.Type:haxe.macro.Type]
																											=
																											[Field:haxe.macro.Type]
																												[Local e(115081):haxe.macro.TypedExpr:haxe.macro.TypedExpr]
																												[FAnon:haxe.macro.Type] t:haxe.macro.Type
																								==
																								[Const:Int] 5
																							[Then:Void] [Block:Void]
																								[Var `2(115092):haxe.macro.Ref<haxe.macro.AnonType>]
																									[EnumParameter:haxe.macro.Ref<haxe.macro.AnonType>]
																										[Local _hx_tmp(115083):haxe.macro.Type:haxe.macro.Type]
																										TAnonymous
																										0
																								[Block:Void]
																									[Var _hx_tmp(115093):haxe.macro.AnonType]
																									[Block:Void]
																										[Var anon(115094):haxe.macro.AnonType]
																											[Parenthesis:haxe.macro.AnonType]
																												[Binop:haxe.macro.AnonType]
																													[Local _hx_tmp(115093):haxe.macro.AnonType:haxe.macro.AnonType]
																													=
																													[Call:haxe.macro.AnonType]
																														[Field:Void -> haxe.macro.AnonType]
																															[Local `2(115092):haxe.macro.Ref<haxe.macro.AnonType>:haxe.macro.Ref<haxe.macro.AnonType>]
																															[FAnon:Void -> haxe.macro.AnonType] get:Void -> haxe.macro.AnonType
																										[Block:Void]
																											[Var sf(115095):Array<String>]
																												[Block:Array<String>]
																													[Var _this(115096):Array<haxe.macro.ClassField>]
																														[Field:Array<haxe.macro.ClassField>]
																															[Local anon(115094):haxe.macro.AnonType:haxe.macro.AnonType]
																															[FAnon:Array<haxe.macro.ClassField>] fields:Array<haxe.macro.ClassField>
																													[Block:Array<String>]
																														[Var `(115097):Array<String>] [ArrayDecl:Array<String>]
																														[Block:Void]
																															[Var `1(115098):Int] [Const:Int] 0
																															[Var `2(115099):Array<haxe.macro.ClassField>] [Local _this(115096):Array<haxe.macro.ClassField>:Array<haxe.macro.ClassField>]
																															[While:Void]
																																[Binop:Bool]
																																	[Local `1(115098):Int:Int]
																																	<
																																	[Field:Int]
																																		[Local `2(115099):Array<haxe.macro.ClassField>:Array<haxe.macro.ClassField>]
																																		[FInstance:Int]
																																			Array<haxe.macro.ClassField>
																																			length:Int
																																[Block:Void]
																																	[Var v(115100):haxe.macro.ClassField]
																																		[Array:haxe.macro.ClassField]
																																			[Local `2(115099):Array<haxe.macro.ClassField>:Array<haxe.macro.ClassField>]
																																			[Local `1(115098):Int:Int]
																																	[Unop:Int]
																																		++
																																		Prefix
																																		[Local `1(115098):Int:Int]
																																	[Call:Int]
																																		[Field:(x : String) -> Int]
																																			[Local `(115097):Array<String>:Array<String>]
																																			[FInstance:(x : String) -> Int]
																																				Array<String>
																																				push:(x : Array.T) -> Int
																																		[Call:String]
																																			[Function:(f : haxe.macro.ClassField) -> String]
																																				[Arg:haxe.macro.ClassField] [Local f(115101):haxe.macro.ClassField]
																																				[Block:Dynamic]
																																					[Return:Dynamic]
																																						[Field:String]
																																							[Local f(115101):haxe.macro.ClassField:haxe.macro.ClassField]
																																							[FAnon:String] name:String
																																			[Local v(115100):haxe.macro.ClassField:haxe.macro.ClassField]
																														[Local `(115097):Array<String>:Array<String>]
																											[Var cs(115102):Array<String>]
																												[ArrayDecl:Array<String>]
																													[Const:String] "fileName"
																													[Const:String] "lineNumber"
																													[Const:String] "className"
																													[Const:String] "methodName"
																											[Var has(115103):Bool] [Const:Bool] false
																											[Block:Void]
																												[Var `(115104):Int] [Const:Int] 0
																												[While:Void]
																													[Binop:Bool]
																														[Local `(115104):Int:Int]
																														<
																														[Field:Int]
																															[Local cs(115102):Array<String>:Array<String>]
																															[FInstance:Int]
																																Array<String>
																																length:Int
																													[Block:Void]
																														[Var c(115105):String]
																															[Array:String]
																																[Local cs(115102):Array<String>:Array<String>]
																																[Local `(115104):Int:Int]
																														[Unop:Int]
																															++
																															Prefix
																															[Local `(115104):Int:Int]
																														[If:Void]
																															[Binop:Bool]
																																[Call:Int]
																																	[Field:(x : String, ?fromIndex : Null<Int>) -> Int]
																																		[Local sf(115095):Array<String>:Array<String>]
																																		[FInstance:(x : String, ?fromIndex : Null<Int>) -> Int]
																																			Array<String>
																																			indexOf:(x : Array.T, ?fromIndex : Null<Int>) -> Int
																																	[Local c(115105):String:String]
																																	[Const:Null<Int>] null
																																>
																																[Const:Int] -1
																															[Then:Dynamic] [Block:Dynamic]
																																[Binop:Bool]
																																	[Local has(115103):Bool:Bool]
																																	=
																																	[Const:Bool] true
																																[Break:Dynamic]
																											[If:Void]
																												[Unop:Bool]
																													!
																													Prefix
																													[Local has(115103):Bool:Bool]
																												[Then:Void] [Block:Void]
																													[Call:Void]
																														[Field:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void]
																															[TypeExpr haxe.macro.TypedExprTools:Class<haxe.macro.TypedExprTools>]
																															[FStatic:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void]
																																haxe.macro.TypedExprTools
																																iter:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void
																														[Local e(115081):haxe.macro.TypedExpr:haxe.macro.TypedExpr]
																														[Array:(e : haxe.macro.TypedExpr) -> Void]
																															[Local itr(115080):Array<(e : haxe.macro.TypedExpr) -> Void>:Array<(e : haxe.macro.TypedExpr) -> Void>]
																															[Const:Int] 0
																							[Else:Void] [Block:Void]
																								[Call:Void]
																									[Field:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void]
																										[TypeExpr haxe.macro.TypedExprTools:Class<haxe.macro.TypedExprTools>]
																										[FStatic:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void]
																											haxe.macro.TypedExprTools
																											iter:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void
																									[Local e(115081):haxe.macro.TypedExpr:haxe.macro.TypedExpr]
																									[Array:(e : haxe.macro.TypedExpr) -> Void]
																										[Local itr(115080):Array<(e : haxe.macro.TypedExpr) -> Void>:Array<(e : haxe.macro.TypedExpr) -> Void>]
																										[Const:Int] 0
																				[Else:Void] [If:Void]
																					[Binop:Bool]
																						[EnumIndex:Int]
																							[Parenthesis:haxe.macro.Type]
																								[Binop:haxe.macro.Type]
																									[Local _hx_tmp(115083):haxe.macro.Type:haxe.macro.Type]
																									=
																									[Field:haxe.macro.Type]
																										[Local e(115081):haxe.macro.TypedExpr:haxe.macro.TypedExpr]
																										[FAnon:haxe.macro.Type] t:haxe.macro.Type
																						==
																						[Const:Int] 5
																					[Then:Void] [Block:Void]
																						[Var `3(115106):haxe.macro.Ref<haxe.macro.AnonType>]
																							[EnumParameter:haxe.macro.Ref<haxe.macro.AnonType>]
																								[Local _hx_tmp(115083):haxe.macro.Type:haxe.macro.Type]
																								TAnonymous
																								0
																						[Block:Void]
																							[Var _hx_tmp(115107):haxe.macro.AnonType]
																							[Block:Void]
																								[Var anon(115108):haxe.macro.AnonType]
																									[Parenthesis:haxe.macro.AnonType]
																										[Binop:haxe.macro.AnonType]
																											[Local _hx_tmp(115107):haxe.macro.AnonType:haxe.macro.AnonType]
																											=
																											[Call:haxe.macro.AnonType]
																												[Field:Void -> haxe.macro.AnonType]
																													[Local `3(115106):haxe.macro.Ref<haxe.macro.AnonType>:haxe.macro.Ref<haxe.macro.AnonType>]
																													[FAnon:Void -> haxe.macro.AnonType] get:Void -> haxe.macro.AnonType
																								[Block:Void]
																									[Var sf(115109):Array<String>]
																										[Block:Array<String>]
																											[Var _this(115110):Array<haxe.macro.ClassField>]
																												[Field:Array<haxe.macro.ClassField>]
																													[Local anon(115108):haxe.macro.AnonType:haxe.macro.AnonType]
																													[FAnon:Array<haxe.macro.ClassField>] fields:Array<haxe.macro.ClassField>
																											[Block:Array<String>]
																												[Var `(115111):Array<String>] [ArrayDecl:Array<String>]
																												[Block:Void]
																													[Var `1(115112):Int] [Const:Int] 0
																													[Var `2(115113):Array<haxe.macro.ClassField>] [Local _this(115110):Array<haxe.macro.ClassField>:Array<haxe.macro.ClassField>]
																													[While:Void]
																														[Binop:Bool]
																															[Local `1(115112):Int:Int]
																															<
																															[Field:Int]
																																[Local `2(115113):Array<haxe.macro.ClassField>:Array<haxe.macro.ClassField>]
																																[FInstance:Int]
																																	Array<haxe.macro.ClassField>
																																	length:Int
																														[Block:Void]
																															[Var v(115114):haxe.macro.ClassField]
																																[Array:haxe.macro.ClassField]
																																	[Local `2(115113):Array<haxe.macro.ClassField>:Array<haxe.macro.ClassField>]
																																	[Local `1(115112):Int:Int]
																															[Unop:Int]
																																++
																																Prefix
																																[Local `1(115112):Int:Int]
																															[Call:Int]
																																[Field:(x : String) -> Int]
																																	[Local `(115111):Array<String>:Array<String>]
																																	[FInstance:(x : String) -> Int]
																																		Array<String>
																																		push:(x : Array.T) -> Int
																																[Call:String]
																																	[Function:(f : haxe.macro.ClassField) -> String]
																																		[Arg:haxe.macro.ClassField] [Local f(115115):haxe.macro.ClassField]
																																		[Block:Dynamic]
																																			[Return:Dynamic]
																																				[Field:String]
																																					[Local f(115115):haxe.macro.ClassField:haxe.macro.ClassField]
																																					[FAnon:String] name:String
																																	[Local v(115114):haxe.macro.ClassField:haxe.macro.ClassField]
																												[Local `(115111):Array<String>:Array<String>]
																									[Var cs(115116):Array<String>]
																										[ArrayDecl:Array<String>]
																											[Const:String] "fileName"
																											[Const:String] "lineNumber"
																											[Const:String] "className"
																											[Const:String] "methodName"
																									[Var has(115117):Bool] [Const:Bool] false
																									[Block:Void]
																										[Var `(115118):Int] [Const:Int] 0
																										[While:Void]
																											[Binop:Bool]
																												[Local `(115118):Int:Int]
																												<
																												[Field:Int]
																													[Local cs(115116):Array<String>:Array<String>]
																													[FInstance:Int]
																														Array<String>
																														length:Int
																											[Block:Void]
																												[Var c(115119):String]
																													[Array:String]
																														[Local cs(115116):Array<String>:Array<String>]
																														[Local `(115118):Int:Int]
																												[Unop:Int]
																													++
																													Prefix
																													[Local `(115118):Int:Int]
																												[If:Void]
																													[Binop:Bool]
																														[Call:Int]
																															[Field:(x : String, ?fromIndex : Null<Int>) -> Int]
																																[Local sf(115109):Array<String>:Array<String>]
																																[FInstance:(x : String, ?fromIndex : Null<Int>) -> Int]
																																	Array<String>
																																	indexOf:(x : Array.T, ?fromIndex : Null<Int>) -> Int
																															[Local c(115119):String:String]
																															[Const:Null<Int>] null
																														>
																														[Const:Int] -1
																													[Then:Dynamic] [Block:Dynamic]
																														[Binop:Bool]
																															[Local has(115117):Bool:Bool]
																															=
																															[Const:Bool] true
																														[Break:Dynamic]
																									[If:Void]
																										[Unop:Bool]
																											!
																											Prefix
																											[Local has(115117):Bool:Bool]
																										[Then:Void] [Block:Void]
																											[Call:Void]
																												[Field:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void]
																													[TypeExpr haxe.macro.TypedExprTools:Class<haxe.macro.TypedExprTools>]
																													[FStatic:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void]
																														haxe.macro.TypedExprTools
																														iter:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void
																												[Local e(115081):haxe.macro.TypedExpr:haxe.macro.TypedExpr]
																												[Array:(e : haxe.macro.TypedExpr) -> Void]
																													[Local itr(115080):Array<(e : haxe.macro.TypedExpr) -> Void>:Array<(e : haxe.macro.TypedExpr) -> Void>]
																													[Const:Int] 0
																					[Else:Void] [Block:Void]
																						[Call:Void]
																							[Field:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void]
																								[TypeExpr haxe.macro.TypedExprTools:Class<haxe.macro.TypedExprTools>]
																								[FStatic:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void]
																									haxe.macro.TypedExprTools
																									iter:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void
																							[Local e(115081):haxe.macro.TypedExpr:haxe.macro.TypedExpr]
																							[Array:(e : haxe.macro.TypedExpr) -> Void]
																								[Local itr(115080):Array<(e : haxe.macro.TypedExpr) -> Void>:Array<(e : haxe.macro.TypedExpr) -> Void>]
																								[Const:Int] 0
															[Block:Void]
																[Var `(115120):Int] [Const:Int] 0
																[Var `1(115121):Array<haxe.macro.ClassField>]
																	[Call:Array<haxe.macro.ClassField>]
																		[Field:Void -> Array<haxe.macro.ClassField>]
																			[Field:haxe.macro.Ref<Array<haxe.macro.ClassField>>]
																				[Local cls(115079):haxe.macro.ClassType:haxe.macro.ClassType]
																				[FAnon:haxe.macro.Ref<Array<haxe.macro.ClassField>>] statics:haxe.macro.Ref<Array<haxe.macro.ClassField>>
																			[FAnon:Void -> Array<haxe.macro.ClassField>] get:Void -> Array<haxe.macro.ClassField>
																[While:Void]
																	[Binop:Bool]
																		[Local `(115120):Int:Int]
																		<
																		[Field:Int]
																			[Local `1(115121):Array<haxe.macro.ClassField>:Array<haxe.macro.ClassField>]
																			[FInstance:Int]
																				Array<haxe.macro.ClassField>
																				length:Int
																	[Block:Void]
																		[Var field(115122):haxe.macro.ClassField]
																			[Array:haxe.macro.ClassField]
																				[Local `1(115121):Array<haxe.macro.ClassField>:Array<haxe.macro.ClassField>]
																				[Local `(115120):Int:Int]
																		[Unop:Int]
																			++
																			Prefix
																			[Local `(115120):Int:Int]
																		[If:Void]
																			[Binop:Bool]
																				[Field:String]
																					[Local field(115122):haxe.macro.ClassField:haxe.macro.ClassField]
																					[FAnon:String] name:String
																				==
																				[Const:String] "main"
																			[Then:Dynamic] [Block:Dynamic]
																				[Call:Void]
																					[Field:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void]
																						[TypeExpr haxe.macro.TypedExprTools:Class<haxe.macro.TypedExprTools>]
																						[FStatic:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void]
																							haxe.macro.TypedExprTools
																							iter:(e : haxe.macro.TypedExpr, f : (haxe.macro.TypedExpr -> Void)) -> Void
																					[Call:Null<haxe.macro.TypedExpr>]
																						[Field:Void -> Null<haxe.macro.TypedExpr>]
																							[Local field(115122):haxe.macro.ClassField:haxe.macro.ClassField]
																							[FAnon:Void -> Null<haxe.macro.TypedExpr>] expr:Void -> Null<haxe.macro.TypedExpr>
																					[Array:(e : haxe.macro.TypedExpr) -> Void]
																						[Local itr(115080):Array<(e : haxe.macro.TypedExpr) -> Void>:Array<(e : haxe.macro.TypedExpr) -> Void>]
																						[Const:Int] 0
																				[Break:Dynamic]
															[Break:Dynamic]
												[Else:Void] [Block:Void]
													[Var x(115123):haxe.macro.ModuleType] [Local type(114952):haxe.macro.ModuleType:haxe.macro.ModuleType]
													[Block:Void]
								[Else:Void] [Block:Void]
									[Var x(115124):haxe.macro.ModuleType] [Local type(114952):haxe.macro.ModuleType:haxe.macro.ModuleType]
									[Block:Void]
			[Var values(115134):Array<Array<Info>>]
				[Block:Array<Array<Info>>]
					[Var `1(115126):Array<Array<Info>>] [ArrayDecl:Array<Array<Info>>]
					[Block:Void]
						[Var `2(115130):KeyValueIterator<Int, Array<Info>>]
							[Block:KeyValueIterator<Int, Array<Info>>]
								[Var this(115129):haxe.IMap<Int, Array<Info>>]
									[Field:Map<Int, Array<Info>>]
										[TypeExpr Macros:Class<Macros>]
										[FStatic:Map<Int, Array<Info>>]
											Macros
											info:Map<Int, Array<Info>>
								[Cast:KeyValueIterator<Int, Array<Info>>]
									[New:haxe.iterators.MapKeyValueIterator<Int, Array<Info>>]
										haxe.iterators.MapKeyValueIterator<Int, Array<Info>>
										[Cast:haxe.ds.IntMap<Array<Info>>] [Local this(115129):haxe.IMap<Int, Array<Info>>:haxe.IMap<Int, Array<Info>>]
						[While:Void]
							[Call:Bool]
								[Field:Void -> Bool]
									[Local `2(115130):KeyValueIterator<Int, Array<Info>>:KeyValueIterator<Int, Array<Info>>]
									[FAnon:Void -> Bool] hasNext:Void -> Bool
							[Block:Void]
								[Var `3(115131):{ value : Array<Info>, key : Int }]
									[Call:{ value : Array<Info>, key : Int }]
										[Field:Void -> { value : Array<Info>, key : Int }]
											[Local `2(115130):KeyValueIterator<Int, Array<Info>>:KeyValueIterator<Int, Array<Info>>]
											[FAnon:Void -> { value : Array<Info>, key : Int }] next:Void -> { value : Array<Info>, key : Int }
								[Var _(115132):Int]
									[Field:Int]
										[Local `3(115131):{ value : Array<Info>, key : Int }:{ value : Array<Info>, key : Int }]
										[FAnon:Int] key:Int
								[Var value(115133):Array<Info>]
									[Field:Array<Info>]
										[Local `3(115131):{ value : Array<Info>, key : Int }:{ value : Array<Info>, key : Int }]
										[FAnon:Array<Info>] value:Array<Info>
								[Block:Int]
									[Call:Int]
										[Field:(x : Array<Info>) -> Int]
											[Local `1(115126):Array<Array<Info>>:Array<Array<Info>>]
											[FInstance:(x : Array<Info>) -> Int]
												Array<Array<Info>>
												push:(x : Array.T) -> Int
										[Local value(115133):Array<Info>:Array<Info>]
					[Local `1(115126):Array<Array<Info>>:Array<Array<Info>>]
			[Call:Void]
				[Field:(f : ((Array<Info>, Array<Info>) -> Int)) -> Void]
					[Local values(115134):Array<Array<Info>>:Array<Array<Info>>]
					[FInstance:(f : ((Array<Info>, Array<Info>) -> Int)) -> Void]
						Array<Array<Info>>
						sort:(f : ((Array.T, Array.T) -> Int)) -> Void
				[Function:(a : Array<Info>, b : Array<Info>) -> Int]
					[Arg:Array<Info>] [Local a(115135):Array<Info>]
					[Arg:Array<Info>] [Local b(115136):Array<Info>]
					[Return:Dynamic]
						[Binop:Int]
							[Field:Int]
								[Array:Info]
									[Local a(115135):Array<Info>:Array<Info>]
									[Const:Int] 0
								[FAnon:Int] lineNumber:Int
							-
							[Field:Int]
								[Array:Info]
									[Local b(115136):Array<Info>:Array<Info>]
									[Const:Int] 0
								[FAnon:Int] lineNumber:Int
			[Call:Void]
				[Field:(s : String, ?encoding : Null<haxe.io.Encoding>) -> Void]
					[Call:haxe.io.Output]
						[Field:Void -> haxe.io.Output]
							[TypeExpr Macros:Class<Macros>]
							[FStatic:Void -> haxe.io.Output]
								Macros
								get_handle:Void -> haxe.io.Output
					[FInstance:(s : String, ?encoding : Null<haxe.io.Encoding>) -> Void]
						haxe.io.Output
						writeString:(s : String, ?encoding : Null<haxe.io.Encoding>) -> Void
				[Const:String] "| line number | expr a | expr b | typed expr a | typed expr b | runtime a | runtime b |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n"
				[Const:Null<haxe.io.Encoding>] null
			[Block:Void]
				[Var `2(115140):Int] [Const:Int] 0
				[While:Void]
					[Binop:Bool]
						[Local `2(115140):Int:Int]
						<
						[Field:Int]
							[Local values(115134):Array<Array<Info>>:Array<Array<Info>>]
							[FInstance:Int]
								Array<Array<Info>>
								length:Int
					[Block:Void]
						[Var set(115137):Array<Info>]
							[Array:Array<Info>]
								[Local values(115134):Array<Array<Info>>:Array<Array<Info>>]
								[Local `2(115140):Int:Int]
						[Unop:Int]
							++
							Prefix
							[Local `2(115140):Int:Int]
						[Var set1(115138):Info]
							[Array:Info]
								[Local set(115137):Array<Info>:Array<Info>]
								[Const:Int] 0
						[Var set2(115139):Info]
							[Array:Info]
								[Local set(115137):Array<Info>:Array<Info>]
								[Const:Int] 1
						[Call:Void]
							[Field:(s : String, ?encoding : Null<haxe.io.Encoding>) -> Void]
								[Call:haxe.io.Output]
									[Field:Void -> haxe.io.Output]
										[TypeExpr Macros:Class<Macros>]
										[FStatic:Void -> haxe.io.Output]
											Macros
											get_handle:Void -> haxe.io.Output
								[FInstance:(s : String, ?encoding : Null<haxe.io.Encoding>) -> Void]
									haxe.io.Output
									writeString:(s : String, ?encoding : Null<haxe.io.Encoding>) -> Void
							[Binop:String]
								[Binop:String]
									[Binop:String]
										[Binop:String]
											[Binop:String]
												[Binop:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Const:String] "| "
																	+
																	[Field:Int]
																		[Local set1(115138):Info:Info]
																		[FAnon:Int] lineNumber:Int
																+
																[Const:String] " | "
															+
															[Field:String]
																[Local set1(115138):Info:Info]
																[FAnon:String] value1:String
														+
														[Const:String] " | "
													+
													[Field:String]
														[Local set1(115138):Info:Info]
														[FAnon:String] value2:String
												+
												[Const:String] " | "
											+
											[Field:String]
												[Local set2(115139):Info:Info]
												[FAnon:String] value1:String
										+
										[Const:String] " | "
									+
									[Field:String]
										[Local set2(115139):Info:Info]
										[FAnon:String] value2:String
								+
								[Const:String] " |\n"
							[Const:Null<haxe.io.Encoding>] null
			[Call:Void]
				[Field:Void -> Void]
					[Call:haxe.io.Output]
						[Field:Void -> haxe.io.Output]
							[TypeExpr Macros:Class<Macros>]
							[FStatic:Void -> haxe.io.Output]
								Macros
								get_handle:Void -> haxe.io.Output
					[FInstance:Void -> Void]
						haxe.io.Output
						flush:Void -> Void
			[Call:Void]
				[Field:Void -> Void]
					[Call:haxe.io.Output]
						[Field:Void -> haxe.io.Output]
							[TypeExpr Macros:Class<Macros>]
							[FStatic:Void -> haxe.io.Output]
								Macros
								get_handle:Void -> haxe.io.Output
					[FInstance:Void -> Void]
						haxe.io.Output
						close:Void -> Void
			[Call:Void]
				[Field:(srcPath : String, dstPath : String) -> Void]
					[TypeExpr sys.io.File:Class<sys.io.File>]
					[FStatic:(srcPath : String, dstPath : String) -> Void]
						sys.io.File
						copy:(srcPath : String, dstPath : String) -> Void
				[Const:String] "./runall.sh"
				[Binop:String]
					[Binop:String]
						[Const:String] "./"
						+
						[Field:String]
							[TypeExpr Macros:Class<Macros>]
							[FStatic:String]
								Macros
								directory:String
					+
					[Const:String] "/runall.sh"
}