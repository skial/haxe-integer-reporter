@:coreApi
class haxe.Exception {

	public function new[Function:(message : String, ?previous : Null<haxe.Exception>, ?native : Null<Any>) -> Void]
		[Arg:String] [Local message(109505):String]
		[Arg:Null<haxe.Exception>]
			[Local previous(109506):Null<haxe.Exception>]
			[Const:Null<haxe.Exception>] null
		[Arg:Null<Any>]
			[Local native(109507):Null<Any>]
			[Const:Null<Any>] null
		[Block:Void]
			[Binop:Int]
				[Field:Int]
					[Const:haxe.Exception] this
					[FInstance:Int]
						haxe.Exception
						__skipStack:Int
				=
				[Const:Int] 0
			[Binop:String]
				[Field:String]
					[Const:haxe.Exception] this
					[FInstance:String]
						haxe.Exception
						__exceptionMessage:String
				=
				[Local message(109505):String:String]
			[Binop:Null<haxe.Exception>]
				[Field:Null<haxe.Exception>]
					[Const:haxe.Exception] this
					[FInstance:Null<haxe.Exception>]
						haxe.Exception
						__previousException:Null<haxe.Exception>
				=
				[Local previous(109506):Null<haxe.Exception>:Null<haxe.Exception>]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local native(109507):Null<Any>:Null<Any>]
						!=
						[Const:Null<Any>] null
				[Then:Any] [Block:Any]
					[Binop:haxe.CallStack]
						[Field:haxe.CallStack]
							[Const:haxe.Exception] this
							[FInstance:haxe.CallStack]
								haxe.Exception
								__nativeStack:haxe.CallStack
						=
						[Call:Array<haxe.StackItem>]
							[Field:Void -> Array<haxe.StackItem>]
								[TypeExpr haxe.NativeStackTrace:Class<haxe.NativeStackTrace>]
								[FStatic:Void -> Array<haxe.StackItem>]
									haxe.NativeStackTrace
									exceptionStack:Void -> Array<haxe.StackItem>
					[Binop:Any]
						[Field:Any]
							[Const:haxe.Exception] this
							[FInstance:Any]
								haxe.Exception
								__nativeException:Any
						=
						[Local native(109507):Null<Any>:Null<Any>]
				[Else:Any] [Block:Any]
					[Binop:haxe.CallStack]
						[Field:haxe.CallStack]
							[Const:haxe.Exception] this
							[FInstance:haxe.CallStack]
								haxe.Exception
								__nativeStack:haxe.CallStack
						=
						[Call:Array<haxe.StackItem>]
							[Field:Void -> Array<haxe.StackItem>]
								[TypeExpr haxe.NativeStackTrace:Class<haxe.NativeStackTrace>]
								[FStatic:Void -> Array<haxe.StackItem>]
									haxe.NativeStackTrace
									callStack:Void -> Array<haxe.StackItem>
					[Binop:Any]
						[Field:Any]
							[Const:haxe.Exception] this
							[FInstance:Any]
								haxe.Exception
								__nativeException:Any
						=
						[Meta:Any]
							:implicitCast
							[Cast:Any] [Const:haxe.Exception] this

	public var message(get,never):String;

	public var stack(get,never):haxe.CallStack;

	public var previous(get,never):Null<haxe.Exception>;

	public var native(get,never):Any;

	@:noCompletion
	var __exceptionMessage:String;

	@:noCompletion
	var __exceptionStack:Null<haxe.CallStack>;

	@:noCompletion
	var __nativeStack:haxe.CallStack;

	@:value(0) @:noCompletion @:ifFeature("haxe.Exception.get_stack")
	var __skipStack:Int;

	@:noCompletion
	var __nativeException:Any;

	@:noCompletion
	var __previousException:Null<haxe.Exception>;

	function unwrap[Function:Void -> Any]
		[Block:Dynamic]
			[Return:Dynamic]
				[Field:Any]
					[Const:haxe.Exception] this
					[FInstance:Any]
						haxe.Exception
						__nativeException:Any

	@:ifFeature("haxe.Exception.thrown")
	public function toString[Function:Void -> String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:String]
					[Field:Void -> String]
						[Const:haxe.Exception] this
						[FInstance:Void -> String]
							haxe.Exception
							get_message:Void -> String

	public function details[Function:Void -> String]
		[Block:Dynamic]
			[Return:Dynamic]
				[If:String]
					[Binop:Bool]
						[Call:Null<haxe.Exception>]
							[Field:Void -> Null<haxe.Exception>]
								[Const:haxe.Exception] this
								[FInstance:Void -> Null<haxe.Exception>]
									haxe.Exception
									get_previous:Void -> Null<haxe.Exception>
						==
						[Const:Null<haxe.Exception>] null
					[Then:String] [Block:String]
						[Binop:String]
							[Binop:String]
								[Const:String] "Exception: "
								+
								[Call:String]
									[Field:Void -> String]
										[Const:haxe.Exception] this
										[FInstance:Void -> String]
											haxe.Exception
											get_message:Void -> String
							+
							[Block:String]
								[Var tmp(109531):haxe.CallStack]
									[Call:haxe.CallStack]
										[Field:Void -> haxe.CallStack]
											[Const:haxe.Exception] this
											[FInstance:Void -> haxe.CallStack]
												haxe.Exception
												get_stack:Void -> haxe.CallStack
								[If:String]
									[Binop:Bool]
										[Local tmp(109531):haxe.CallStack:haxe.CallStack]
										==
										[Const:haxe.CallStack] null
									[Then:String] [Const:String] "null"
									[Else:String] [Call:String]
										[Field:(stack : haxe.CallStack) -> String]
											[TypeExpr haxe._CallStack.CallStack_Impl_:Abstract<haxe.CallStack>]
											[FStatic:(stack : haxe.CallStack) -> String]
												haxe._CallStack.CallStack_Impl_
												toString:(stack : haxe.CallStack) -> String
										[Local tmp(109531):haxe.CallStack:haxe.CallStack]
					[Else:String] [Block:String]
						[Var result(109532):String] [Const:String] ""
						[Var e(109533):Null<haxe.Exception>] [Const:haxe.Exception] this
						[Var prev(109534):Null<haxe.Exception>] [Const:Null<haxe.Exception>] null
						[While:Void]
							[Binop:Bool]
								[Local e(109533):Null<haxe.Exception>:Null<haxe.Exception>]
								!=
								[Const:Null<haxe.Exception>] null
							[Block:Null<haxe.Exception>]
								[If:Void]
									[Binop:Bool]
										[Local prev(109534):Null<haxe.Exception>:Null<haxe.Exception>]
										==
										[Const:Null<haxe.Exception>] null
									[Then:String] [Block:String]
										[Binop:String]
											[Local result(109532):String:String]
											=
											[Binop:String]
												[Binop:String]
													[Binop:String]
														[Const:String] "Exception: "
														+
														[Call:String]
															[Field:Void -> String]
																[Local e(109533):Null<haxe.Exception>:Null<haxe.Exception>]
																[FInstance:Void -> String]
																	haxe.Exception
																	get_message:Void -> String
													+
													[Block:String]
														[Var tmp(109535):haxe.CallStack]
															[Call:haxe.CallStack]
																[Field:Void -> haxe.CallStack]
																	[Local e(109533):Null<haxe.Exception>:Null<haxe.Exception>]
																	[FInstance:Void -> haxe.CallStack]
																		haxe.Exception
																		get_stack:Void -> haxe.CallStack
														[If:String]
															[Binop:Bool]
																[Local tmp(109535):haxe.CallStack:haxe.CallStack]
																==
																[Const:haxe.CallStack] null
															[Then:String] [Const:String] "null"
															[Else:String] [Call:String]
																[Field:(stack : haxe.CallStack) -> String]
																	[TypeExpr haxe._CallStack.CallStack_Impl_:Abstract<haxe.CallStack>]
																	[FStatic:(stack : haxe.CallStack) -> String]
																		haxe._CallStack.CallStack_Impl_
																		toString:(stack : haxe.CallStack) -> String
																[Local tmp(109535):haxe.CallStack:haxe.CallStack]
												+
												[Local result(109532):String:String]
									[Else:String] [Block:String]
										[Var prevStack(109536):haxe.CallStack]
											[Call:haxe.CallStack]
												[Field:(this : Array<haxe.StackItem>, stack : haxe.CallStack) -> haxe.CallStack]
													[TypeExpr haxe._CallStack.CallStack_Impl_:Abstract<haxe.CallStack>]
													[FStatic:(this : Array<haxe.StackItem>, stack : haxe.CallStack) -> haxe.CallStack]
														haxe._CallStack.CallStack_Impl_
														subtract:(this : Array<haxe.StackItem>, stack : haxe.CallStack) -> haxe.CallStack
												[Call:haxe.CallStack]
													[Field:Void -> haxe.CallStack]
														[Local e(109533):Null<haxe.Exception>:Null<haxe.Exception>]
														[FInstance:Void -> haxe.CallStack]
															haxe.Exception
															get_stack:Void -> haxe.CallStack
												[Call:haxe.CallStack]
													[Field:Void -> haxe.CallStack]
														[Local prev(109534):Null<haxe.Exception>:Null<haxe.Exception>]
														[FInstance:Void -> haxe.CallStack]
															haxe.Exception
															get_stack:Void -> haxe.CallStack
										[Binop:String]
											[Local result(109532):String:String]
											=
											[Binop:String]
												[Binop:String]
													[Binop:String]
														[Binop:String]
															[Const:String] "Exception: "
															+
															[Call:String]
																[Field:Void -> String]
																	[Local e(109533):Null<haxe.Exception>:Null<haxe.Exception>]
																	[FInstance:Void -> String]
																		haxe.Exception
																		get_message:Void -> String
														+
														[If:String]
															[Binop:Bool]
																[Local prevStack(109536):haxe.CallStack:haxe.CallStack]
																==
																[Const:haxe.CallStack] null
															[Then:String] [Const:String] "null"
															[Else:String] [Call:String]
																[Field:(stack : haxe.CallStack) -> String]
																	[TypeExpr haxe._CallStack.CallStack_Impl_:Abstract<haxe.CallStack>]
																	[FStatic:(stack : haxe.CallStack) -> String]
																		haxe._CallStack.CallStack_Impl_
																		toString:(stack : haxe.CallStack) -> String
																[Local prevStack(109536):haxe.CallStack:haxe.CallStack]
													+
													[Const:String] "\n\nNext "
												+
												[Local result(109532):String:String]
								[Binop:Null<haxe.Exception>]
									[Local prev(109534):Null<haxe.Exception>:Null<haxe.Exception>]
									=
									[Local e(109533):Null<haxe.Exception>:Null<haxe.Exception>]
								[Binop:Null<haxe.Exception>]
									[Local e(109533):Null<haxe.Exception>:Null<haxe.Exception>]
									=
									[Call:Null<haxe.Exception>]
										[Field:Void -> Null<haxe.Exception>]
											[Local e(109533):Null<haxe.Exception>:Null<haxe.Exception>]
											[FInstance:Void -> Null<haxe.Exception>]
												haxe.Exception
												get_previous:Void -> Null<haxe.Exception>
						[Local result(109532):String:String]

	@:noCompletion @:ifFeature("haxe.Exception.get_stack")
	inline function __shiftStack[Function:Void -> Void]
		[Block:Int]
			[Unop:Int]
				++
				Postfix
				[Field:Int]
					[Const:haxe.Exception] this
					[FInstance:Int]
						haxe.Exception
						__skipStack:Int

	function get_message[Function:Void -> String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Field:String]
					[Const:haxe.Exception] this
					[FInstance:String]
						haxe.Exception
						__exceptionMessage:String

	function get_previous[Function:Void -> Null<haxe.Exception>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Field:Null<haxe.Exception>]
					[Const:haxe.Exception] this
					[FInstance:Null<haxe.Exception>]
						haxe.Exception
						__previousException:Null<haxe.Exception>

	function get_native[Function:Void -> Any]
		[Block:Dynamic]
			[Return:Dynamic]
				[Field:Any]
					[Const:haxe.Exception] this
					[FInstance:Any]
						haxe.Exception
						__nativeException:Any

	function get_stack[Function:Void -> haxe.CallStack]
		[Block:Dynamic]
			[Return:Dynamic]
				[Meta:haxe.CallStack]
					:ast(switch __exceptionStack {
	case null:
		__exceptionStack = if (__skipStack > 0) {
			__nativeStack.asArray().slice(__skipStack);
		} else {
			__nativeStack;
		};	
	case s:
		s;	
})
					[Block:haxe.CallStack]
						[Var `(109323):Null<haxe.CallStack>]
							[Field:Null<haxe.CallStack>]
								[Const:haxe.Exception] this
								[FInstance:Null<haxe.CallStack>]
									haxe.Exception
									__exceptionStack:Null<haxe.CallStack>
						[If:haxe.CallStack]
							[Binop:Bool]
								[Local `(109323):Null<haxe.CallStack>:Null<haxe.CallStack>]
								==
								[Const:Null<haxe.CallStack>] null
							[Then:Null<haxe.CallStack>] [Block:Null<haxe.CallStack>]
								[Binop:Null<haxe.CallStack>]
									[Field:Null<haxe.CallStack>]
										[Const:haxe.Exception] this
										[FInstance:Null<haxe.CallStack>]
											haxe.Exception
											__exceptionStack:Null<haxe.CallStack>
									=
									[If:Null<haxe.CallStack>]
										[Binop:Bool]
											[Field:Int]
												[Const:haxe.Exception] this
												[FInstance:Int]
													haxe.Exception
													__skipStack:Int
											>
											[Const:Int] 0
										[Then:Array<haxe.StackItem>] [Block:Array<haxe.StackItem>]
											[Call:Array<haxe.StackItem>]
												[Field:(pos : Int, ?end : Null<Int>) -> Array<haxe.StackItem>]
													[Cast:Array<haxe.StackItem>]
														[Field:haxe.CallStack]
															[Const:haxe.Exception] this
															[FInstance:haxe.CallStack]
																haxe.Exception
																__nativeStack:haxe.CallStack
													[FInstance:(pos : Int, ?end : Null<Int>) -> Array<haxe.StackItem>]
														Array<haxe.StackItem>
														slice:(pos : Int, ?end : Null<Int>) -> Array<Array.T>
												[Field:Int]
													[Const:haxe.Exception] this
													[FInstance:Int]
														haxe.Exception
														__skipStack:Int
												[Const:Null<Int>] null
										[Else:haxe.CallStack] [Block:haxe.CallStack]
											[Field:haxe.CallStack]
												[Const:haxe.Exception] this
												[FInstance:haxe.CallStack]
													haxe.Exception
													__nativeStack:haxe.CallStack
							[Else:Null<haxe.CallStack>] [Block:Null<haxe.CallStack>]
								[Var s(109324):Null<haxe.CallStack>] [Local `(109323):Null<haxe.CallStack>:Null<haxe.CallStack>]
								[Block:Null<haxe.CallStack>] [Local s(109324):Null<haxe.CallStack>:Null<haxe.CallStack>]

	static function caught[Function:(value : Any) -> haxe.Exception]
		[Arg:Any] [Local value(109511):Any]
		[Block:Void]
			[If:Void]
				[Call:Bool]
					[Field:(v : Dynamic, t : Dynamic) -> Bool]
						[TypeExpr Std:Class<Std>]
						[FStatic:(v : Dynamic, t : Dynamic) -> Bool]
							Std
							is:(v : Dynamic, t : Dynamic) -> Bool
					[Local value(109511):Any:Any]
					[TypeExpr haxe.Exception:Class<haxe.Exception>]
				[Then:Dynamic] [Block:Dynamic]
					[Return:Dynamic]
						[Meta:haxe.Exception]
							:implicitCast
							[Cast:haxe.Exception] [Cast:Dynamic] [Cast:Dynamic] [Local value(109511):Any:Any]
				[Else:Dynamic] [Block:Dynamic]
					[Return:Dynamic]
						[New:haxe.ValueException]
							haxe.ValueException
							[Local value(109511):Any:Any]
							[Const:Null<haxe.Exception>] null
							[Local value(109511):Any:Any]

	static function thrown[Function:(value : Any) -> Any]
		[Arg:Any] [Local value(109518):Any]
		[Block:Void]
			[If:Void]
				[Call:Bool]
					[Field:(v : Dynamic, t : Dynamic) -> Bool]
						[TypeExpr Std:Class<Std>]
						[FStatic:(v : Dynamic, t : Dynamic) -> Bool]
							Std
							isOfType:(v : Dynamic, t : Dynamic) -> Bool
					[Local value(109518):Any:Any]
					[TypeExpr haxe.Exception:Class<haxe.Exception>]
				[Then:Dynamic] [Block:Dynamic]
					[Return:Dynamic]
						[Call:Any]
							[Field:Void -> Any]
								[Parenthesis:haxe.Exception]
									[Meta:haxe.Exception]
										:implicitCast
										[Cast:haxe.Exception] [Cast:Dynamic] [Cast:Dynamic] [Local value(109518):Any:Any]
								[FInstance:Void -> Any]
									haxe.Exception
									get_native:Void -> Any
				[Else:Dynamic] [Block:Dynamic]
					[Var e(109522):haxe.ValueException]
						[New:haxe.ValueException]
							haxe.ValueException
							[Local value(109518):Any:Any]
							[Const:Null<haxe.Exception>] null
							[Const:Null<Any>] null
					[Block:Void]
						[Unop:Int]
							++
							Postfix
							[Field:Int]
								[Local e(109522):haxe.ValueException:haxe.ValueException]
								[FInstance:Int]
									haxe.Exception
									__skipStack:Int
					[Return:Dynamic]
						[Meta:Any]
							:implicitCast
							[Cast:Any] [Local e(109522):haxe.ValueException:haxe.ValueException]
}