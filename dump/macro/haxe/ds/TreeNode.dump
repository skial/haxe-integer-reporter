class haxe.ds.TreeNode<K : haxe.ds.TreeNode.K,V : haxe.ds.TreeNode.V> {

	@:value({ h : -1 })
	public function new[Function:(l : haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>, k : haxe.ds.TreeNode.K, v : haxe.ds.TreeNode.V, r : haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>, ?h : Int) -> Void]
		[Arg:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] [Local l(109569):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
		[Arg:haxe.ds.TreeNode.K] [Local k(109570):haxe.ds.TreeNode.K]
		[Arg:haxe.ds.TreeNode.V] [Local v(109571):haxe.ds.TreeNode.V]
		[Arg:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] [Local r(109572):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
		[Arg:Int]
			[Local h(109573):Int]
			[Const:Int] -1
		[Block:Void]
			[Binop:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
				[Field:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
					[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
					[FInstance:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
						haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
						left:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
				=
				[Local l(109569):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
			[Binop:haxe.ds.TreeNode.K]
				[Field:haxe.ds.TreeNode.K]
					[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
					[FInstance:haxe.ds.TreeNode.K]
						haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
						key:haxe.ds.TreeNode.K
				=
				[Local k(109570):haxe.ds.TreeNode.K:haxe.ds.TreeNode.K]
			[Binop:haxe.ds.TreeNode.V]
				[Field:haxe.ds.TreeNode.V]
					[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
					[FInstance:haxe.ds.TreeNode.V]
						haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
						value:haxe.ds.TreeNode.V
				=
				[Local v(109571):haxe.ds.TreeNode.V:haxe.ds.TreeNode.V]
			[Binop:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
				[Field:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
					[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
					[FInstance:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
						haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
						right:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
				=
				[Local r(109572):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
			[If:Void]
				[Binop:Bool]
					[Local h(109573):Int:Int]
					==
					[Const:Int] -1
				[Then:Int] [Block:Int]
					[Binop:Int]
						[Field:Int]
							[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
							[FInstance:Int]
								haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
								_height:Int
						=
						[Binop:Int]
							[Parenthesis:Int]
								[If:Int]
									[Binop:Bool]
										[Block:Int]
											[Var _this(109575):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
												[Field:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
													[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
													[FInstance:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
														haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
														left:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
											[If:Int]
												[Binop:Bool]
													[Local _this(109575):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
													==
													[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] null
												[Then:Int] [Block:Int] [Const:Int] 0
												[Else:Int] [Block:Int]
													[Field:Int]
														[Local _this(109575):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
														[FInstance:Int]
															haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
															_height:Int
										>
										[Block:Int]
											[Var _this(109577):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
												[Field:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
													[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
													[FInstance:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
														haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
														right:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
											[If:Int]
												[Binop:Bool]
													[Local _this(109577):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
													==
													[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] null
												[Then:Int] [Block:Int] [Const:Int] 0
												[Else:Int] [Block:Int]
													[Field:Int]
														[Local _this(109577):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
														[FInstance:Int]
															haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
															_height:Int
									[Then:Int] [Block:Int]
										[Block:Int]
											[Var _this(109579):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
												[Field:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
													[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
													[FInstance:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
														haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
														left:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
											[If:Int]
												[Binop:Bool]
													[Local _this(109579):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
													==
													[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] null
												[Then:Int] [Block:Int] [Const:Int] 0
												[Else:Int] [Block:Int]
													[Field:Int]
														[Local _this(109579):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
														[FInstance:Int]
															haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
															_height:Int
									[Else:Int] [Block:Int]
										[Block:Int]
											[Var _this(109581):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
												[Field:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
													[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
													[FInstance:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
														haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
														right:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
											[If:Int]
												[Binop:Bool]
													[Local _this(109581):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
													==
													[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] null
												[Then:Int] [Block:Int] [Const:Int] 0
												[Else:Int] [Block:Int]
													[Field:Int]
														[Local _this(109581):haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
														[FInstance:Int]
															haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
															_height:Int
							+
							[Const:Int] 1
				[Else:Int] [Block:Int]
					[Binop:Int]
						[Field:Int]
							[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
							[FInstance:Int]
								haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
								_height:Int
						=
						[Local h(109573):Int:Int]

	public var left:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>;

	public var right:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>;

	public var key:haxe.ds.TreeNode.K;

	public var value:haxe.ds.TreeNode.V;

	var _height:Int;

	public inline function get_height[Function:Void -> Int]
		[Return:Dynamic]
			[If:Int]
				[Binop:Bool]
					[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
					==
					[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] null
				[Then:Int] [Block:Int] [Const:Int] 0
				[Else:Int] [Block:Int]
					[Field:Int]
						[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
						[FInstance:Int]
							haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
							_height:Int

	public function toString[Function:Void -> String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Binop:String]
					[Binop:String]
						[Parenthesis:String]
							[If:String]
								[Binop:Bool]
									[Field:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
										[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
										[FInstance:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
											haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
											left:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
									==
									[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] null
								[Then:String] [Block:String] [Const:String] ""
								[Else:String] [Block:String]
									[Binop:String]
										[Call:String]
											[Field:Void -> String]
												[Field:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
													[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
													[FInstance:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
														haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
														left:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
												[FInstance:Void -> String]
													haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
													toString:Void -> String
										+
										[Const:String] ", "
						+
						[Binop:String]
							[Binop:String]
								[Binop:String]
									[Const:String] ""
									+
									[Call:String]
										[Field:(s : Dynamic) -> String]
											[TypeExpr Std:Class<Std>]
											[FStatic:(s : Dynamic) -> String]
												Std
												string:(s : Dynamic) -> String
										[Field:haxe.ds.TreeNode.K]
											[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
											[FInstance:haxe.ds.TreeNode.K]
												haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
												key:haxe.ds.TreeNode.K
								+
								[Const:String] "="
							+
							[Call:String]
								[Field:(s : Dynamic) -> String]
									[TypeExpr Std:Class<Std>]
									[FStatic:(s : Dynamic) -> String]
										Std
										string:(s : Dynamic) -> String
								[Field:haxe.ds.TreeNode.V]
									[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
									[FInstance:haxe.ds.TreeNode.V]
										haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
										value:haxe.ds.TreeNode.V
					+
					[Parenthesis:String]
						[If:String]
							[Binop:Bool]
								[Field:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
									[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
									[FInstance:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
										haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
										right:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
								==
								[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] null
							[Then:String] [Block:String] [Const:String] ""
							[Else:String] [Block:String]
								[Binop:String]
									[Const:String] ", "
									+
									[Call:String]
										[Field:Void -> String]
											[Field:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
												[Const:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>] this
												[FInstance:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>]
													haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
													right:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
											[FInstance:Void -> String]
												haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>
												toString:Void -> String
}