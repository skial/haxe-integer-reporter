class haxe.macro.ExprArrayTools {

	public static function map[Function:(el : Array<haxe.macro.Expr>, f : (haxe.macro.Expr -> haxe.macro.Expr)) -> Array<haxe.macro.Expr>]
		[Arg:Array<haxe.macro.Expr>] [Local el(113773):Array<haxe.macro.Expr>]
		[Arg:haxe.macro.Expr -> haxe.macro.Expr] [Local f(113774):haxe.macro.Expr -> haxe.macro.Expr]
		[Block:Dynamic]
			[Var ret(113775):Array<haxe.macro.Expr>] [ArrayDecl:Array<haxe.macro.Expr>]
			[Block:Void]
				[Var `(113777):Int] [Const:Int] 0
				[While:Void]
					[Binop:Bool]
						[Local `(113777):Int:Int]
						<
						[Field:Int]
							[Local el(113773):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
							[FInstance:Int]
								Array<haxe.macro.Expr>
								length:Int
					[Block:Void]
						[Var e(113776):haxe.macro.Expr]
							[Array:haxe.macro.Expr]
								[Local el(113773):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
								[Local `(113777):Int:Int]
						[Unop:Int]
							++
							Prefix
							[Local `(113777):Int:Int]
						[Call:Int]
							[Field:(x : haxe.macro.Expr) -> Int]
								[Local ret(113775):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
								[FInstance:(x : haxe.macro.Expr) -> Int]
									Array<haxe.macro.Expr>
									push:(x : Array.T) -> Int
							[Call:haxe.macro.Expr]
								[Local f(113774):haxe.macro.Expr -> haxe.macro.Expr:haxe.macro.Expr -> haxe.macro.Expr]
								[Local e(113776):haxe.macro.Expr:haxe.macro.Expr]
			[Return:Dynamic] [Local ret(113775):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]

	public static function iter[Function:(el : Array<haxe.macro.Expr>, f : (haxe.macro.Expr -> Void)) -> Void]
		[Arg:Array<haxe.macro.Expr>] [Local el(113564):Array<haxe.macro.Expr>]
		[Arg:haxe.macro.Expr -> Void] [Local f(113565):haxe.macro.Expr -> Void]
		[Block:Void]
			[Block:Void]
				[Var `(113567):Int] [Const:Int] 0
				[While:Void]
					[Binop:Bool]
						[Local `(113567):Int:Int]
						<
						[Field:Int]
							[Local el(113564):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
							[FInstance:Int]
								Array<haxe.macro.Expr>
								length:Int
					[Block:Void]
						[Var e(113566):haxe.macro.Expr]
							[Array:haxe.macro.Expr]
								[Local el(113564):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
								[Local `(113567):Int:Int]
						[Unop:Int]
							++
							Prefix
							[Local `(113567):Int:Int]
						[Call:Void]
							[Local f(113565):haxe.macro.Expr -> Void:haxe.macro.Expr -> Void]
							[Local e(113566):haxe.macro.Expr:haxe.macro.Expr]
}