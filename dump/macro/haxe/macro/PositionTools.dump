class haxe.macro.PositionTools {

	@:has_untyped
	public static macro function here[Function:Void -> haxe.macro.Expr]
		[Block:Void]
			[Var positionExpr(114947):haxe.macro.Expr]
				[Call:haxe.macro.Expr]
					[Field:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr]
							haxe.macro.Context
							makeExpr:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr
					[Call:{ min : Int, max : Int, file : String }]
						[Field:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }]
								haxe.macro.Context
								getPosInfos:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }
						[Call:haxe.macro.Position]
							[Field:Void -> haxe.macro.Position]
								[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
								[FStatic:Void -> haxe.macro.Position]
									haxe.macro.Context
									currentPos:Void -> haxe.macro.Position
					[Call:haxe.macro.Position]
						[Field:Void -> haxe.macro.Position]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:Void -> haxe.macro.Position]
								haxe.macro.Context
								currentPos:Void -> haxe.macro.Position
			[If:Void]
				[Call:Bool]
					[Field:(s : String) -> Bool]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(s : String) -> Bool]
							haxe.macro.Context
							defined:(s : String) -> Bool
					[Const:String] "macro"
				[Then:Dynamic] [Block:Dynamic]
					[Return:Dynamic]
						[Cast:haxe.macro.Expr]
							[ObjectDecl:{ pos : haxe.macro.Position, expr : haxe.macro.ExprDef }]
								expr: [Call:haxe.macro.ExprDef]
									[Field:(e : haxe.macro.Expr, params : Array<haxe.macro.Expr>) -> haxe.macro.ExprDef]
										[TypeExpr haxe.macro.ExprDef:Enum<haxe.macro.ExprDef>]
										[FEnum:(e : haxe.macro.Expr, params : Array<haxe.macro.Expr>) -> haxe.macro.ExprDef]
											haxe.macro.ExprDef
											ECall
									[ObjectDecl:{ pos : haxe.macro.Position, expr : haxe.macro.ExprDef }]
										expr: [Call:haxe.macro.ExprDef]
											[Field:(e : haxe.macro.Expr, field : String) -> haxe.macro.ExprDef]
												[TypeExpr haxe.macro.ExprDef:Enum<haxe.macro.ExprDef>]
												[FEnum:(e : haxe.macro.Expr, field : String) -> haxe.macro.ExprDef]
													haxe.macro.ExprDef
													EField
											[ObjectDecl:{ pos : haxe.macro.Position, expr : haxe.macro.ExprDef }]
												expr: [Call:haxe.macro.ExprDef]
													[Field:(e : haxe.macro.Expr, field : String) -> haxe.macro.ExprDef]
														[TypeExpr haxe.macro.ExprDef:Enum<haxe.macro.ExprDef>]
														[FEnum:(e : haxe.macro.Expr, field : String) -> haxe.macro.ExprDef]
															haxe.macro.ExprDef
															EField
													[ObjectDecl:{ pos : haxe.macro.Position, expr : haxe.macro.ExprDef }]
														expr: [Call:haxe.macro.ExprDef]
															[Field:(e : haxe.macro.Expr, field : String) -> haxe.macro.ExprDef]
																[TypeExpr haxe.macro.ExprDef:Enum<haxe.macro.ExprDef>]
																[FEnum:(e : haxe.macro.Expr, field : String) -> haxe.macro.ExprDef]
																	haxe.macro.ExprDef
																	EField
															[ObjectDecl:{ pos : haxe.macro.Position, expr : haxe.macro.ExprDef }]
																expr: [Call:haxe.macro.ExprDef]
																	[Field:(c : haxe.macro.Constant) -> haxe.macro.ExprDef]
																		[TypeExpr haxe.macro.ExprDef:Enum<haxe.macro.ExprDef>]
																		[FEnum:(c : haxe.macro.Constant) -> haxe.macro.ExprDef]
																			haxe.macro.ExprDef
																			EConst
																	[Call:haxe.macro.Constant]
																		[Field:(s : String) -> haxe.macro.Constant]
																			[TypeExpr haxe.macro.Constant:Enum<haxe.macro.Constant>]
																			[FEnum:(s : String) -> haxe.macro.Constant]
																				haxe.macro.Constant
																				CIdent
																		[Const:String] "haxe"
																pos: [Call:haxe.macro.Position]
																	[Ident:(String, Int, Int) -> Unknown<71>] $__mk_pos__
																	[Const:String] "C:\\Users\\LAT6440\\AppData\\Roaming/haxe/versions/4.1.3/std/haxe/macro/PositionTools.hx"
																	[Const:Int] 1542
																	[Const:Int] 1546
															[Const:String] "macro"
														pos: [Call:haxe.macro.Position]
															[Ident:(String, Int, Int) -> Unknown<72>] $__mk_pos__
															[Const:String] "C:\\Users\\LAT6440\\AppData\\Roaming/haxe/versions/4.1.3/std/haxe/macro/PositionTools.hx"
															[Const:Int] 1542
															[Const:Int] 1552
													[Const:String] "Context"
												pos: [Call:haxe.macro.Position]
													[Ident:(String, Int, Int) -> Unknown<73>] $__mk_pos__
													[Const:String] "C:\\Users\\LAT6440\\AppData\\Roaming/haxe/versions/4.1.3/std/haxe/macro/PositionTools.hx"
													[Const:Int] 1542
													[Const:Int] 1560
											[Const:String] "makePosition"
										pos: [Call:haxe.macro.Position]
											[Ident:(String, Int, Int) -> Unknown<74>] $__mk_pos__
											[Const:String] "C:\\Users\\LAT6440\\AppData\\Roaming/haxe/versions/4.1.3/std/haxe/macro/PositionTools.hx"
											[Const:Int] 1542
											[Const:Int] 1573
									[ArrayDecl:Array<haxe.macro.Expr>] [Local positionExpr(114947):haxe.macro.Expr:haxe.macro.Expr]
								pos: [Call:haxe.macro.Position]
									[Ident:(String, Int, Int) -> Unknown<75>] $__mk_pos__
									[Const:String] "C:\\Users\\LAT6440\\AppData\\Roaming/haxe/versions/4.1.3/std/haxe/macro/PositionTools.hx"
									[Const:Int] 1542
									[Const:Int] 1588
				[Else:Dynamic] [Block:Dynamic] [Return:Dynamic] [Local positionExpr(114947):haxe.macro.Expr:haxe.macro.Expr]

	public static function getInfos[Function:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }]
		[Arg:haxe.macro.Position] [Local p(114948):haxe.macro.Position]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:{ min : Int, max : Int, file : String }]
					[Field:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }]
							haxe.macro.Context
							getPosInfos:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }
					[Local p(114948):haxe.macro.Position:haxe.macro.Position]

	public static function make[Function:(inf : { min : Int, max : Int, file : String }) -> haxe.macro.Position]
		[Arg:{ min : Int, max : Int, file : String }] [Local inf(114949):{ min : Int, max : Int, file : String }]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:haxe.macro.Position]
					[Field:(inf : { min : Int, max : Int, file : String }) -> haxe.macro.Position]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(inf : { min : Int, max : Int, file : String }) -> haxe.macro.Position]
							haxe.macro.Context
							makePosition:(inf : { min : Int, max : Int, file : String }) -> haxe.macro.Position
					[Local inf(114949):{ min : Int, max : Int, file : String }:{ min : Int, max : Int, file : String }]

	public static function toLocation[Function:(p : haxe.macro.Position) -> haxe.display.Location]
		[Arg:haxe.macro.Position] [Local p(114950):haxe.macro.Position]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "position_to_range"
						[Const:Int] 1
					[Local p(114950):haxe.macro.Position:haxe.macro.Position]
}