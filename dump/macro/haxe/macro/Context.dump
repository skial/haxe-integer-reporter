class haxe.macro.Context {

	public static function error[Function:(msg : String, pos : haxe.macro.Position) -> Dynamic]
		[Arg:String] [Local msg(111928):String]
		[Arg:haxe.macro.Position] [Local pos(111929):haxe.macro.Position]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "error"
						[Const:Int] 2
					[Local msg(111928):String:String]
					[Local pos(111929):haxe.macro.Position:haxe.macro.Position]

	public static function fatalError[Function:(msg : String, pos : haxe.macro.Position) -> Dynamic]
		[Arg:String] [Local msg(111930):String]
		[Arg:haxe.macro.Position] [Local pos(111931):haxe.macro.Position]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "fatal_error"
						[Const:Int] 2
					[Local msg(111930):String:String]
					[Local pos(111931):haxe.macro.Position:haxe.macro.Position]

	public static function warning[Function:(msg : String, pos : haxe.macro.Position) -> Void]
		[Arg:String] [Local msg(111932):String]
		[Arg:haxe.macro.Position] [Local pos(111933):haxe.macro.Position]
		[Block:Dynamic]
			[Call:Dynamic]
				[Call:Dynamic]
					[Field:(f : String, nargs : Int) -> Dynamic]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(f : String, nargs : Int) -> Dynamic]
							haxe.macro.Context
							load:(f : String, nargs : Int) -> Dynamic
					[Const:String] "warning"
					[Const:Int] 2
				[Local msg(111932):String:String]
				[Local pos(111933):haxe.macro.Position:haxe.macro.Position]

	public static function info[Function:(msg : String, pos : haxe.macro.Position) -> Void]
		[Arg:String] [Local msg(111934):String]
		[Arg:haxe.macro.Position] [Local pos(111935):haxe.macro.Position]
		[Block:Dynamic]
			[Call:Dynamic]
				[Call:Dynamic]
					[Field:(f : String, nargs : Int) -> Dynamic]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(f : String, nargs : Int) -> Dynamic]
							haxe.macro.Context
							load:(f : String, nargs : Int) -> Dynamic
					[Const:String] "info"
					[Const:Int] 2
				[Local msg(111934):String:String]
				[Local pos(111935):haxe.macro.Position:haxe.macro.Position]

	public static function getMessages[Function:Void -> Array<haxe.macro.Message>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_messages"
						[Const:Int] 0

	public static function filterMessages[Function:(predicate : (haxe.macro.Message -> Bool)) -> Void]
		[Arg:haxe.macro.Message -> Bool] [Local predicate(111936):haxe.macro.Message -> Bool]
		[Block:Dynamic]
			[Call:Dynamic]
				[Call:Dynamic]
					[Field:(f : String, nargs : Int) -> Dynamic]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(f : String, nargs : Int) -> Dynamic]
							haxe.macro.Context
							load:(f : String, nargs : Int) -> Dynamic
					[Const:String] "filter_messages"
					[Const:Int] 1
				[Local predicate(111936):haxe.macro.Message -> Bool:haxe.macro.Message -> Bool]

	public static function resolvePath[Function:(file : String) -> String]
		[Arg:String] [Local file(111937):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "resolve_path"
						[Const:Int] 1
					[Local file(111937):String:String]

	public static function getClassPath[Function:Void -> Array<String>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "class_path"
						[Const:Int] 0

	public static function containsDisplayPosition[Function:(pos : haxe.macro.Position) -> Bool]
		[Arg:haxe.macro.Position] [Local pos(111938):haxe.macro.Position]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "contains_display_position"
						[Const:Int] 1
					[Local pos(111938):haxe.macro.Position:haxe.macro.Position]

	public static function currentPos[Function:Void -> haxe.macro.Position]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "current_pos"
						[Const:Int] 0

	public static function getExpectedType[Function:Void -> Null<haxe.macro.Type>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_expected_type"
						[Const:Int] 0

	public static function getCallArguments[Function:Void -> Null<Array<haxe.macro.Expr>>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_call_arguments"
						[Const:Int] 0

	public static function getLocalClass[Function:Void -> Null<haxe.macro.Ref<haxe.macro.ClassType>>]
		[Block:Dynamic]
			[Var l(111939):haxe.macro.Type]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_local_type"
						[Const:Int] 0
			[If:Void]
				[Binop:Bool]
					[Local l(111939):haxe.macro.Type:haxe.macro.Type]
					==
					[Const:haxe.macro.Type] null
				[Then:Dynamic] [Block:Dynamic] [Return:Dynamic] [Const:Null<haxe.macro.Ref<haxe.macro.ClassType>>] null
			[Return:Dynamic]
				[Meta:Null<haxe.macro.Ref<haxe.macro.ClassType>>]
					:ast(switch (l) {
	case TInst(c, _):
		c;	
	default:
		null;	
})
					[If:Null<haxe.macro.Ref<haxe.macro.ClassType>>]
						[Binop:Bool]
							[EnumIndex:Int] [Local l(111939):haxe.macro.Type:haxe.macro.Type]
							==
							[Const:Int] 2
						[Then:haxe.macro.Ref<haxe.macro.ClassType>] [Block:haxe.macro.Ref<haxe.macro.ClassType>]
							[Var `1(111943):Array<haxe.macro.Type>]
								[EnumParameter:Array<haxe.macro.Type>]
									[Local l(111939):haxe.macro.Type:haxe.macro.Type]
									TInst
									1
							[Var `(111944):haxe.macro.Ref<haxe.macro.ClassType>]
								[EnumParameter:haxe.macro.Ref<haxe.macro.ClassType>]
									[Local l(111939):haxe.macro.Type:haxe.macro.Type]
									TInst
									0
							[Block:haxe.macro.Ref<haxe.macro.ClassType>]
								[Var c(111945):haxe.macro.Ref<haxe.macro.ClassType>] [Local `(111944):haxe.macro.Ref<haxe.macro.ClassType>:haxe.macro.Ref<haxe.macro.ClassType>]
								[Block:haxe.macro.Ref<haxe.macro.ClassType>] [Local c(111945):haxe.macro.Ref<haxe.macro.ClassType>:haxe.macro.Ref<haxe.macro.ClassType>]
						[Else:Null<haxe.macro.Ref<haxe.macro.ClassType>>] [Block:Null<haxe.macro.Ref<haxe.macro.ClassType>>] [Const:Null<haxe.macro.Ref<haxe.macro.ClassType>>] null

	public static function getLocalModule[Function:Void -> String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_local_module"
						[Const:Int] 0

	public static function getLocalType[Function:Void -> Null<haxe.macro.Type>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_local_type"
						[Const:Int] 0

	public static function getLocalMethod[Function:Void -> Null<String>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_local_method"
						[Const:Int] 0

	public static function getLocalUsing[Function:Void -> Array<haxe.macro.Ref<haxe.macro.ClassType>>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_local_using"
						[Const:Int] 0

	public static function getLocalImports[Function:Void -> Array<haxe.macro.ImportExpr>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_local_imports"
						[Const:Int] 0

	@:deprecated("Use Context.getLocalTVars() instead")
	public static function getLocalVars[Function:Void -> Map<String, haxe.macro.Type>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "local_vars"
						[Const:Int] 1
					[Const:Bool] false

	public static function getLocalTVars[Function:Void -> Map<String, haxe.macro.TVar>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "local_vars"
						[Const:Int] 1
					[Const:Bool] true

	public static function defined[Function:(s : String) -> Bool]
		[Arg:String] [Local s(109973):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "defined"
						[Const:Int] 1
					[Local s(109973):String:String]

	public static function definedValue[Function:(key : String) -> String]
		[Arg:String] [Local key(109976):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "defined_value"
						[Const:Int] 1
					[Local key(109976):String:String]

	public static function getDefines[Function:Void -> Map<String, String>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_defines"
						[Const:Int] 0

	public static function getType[Function:(name : String) -> haxe.macro.Type]
		[Arg:String] [Local name(111946):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_type"
						[Const:Int] 1
					[Local name(111946):String:String]

	public static function getModule[Function:(name : String) -> Array<haxe.macro.Type>]
		[Arg:String] [Local name(111947):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_module"
						[Const:Int] 1
					[Local name(111947):String:String]

	public static function parse[Function:(expr : String, pos : haxe.macro.Position) -> haxe.macro.Expr]
		[Arg:String] [Local expr(111948):String]
		[Arg:haxe.macro.Position] [Local pos(111949):haxe.macro.Position]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "do_parse"
						[Const:Int] 3
					[Local expr(111948):String:String]
					[Local pos(111949):haxe.macro.Position:haxe.macro.Position]
					[Const:Bool] false

	public static function parseInlineString[Function:(expr : String, pos : haxe.macro.Position) -> haxe.macro.Expr]
		[Arg:String] [Local expr(111950):String]
		[Arg:haxe.macro.Position] [Local pos(111951):haxe.macro.Position]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "do_parse"
						[Const:Int] 3
					[Local expr(111950):String:String]
					[Local pos(111951):haxe.macro.Position:haxe.macro.Position]
					[Const:Bool] true

	public static function makeExpr[Function:(v : Dynamic, pos : haxe.macro.Position) -> haxe.macro.Expr]
		[Arg:Dynamic] [Local v(111952):Dynamic]
		[Arg:haxe.macro.Position] [Local pos(111953):haxe.macro.Position]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "make_expr"
						[Const:Int] 2
					[Local v(111952):Dynamic:Dynamic]
					[Local pos(111953):haxe.macro.Position:haxe.macro.Position]

	public static function signature[Function:(v : Dynamic) -> String]
		[Arg:Dynamic] [Local v(111954):Dynamic]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "signature"
						[Const:Int] 1
					[Local v(111954):Dynamic:Dynamic]

	@:value({ persistent : true })
	public static function onGenerate[Function:(callback : (Array<haxe.macro.Type> -> Void), ?persistent : Bool) -> Void]
		[Arg:Array<haxe.macro.Type> -> Void] [Local callback(111955):Array<haxe.macro.Type> -> Void]
		[Arg:Bool]
			[Local persistent(111956):Bool]
			[Const:Bool] true
		[Block:Dynamic]
			[Call:Dynamic]
				[Call:Dynamic]
					[Field:(f : String, nargs : Int) -> Dynamic]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(f : String, nargs : Int) -> Dynamic]
							haxe.macro.Context
							load:(f : String, nargs : Int) -> Dynamic
					[Const:String] "on_generate"
					[Const:Int] 2
				[Local callback(111955):Array<haxe.macro.Type> -> Void:Array<haxe.macro.Type> -> Void]
				[Local persistent(111956):Bool:Bool]

	public static function onAfterGenerate[Function:(callback : (Void -> Void)) -> Void]
		[Arg:Void -> Void] [Local callback(111957):Void -> Void]
		[Block:Dynamic]
			[Call:Dynamic]
				[Call:Dynamic]
					[Field:(f : String, nargs : Int) -> Dynamic]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(f : String, nargs : Int) -> Dynamic]
							haxe.macro.Context
							load:(f : String, nargs : Int) -> Dynamic
					[Const:String] "on_after_generate"
					[Const:Int] 1
				[Local callback(111957):Void -> Void:Void -> Void]

	public static function onAfterTyping[Function:(callback : (Array<haxe.macro.ModuleType> -> Void)) -> Void]
		[Arg:Array<haxe.macro.ModuleType> -> Void] [Local callback(111958):Array<haxe.macro.ModuleType> -> Void]
		[Block:Dynamic]
			[Call:Dynamic]
				[Call:Dynamic]
					[Field:(f : String, nargs : Int) -> Dynamic]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(f : String, nargs : Int) -> Dynamic]
							haxe.macro.Context
							load:(f : String, nargs : Int) -> Dynamic
					[Const:String] "on_after_typing"
					[Const:Int] 1
				[Local callback(111958):Array<haxe.macro.ModuleType> -> Void:Array<haxe.macro.ModuleType> -> Void]

	public static function onTypeNotFound[Function:(callback : (String -> haxe.macro.TypeDefinition)) -> Void]
		[Arg:String -> haxe.macro.TypeDefinition] [Local callback(111959):String -> haxe.macro.TypeDefinition]
		[Block:Dynamic]
			[Call:Dynamic]
				[Call:Dynamic]
					[Field:(f : String, nargs : Int) -> Dynamic]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(f : String, nargs : Int) -> Dynamic]
							haxe.macro.Context
							load:(f : String, nargs : Int) -> Dynamic
					[Const:String] "on_type_not_found"
					[Const:Int] 1
				[Local callback(111959):String -> haxe.macro.TypeDefinition:String -> haxe.macro.TypeDefinition]

	public static function typeof[Function:(e : haxe.macro.Expr) -> haxe.macro.Type]
		[Arg:haxe.macro.Expr] [Local e(111960):haxe.macro.Expr]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "typeof"
						[Const:Int] 1
					[Local e(111960):haxe.macro.Expr:haxe.macro.Expr]

	public static function typeExpr[Function:(e : haxe.macro.Expr) -> haxe.macro.TypedExpr]
		[Arg:haxe.macro.Expr] [Local e(111961):haxe.macro.Expr]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "type_expr"
						[Const:Int] 1
					[Local e(111961):haxe.macro.Expr:haxe.macro.Expr]

	public static function resolveType[Function:(t : haxe.macro.ComplexType, p : haxe.macro.Position) -> haxe.macro.Type]
		[Arg:haxe.macro.ComplexType] [Local t(111962):haxe.macro.ComplexType]
		[Arg:haxe.macro.Position] [Local p(111963):haxe.macro.Position]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "resolve_type"
						[Const:Int] 2
					[Local t(111962):haxe.macro.ComplexType:haxe.macro.ComplexType]
					[Local p(111963):haxe.macro.Position:haxe.macro.Position]

	public static function toComplexType[Function:(t : haxe.macro.Type) -> Null<haxe.macro.ComplexType>]
		[Arg:haxe.macro.Type] [Local t(111964):haxe.macro.Type]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "to_complex_type"
						[Const:Int] 1
					[Local t(111964):haxe.macro.Type:haxe.macro.Type]

	public static function unify[Function:(t1 : haxe.macro.Type, t2 : haxe.macro.Type) -> Bool]
		[Arg:haxe.macro.Type] [Local t1(111965):haxe.macro.Type]
		[Arg:haxe.macro.Type] [Local t2(111966):haxe.macro.Type]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "unify"
						[Const:Int] 2
					[Local t1(111965):haxe.macro.Type:haxe.macro.Type]
					[Local t2(111966):haxe.macro.Type:haxe.macro.Type]

	public static function follow[Function:(t : haxe.macro.Type, ?once : Null<Bool>) -> haxe.macro.Type]
		[Arg:haxe.macro.Type] [Local t(111967):haxe.macro.Type]
		[Arg:Null<Bool>]
			[Local once(111968):Null<Bool>]
			[Const:Null<Bool>] null
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "follow"
						[Const:Int] 2
					[Local t(111967):haxe.macro.Type:haxe.macro.Type]
					[Local once(111968):Null<Bool>:Null<Bool>]

	@:value({ once : false })
	public static function followWithAbstracts[Function:(t : haxe.macro.Type, ?once : Bool) -> haxe.macro.Type]
		[Arg:haxe.macro.Type] [Local t(111969):haxe.macro.Type]
		[Arg:Bool]
			[Local once(111970):Bool]
			[Const:Bool] false
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "follow_with_abstracts"
						[Const:Int] 2
					[Local t(111969):haxe.macro.Type:haxe.macro.Type]
					[Local once(111970):Bool:Bool]

	public static function getPosInfos[Function:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }]
		[Arg:haxe.macro.Position] [Local p(111971):haxe.macro.Position]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_pos_infos"
						[Const:Int] 1
					[Local p(111971):haxe.macro.Position:haxe.macro.Position]

	public static function makePosition[Function:(inf : { min : Int, max : Int, file : String }) -> haxe.macro.Position]
		[Arg:{ min : Int, max : Int, file : String }] [Local inf(111972):{ min : Int, max : Int, file : String }]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "make_position"
						[Const:Int] 3
					[Field:Int]
						[Local inf(111972):{ min : Int, max : Int, file : String }:{ min : Int, max : Int, file : String }]
						[FAnon:Int] min:Int
					[Field:Int]
						[Local inf(111972):{ min : Int, max : Int, file : String }:{ min : Int, max : Int, file : String }]
						[FAnon:Int] max:Int
					[Field:String]
						[Local inf(111972):{ min : Int, max : Int, file : String }:{ min : Int, max : Int, file : String }]
						[FAnon:String] file:String

	public static function getResources[Function:Void -> Map<String, haxe.io.Bytes>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_resources"
						[Const:Int] 0

	public static function addResource[Function:(name : String, data : haxe.io.Bytes) -> Void]
		[Arg:String] [Local name(111973):String]
		[Arg:haxe.io.Bytes] [Local data(111974):haxe.io.Bytes]
		[Block:Dynamic]
			[Call:Dynamic]
				[Call:Dynamic]
					[Field:(f : String, nargs : Int) -> Dynamic]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(f : String, nargs : Int) -> Dynamic]
							haxe.macro.Context
							load:(f : String, nargs : Int) -> Dynamic
					[Const:String] "add_resource"
					[Const:Int] 2
				[Local name(111973):String:String]
				[Local data(111974):haxe.io.Bytes:haxe.io.Bytes]

	public static function getBuildFields[Function:Void -> Array<haxe.macro.Field>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_build_fields"
						[Const:Int] 0

	public static function defineType[Function:(t : haxe.macro.TypeDefinition, ?moduleDependency : Null<String>) -> Void]
		[Arg:haxe.macro.TypeDefinition] [Local t(111975):haxe.macro.TypeDefinition]
		[Arg:Null<String>]
			[Local moduleDependency(111976):Null<String>]
			[Const:Null<String>] null
		[Block:Dynamic]
			[Call:Dynamic]
				[Call:Dynamic]
					[Field:(f : String, nargs : Int) -> Dynamic]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(f : String, nargs : Int) -> Dynamic]
							haxe.macro.Context
							load:(f : String, nargs : Int) -> Dynamic
					[Const:String] "define_type"
					[Const:Int] 2
				[Local t(111975):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
				[Local moduleDependency(111976):Null<String>:Null<String>]

	public static function defineModule[Function:(modulePath : String, types : Array<haxe.macro.TypeDefinition>, ?imports : Null<Array<haxe.macro.ImportExpr>>, ?usings : Null<Array<haxe.macro.TypePath>>) -> Void]
		[Arg:String] [Local modulePath(111977):String]
		[Arg:Array<haxe.macro.TypeDefinition>] [Local types(111978):Array<haxe.macro.TypeDefinition>]
		[Arg:Null<Array<haxe.macro.ImportExpr>>]
			[Local imports(111979):Null<Array<haxe.macro.ImportExpr>>]
			[Const:Null<Array<haxe.macro.ImportExpr>>] null
		[Arg:Null<Array<haxe.macro.TypePath>>]
			[Local usings(111980):Null<Array<haxe.macro.TypePath>>]
			[Const:Null<Array<haxe.macro.TypePath>>] null
		[Block:Dynamic]
			[If:Void]
				[Binop:Bool]
					[Local imports(111979):Null<Array<haxe.macro.ImportExpr>>:Null<Array<haxe.macro.ImportExpr>>]
					==
					[Const:Null<Array<haxe.macro.ImportExpr>>] null
				[Then:Null<Array<haxe.macro.ImportExpr>>] [Block:Null<Array<haxe.macro.ImportExpr>>]
					[Binop:Null<Array<haxe.macro.ImportExpr>>]
						[Local imports(111979):Null<Array<haxe.macro.ImportExpr>>:Null<Array<haxe.macro.ImportExpr>>]
						=
						[ArrayDecl:Array<haxe.macro.ImportExpr>]
			[If:Void]
				[Binop:Bool]
					[Local usings(111980):Null<Array<haxe.macro.TypePath>>:Null<Array<haxe.macro.TypePath>>]
					==
					[Const:Null<Array<haxe.macro.TypePath>>] null
				[Then:Null<Array<haxe.macro.TypePath>>] [Block:Null<Array<haxe.macro.TypePath>>]
					[Binop:Null<Array<haxe.macro.TypePath>>]
						[Local usings(111980):Null<Array<haxe.macro.TypePath>>:Null<Array<haxe.macro.TypePath>>]
						=
						[ArrayDecl:Array<haxe.macro.TypePath>]
			[Call:Dynamic]
				[Call:Dynamic]
					[Field:(f : String, nargs : Int) -> Dynamic]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(f : String, nargs : Int) -> Dynamic]
							haxe.macro.Context
							load:(f : String, nargs : Int) -> Dynamic
					[Const:String] "define_module"
					[Const:Int] 4
				[Local modulePath(111977):String:String]
				[Local types(111978):Array<haxe.macro.TypeDefinition>:Array<haxe.macro.TypeDefinition>]
				[Local imports(111979):Null<Array<haxe.macro.ImportExpr>>:Null<Array<haxe.macro.ImportExpr>>]
				[Local usings(111980):Null<Array<haxe.macro.TypePath>>:Null<Array<haxe.macro.TypePath>>]

	public static function getTypedExpr[Function:(t : haxe.macro.TypedExpr) -> haxe.macro.Expr]
		[Arg:haxe.macro.TypedExpr] [Local t(111981):haxe.macro.TypedExpr]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "get_typed_expr"
						[Const:Int] 1
					[Local t(111981):haxe.macro.TypedExpr:haxe.macro.TypedExpr]

	public static function storeTypedExpr[Function:(t : haxe.macro.TypedExpr) -> haxe.macro.Expr]
		[Arg:haxe.macro.TypedExpr] [Local t(111982):haxe.macro.TypedExpr]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "store_typed_expr"
						[Const:Int] 1
					[Local t(111982):haxe.macro.TypedExpr:haxe.macro.TypedExpr]

	public static function storeExpr[Function:(e : haxe.macro.Expr) -> haxe.macro.Expr]
		[Arg:haxe.macro.Expr] [Local e(111983):haxe.macro.Expr]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "store_expr"
						[Const:Int] 1
					[Local e(111983):haxe.macro.Expr:haxe.macro.Expr]

	public static function registerModuleDependency[Function:(modulePath : String, externFile : String) -> Void]
		[Arg:String] [Local modulePath(111984):String]
		[Arg:String] [Local externFile(111985):String]
		[Block:Dynamic]
			[Call:Dynamic]
				[Call:Dynamic]
					[Field:(f : String, nargs : Int) -> Dynamic]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(f : String, nargs : Int) -> Dynamic]
							haxe.macro.Context
							load:(f : String, nargs : Int) -> Dynamic
					[Const:String] "register_module_dependency"
					[Const:Int] 2
				[Local modulePath(111984):String:String]
				[Local externFile(111985):String:String]

	public static function timer[Function:(id : String) -> (Void -> Void)]
		[Arg:String] [Local id(111986):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "timer"
						[Const:Int] 1
					[Local id(111986):String:String]

	@:deprecated
	public static function registerModuleReuseCall[Function:(modulePath : String, macroCall : String) -> Void]
		[Arg:String] [Local modulePath(111987):String]
		[Arg:String] [Local macroCall(111988):String]
		[Block:Unknown<0>]
			[Throw:Unknown<0>]
				[Throw:Unknown<0>]
					[Call:Any]
						[Field:(value : Any) -> Any]
							[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
							[FStatic:(value : Any) -> Any]
								haxe.Exception
								thrown:(value : Any) -> Any
						[Const:String] "This method is no longer supported. See https://github.com/HaxeFoundation/haxe/issues/5746"

	@:deprecated
	public static function onMacroContextReused[Function:(callb : (Void -> Bool)) -> Void]
		[Arg:Void -> Bool] [Local callb(111989):Void -> Bool]
		[Block:Unknown<1>]
			[Throw:Unknown<1>]
				[Throw:Unknown<1>]
					[Call:Any]
						[Field:(value : Any) -> Any]
							[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
							[FStatic:(value : Any) -> Any]
								haxe.Exception
								thrown:(value : Any) -> Any
						[Const:String] "This method is no longer supported. See https://github.com/HaxeFoundation/haxe/issues/5746"

	@:allow(haxe.macro.TypeTools) @:allow(haxe.macro.MacroStringTools) @:allow(haxe.macro.TypedExprTools) @:allow(haxe.macro.PositionTools)
	static function load[Function:(f : String, nargs : Int) -> Dynamic]
		[Arg:String] [Local f(109974):String]
		[Arg:Int] [Local nargs(109975):Int]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Field:(s : String) -> Dynamic]
						[TypeExpr eval.vm.Context:Class<eval.vm.Context>]
						[FStatic:(s : String) -> Dynamic]
							eval.vm.Context
							callMacroApi:(s : String) -> Dynamic
					[Local f(109974):String:String]

	static function includeFile[Function:(file : String, position : String) -> Void]
		[Arg:String] [Local file(111990):String]
		[Arg:String] [Local position(111991):String]
		[Block:Dynamic]
			[Call:Dynamic]
				[Call:Dynamic]
					[Field:(f : String, nargs : Int) -> Dynamic]
						[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
						[FStatic:(f : String, nargs : Int) -> Dynamic]
							haxe.macro.Context
							load:(f : String, nargs : Int) -> Dynamic
					[Const:String] "include_file"
					[Const:Int] 2
				[Local file(111990):String:String]
				[Local position(111991):String:String]

	static function sExpr[Function:(e : haxe.macro.TypedExpr, pretty : Bool) -> String]
		[Arg:haxe.macro.TypedExpr] [Local e(111992):haxe.macro.TypedExpr]
		[Arg:Bool] [Local pretty(111993):Bool]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Dynamic]
					[Call:Dynamic]
						[Field:(f : String, nargs : Int) -> Dynamic]
							[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
							[FStatic:(f : String, nargs : Int) -> Dynamic]
								haxe.macro.Context
								load:(f : String, nargs : Int) -> Dynamic
						[Const:String] "s_expr"
						[Const:Int] 2
					[Local e(111992):haxe.macro.TypedExpr:haxe.macro.TypedExpr]
					[Local pretty(111993):Bool:Bool]
}