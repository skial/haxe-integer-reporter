class haxe.macro.Printer {

	@:value({ tabString : "\t" })
	public function new[Function:(?tabString : Null<String>) -> Void]
		[Arg:Null<String>]
			[Local tabString(112386):Null<String>]
			[Const:String] "\t"
		[Block:String]
			[Binop:String]
				[Field:String]
					[Const:haxe.macro.Printer] this
					[FInstance:String]
						haxe.macro.Printer
						tabs:String
				=
				[Const:String] ""
			[Binop:String]
				[Field:String]
					[Const:haxe.macro.Printer] this
					[FInstance:String]
						haxe.macro.Printer
						tabString:String
				=
				[Local tabString(112386):Null<String>:Null<String>]

	var tabs:String;

	var tabString:String;

	public function printUnop[Function:(op : haxe.macro.Unop) -> String]
		[Arg:haxe.macro.Unop] [Local op(112722):haxe.macro.Unop]
		[Return:Dynamic]
			[Meta:String]
				:ast(switch (op) {
	case OpIncrement:
		"++";	
	case OpDecrement:
		"--";	
	case OpNot:
		"!";	
	case OpNeg:
		"-";	
	case OpNegBits:
		"~";	
})
				[Switch:String]
					[Meta:Int]
						:exhaustive
						[EnumIndex:Int] [Local op(112722):haxe.macro.Unop:haxe.macro.Unop]
					[Case:String]
						[Const:Int] 0
						[Block:String] [Block:String] [Const:String] "++"
					[Case:String]
						[Const:Int] 1
						[Block:String] [Block:String] [Const:String] "--"
					[Case:String]
						[Const:Int] 2
						[Block:String] [Block:String] [Const:String] "!"
					[Case:String]
						[Const:Int] 3
						[Block:String] [Block:String] [Const:String] "-"
					[Case:String]
						[Const:Int] 4
						[Block:String] [Block:String] [Const:String] "~"

	public function printBinop[Function:(op : haxe.macro.Binop) -> String]
		[Arg:haxe.macro.Binop] [Local op(112428):haxe.macro.Binop]
		[Return:Dynamic]
			[Meta:String]
				:ast(switch (op) {
	case OpAdd:
		"+";	
	case OpMult:
		"*";	
	case OpDiv:
		"/";	
	case OpSub:
		"-";	
	case OpAssign:
		"=";	
	case OpEq:
		"==";	
	case OpNotEq:
		"!=";	
	case OpGt:
		">";	
	case OpGte:
		">=";	
	case OpLt:
		"<";	
	case OpLte:
		"<=";	
	case OpAnd:
		"&";	
	case OpOr:
		"|";	
	case OpXor:
		"^";	
	case OpBoolAnd:
		"&&";	
	case OpBoolOr:
		"||";	
	case OpShl:
		"<<";	
	case OpShr:
		">>";	
	case OpUShr:
		">>>";	
	case OpMod:
		"%";	
	case OpInterval:
		"...";	
	case OpArrow:
		"=>";	
	case OpIn:
		"in";	
	case OpAssignOp(op):
		printBinop(op) + "=";	
})
				[Switch:String]
					[Meta:Int]
						:exhaustive
						[EnumIndex:Int] [Local op(112428):haxe.macro.Binop:haxe.macro.Binop]
					[Case:String]
						[Const:Int] 0
						[Block:String] [Block:String] [Const:String] "+"
					[Case:String]
						[Const:Int] 1
						[Block:String] [Block:String] [Const:String] "*"
					[Case:String]
						[Const:Int] 2
						[Block:String] [Block:String] [Const:String] "/"
					[Case:String]
						[Const:Int] 3
						[Block:String] [Block:String] [Const:String] "-"
					[Case:String]
						[Const:Int] 4
						[Block:String] [Block:String] [Const:String] "="
					[Case:String]
						[Const:Int] 5
						[Block:String] [Block:String] [Const:String] "=="
					[Case:String]
						[Const:Int] 6
						[Block:String] [Block:String] [Const:String] "!="
					[Case:String]
						[Const:Int] 7
						[Block:String] [Block:String] [Const:String] ">"
					[Case:String]
						[Const:Int] 8
						[Block:String] [Block:String] [Const:String] ">="
					[Case:String]
						[Const:Int] 9
						[Block:String] [Block:String] [Const:String] "<"
					[Case:String]
						[Const:Int] 10
						[Block:String] [Block:String] [Const:String] "<="
					[Case:String]
						[Const:Int] 11
						[Block:String] [Block:String] [Const:String] "&"
					[Case:String]
						[Const:Int] 12
						[Block:String] [Block:String] [Const:String] "|"
					[Case:String]
						[Const:Int] 13
						[Block:String] [Block:String] [Const:String] "^"
					[Case:String]
						[Const:Int] 14
						[Block:String] [Block:String] [Const:String] "&&"
					[Case:String]
						[Const:Int] 15
						[Block:String] [Block:String] [Const:String] "||"
					[Case:String]
						[Const:Int] 16
						[Block:String] [Block:String] [Const:String] "<<"
					[Case:String]
						[Const:Int] 17
						[Block:String] [Block:String] [Const:String] ">>"
					[Case:String]
						[Const:Int] 18
						[Block:String] [Block:String] [Const:String] ">>>"
					[Case:String]
						[Const:Int] 19
						[Block:String] [Block:String] [Const:String] "%"
					[Case:String]
						[Const:Int] 20
						[Block:String]
							[Var `(112431):haxe.macro.Binop]
								[EnumParameter:haxe.macro.Binop]
									[Local op(112428):haxe.macro.Binop:haxe.macro.Binop]
									OpAssignOp
									0
							[Block:String]
								[Var op(112432):haxe.macro.Binop] [Local `(112431):haxe.macro.Binop:haxe.macro.Binop]
								[Block:String]
									[Binop:String]
										[Call:String]
											[Field:(op : haxe.macro.Binop) -> String]
												[Const:haxe.macro.Printer] this
												[FInstance:(op : haxe.macro.Binop) -> String]
													haxe.macro.Printer
													printBinop:(op : haxe.macro.Binop) -> String
											[Local op(112432):haxe.macro.Binop:haxe.macro.Binop]
										+
										[Const:String] "="
					[Case:String]
						[Const:Int] 21
						[Block:String] [Block:String] [Const:String] "..."
					[Case:String]
						[Const:Int] 22
						[Block:String] [Block:String] [Const:String] "=>"
					[Case:String]
						[Const:Int] 23
						[Block:String] [Block:String] [Const:String] "in"

	function escapeString[Function:(s : String, delim : String) -> String]
		[Arg:String] [Local s(112391):String]
		[Arg:String] [Local delim(112392):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Binop:String]
					[Binop:String]
						[Local delim(112392):String:String]
						+
						[Call:String]
							[Field:(s : String, sub : String, by : String) -> String]
								[TypeExpr StringTools:Class<StringTools>]
								[FStatic:(s : String, sub : String, by : String) -> String]
									StringTools
									replace:(s : String, sub : String, by : String) -> String
							[Call:String]
								[Field:(s : String, sub : String, by : String) -> String]
									[TypeExpr StringTools:Class<StringTools>]
									[FStatic:(s : String, sub : String, by : String) -> String]
										StringTools
										replace:(s : String, sub : String, by : String) -> String
								[Call:String]
									[Field:(s : String, sub : String, by : String) -> String]
										[TypeExpr StringTools:Class<StringTools>]
										[FStatic:(s : String, sub : String, by : String) -> String]
											StringTools
											replace:(s : String, sub : String, by : String) -> String
									[Call:String]
										[Field:(s : String, sub : String, by : String) -> String]
											[TypeExpr StringTools:Class<StringTools>]
											[FStatic:(s : String, sub : String, by : String) -> String]
												StringTools
												replace:(s : String, sub : String, by : String) -> String
										[Call:String]
											[Field:(s : String, sub : String, by : String) -> String]
												[TypeExpr StringTools:Class<StringTools>]
												[FStatic:(s : String, sub : String, by : String) -> String]
													StringTools
													replace:(s : String, sub : String, by : String) -> String
											[Call:String]
												[Field:(s : String, sub : String, by : String) -> String]
													[TypeExpr StringTools:Class<StringTools>]
													[FStatic:(s : String, sub : String, by : String) -> String]
														StringTools
														replace:(s : String, sub : String, by : String) -> String
												[Local s(112391):String:String]
												[Const:String] "\n"
												[Const:String] "\\n"
											[Const:String] "\t"
											[Const:String] "\\t"
										[Const:String] "\r"
										[Const:String] "\\r"
									[Const:String] "'"
									[Const:String] "\\'"
								[Const:String] "\""
								[Const:String] "\\\""
							[Const:String] "\x00"
							[Const:String] "\\x00"
					+
					[Local delim(112392):String:String]

	public function printFormatString[Function:(s : String) -> String]
		[Arg:String] [Local s(112390):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:String]
					[Field:(s : String, delim : String) -> String]
						[Const:haxe.macro.Printer] this
						[FInstance:(s : String, delim : String) -> String]
							haxe.macro.Printer
							escapeString:(s : String, delim : String) -> String
					[Local s(112390):String:String]
					[Const:String] "'"

	public function printString[Function:(s : String) -> String]
		[Arg:String] [Local s(112393):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:String]
					[Field:(s : String, delim : String) -> String]
						[Const:haxe.macro.Printer] this
						[FInstance:(s : String, delim : String) -> String]
							haxe.macro.Printer
							escapeString:(s : String, delim : String) -> String
					[Local s(112393):String:String]
					[Const:String] "\""

	public function printConstant[Function:(c : haxe.macro.Constant) -> String]
		[Arg:haxe.macro.Constant] [Local c(112395):haxe.macro.Constant]
		[Return:Dynamic]
			[Meta:String]
				:ast(switch (c) {
	case CString(s):
		printString(s);	
	case CIdent(s), CInt(s), CFloat(s):
		s;	
	case CRegexp(s, opt):
		"~/$s/$opt";	
})
				[Switch:String]
					[Meta:Int]
						:exhaustive
						[EnumIndex:Int] [Local c(112395):haxe.macro.Constant:haxe.macro.Constant]
					[Case:String]
						[Const:Int] 0
						[Block:String]
							[Var `1(112410):String]
								[EnumParameter:String]
									[Local c(112395):haxe.macro.Constant:haxe.macro.Constant]
									CInt
									0
							[Block:String]
								[Var s(112411):String] [Local `1(112410):String:String]
								[Block:String] [Local s(112411):String:String]
					[Case:String]
						[Const:Int] 1
						[Block:String]
							[Var `2(112412):String]
								[EnumParameter:String]
									[Local c(112395):haxe.macro.Constant:haxe.macro.Constant]
									CFloat
									0
							[Block:String]
								[Var s(112413):String] [Local `2(112412):String:String]
								[Block:String] [Local s(112413):String:String]
					[Case:String]
						[Const:Int] 2
						[Block:String]
							[Var `6(112414):Null<haxe.macro.StringLiteralKind>]
								[EnumParameter:Null<haxe.macro.StringLiteralKind>]
									[Local c(112395):haxe.macro.Constant:haxe.macro.Constant]
									CString
									1
							[Var `5(112415):String]
								[EnumParameter:String]
									[Local c(112395):haxe.macro.Constant:haxe.macro.Constant]
									CString
									0
							[Block:String]
								[Var s(112416):String] [Local `5(112415):String:String]
								[Block:String]
									[Call:String]
										[Field:(s : String) -> String]
											[Const:haxe.macro.Printer] this
											[FInstance:(s : String) -> String]
												haxe.macro.Printer
												printString:(s : String) -> String
										[Local s(112416):String:String]
					[Case:String]
						[Const:Int] 3
						[Block:String]
							[Var `(112417):String]
								[EnumParameter:String]
									[Local c(112395):haxe.macro.Constant:haxe.macro.Constant]
									CIdent
									0
							[Block:String]
								[Var s(112418):String] [Local `(112417):String:String]
								[Block:String] [Local s(112418):String:String]
					[Case:String]
						[Const:Int] 4
						[Block:String]
							[Var `4(112419):String]
								[EnumParameter:String]
									[Local c(112395):haxe.macro.Constant:haxe.macro.Constant]
									CRegexp
									1
							[Var `3(112420):String]
								[EnumParameter:String]
									[Local c(112395):haxe.macro.Constant:haxe.macro.Constant]
									CRegexp
									0
							[Block:String]
								[Var opt(112421):String] [Local `4(112419):String:String]
								[Var s(112422):String] [Local `3(112420):String:String]
								[Block:String]
									[Binop:String]
										[Binop:String]
											[Binop:String]
												[Const:String] "~/"
												+
												[Local s(112422):String:String]
											+
											[Const:String] "/"
										+
										[Local opt(112421):String:String]

	public function printTypeParam[Function:(param : haxe.macro.TypeParam) -> String]
		[Arg:haxe.macro.TypeParam] [Local param(112466):haxe.macro.TypeParam]
		[Return:Dynamic]
			[Meta:String]
				:ast(switch (param) {
	case TPType(ct):
		printComplexType(ct);	
	case TPExpr(e):
		printExpr(e);	
})
				[Switch:String]
					[Meta:Int]
						:exhaustive
						[EnumIndex:Int] [Local param(112466):haxe.macro.TypeParam:haxe.macro.TypeParam]
					[Case:String]
						[Const:Int] 0
						[Block:String]
							[Var `1(112709):haxe.macro.ComplexType]
								[EnumParameter:haxe.macro.ComplexType]
									[Local param(112466):haxe.macro.TypeParam:haxe.macro.TypeParam]
									TPType
									0
							[Block:String]
								[Var ct(112710):haxe.macro.ComplexType] [Local `1(112709):haxe.macro.ComplexType:haxe.macro.ComplexType]
								[Block:String]
									[Call:String]
										[Field:(ct : haxe.macro.ComplexType) -> String]
											[Const:haxe.macro.Printer] this
											[FInstance:(ct : haxe.macro.ComplexType) -> String]
												haxe.macro.Printer
												printComplexType:(ct : haxe.macro.ComplexType) -> String
										[Local ct(112710):haxe.macro.ComplexType:haxe.macro.ComplexType]
					[Case:String]
						[Const:Int] 1
						[Block:String]
							[Var `(112711):haxe.macro.Expr]
								[EnumParameter:haxe.macro.Expr]
									[Local param(112466):haxe.macro.TypeParam:haxe.macro.TypeParam]
									TPExpr
									0
							[Block:String]
								[Var e(112712):haxe.macro.Expr] [Local `(112711):haxe.macro.Expr:haxe.macro.Expr]
								[Block:String]
									[Call:String]
										[Field:(e : haxe.macro.Expr) -> String]
											[Const:haxe.macro.Printer] this
											[FInstance:(e : haxe.macro.Expr) -> String]
												haxe.macro.Printer
												printExpr:(e : haxe.macro.Expr) -> String
										[Local e(112712):haxe.macro.Expr:haxe.macro.Expr]

	public function printTypePath[Function:(tp : haxe.macro.TypePath) -> String]
		[Arg:haxe.macro.TypePath] [Local tp(112465):haxe.macro.TypePath]
		[Return:Dynamic]
			[Binop:String]
				[Binop:String]
					[Binop:String]
						[Parenthesis:String]
							[If:String]
								[Binop:Bool]
									[Field:Int]
										[Field:Array<String>]
											[Local tp(112465):haxe.macro.TypePath:haxe.macro.TypePath]
											[FAnon:Array<String>] pack:Array<String>
										[FInstance:Int]
											Array<String>
											length:Int
									>
									[Const:Int] 0
								[Then:String] [Block:String]
									[Binop:String]
										[Call:String]
											[Field:(sep : String) -> String]
												[Field:Array<String>]
													[Local tp(112465):haxe.macro.TypePath:haxe.macro.TypePath]
													[FAnon:Array<String>] pack:Array<String>
												[FInstance:(sep : String) -> String]
													Array<String>
													join:(sep : String) -> String
											[Const:String] "."
										+
										[Const:String] "."
								[Else:String] [Block:String] [Const:String] ""
						+
						[Field:String]
							[Local tp(112465):haxe.macro.TypePath:haxe.macro.TypePath]
							[FAnon:String] name:String
					+
					[Parenthesis:String]
						[If:String]
							[Binop:Bool]
								[Field:Null<String>]
									[Local tp(112465):haxe.macro.TypePath:haxe.macro.TypePath]
									[FAnon:Null<String>] sub:Null<String>
								!=
								[Const:Null<String>] null
							[Then:String] [Block:String]
								[Binop:String]
									[Const:String] "."
									+
									[Field:Null<String>]
										[Local tp(112465):haxe.macro.TypePath:haxe.macro.TypePath]
										[FAnon:Null<String>] sub:Null<String>
							[Else:String] [Block:String] [Const:String] ""
				+
				[Parenthesis:String]
					[If:String]
						[Binop:Bool]
							[Field:Null<Array<haxe.macro.TypeParam>>]
								[Local tp(112465):haxe.macro.TypePath:haxe.macro.TypePath]
								[FAnon:Null<Array<haxe.macro.TypeParam>>] params:Null<Array<haxe.macro.TypeParam>>
							==
							[Const:Null<Array<haxe.macro.TypeParam>>] null
						[Then:String] [Block:String] [Const:String] ""
						[Else:String] [Block:String]
							[If:String]
								[Binop:Bool]
									[Field:Int]
										[Field:Null<Array<haxe.macro.TypeParam>>]
											[Local tp(112465):haxe.macro.TypePath:haxe.macro.TypePath]
											[FAnon:Null<Array<haxe.macro.TypeParam>>] params:Null<Array<haxe.macro.TypeParam>>
										[FInstance:Int]
											Array<haxe.macro.TypeParam>
											length:Int
									>
									[Const:Int] 0
								[Then:String] [Block:String]
									[Binop:String]
										[Binop:String]
											[Const:String] "<"
											+
											[Call:String]
												[Field:(sep : String) -> String]
													[Block:Array<String>]
														[Var _this(112714):Null<Array<haxe.macro.TypeParam>>]
															[Field:Null<Array<haxe.macro.TypeParam>>]
																[Local tp(112465):haxe.macro.TypePath:haxe.macro.TypePath]
																[FAnon:Null<Array<haxe.macro.TypeParam>>] params:Null<Array<haxe.macro.TypeParam>>
														[Var f(112715):haxe.macro.TypeParam -> String]
															[Field:(param : haxe.macro.TypeParam) -> String]
																[Const:haxe.macro.Printer] this
																[FClosure:(param : haxe.macro.TypeParam) -> String]
																	haxe.macro.Printer
																	printTypeParam:(param : haxe.macro.TypeParam) -> String
														[Block:Array<String>]
															[Var `(112716):Array<String>] [ArrayDecl:Array<String>]
															[Block:Void]
																[Var `1(112717):Int] [Const:Int] 0
																[Var `2(112718):Array<haxe.macro.TypeParam>] [Local _this(112714):Null<Array<haxe.macro.TypeParam>>:Array<haxe.macro.TypeParam>]
																[While:Void]
																	[Binop:Bool]
																		[Local `1(112717):Int:Int]
																		<
																		[Field:Int]
																			[Local `2(112718):Array<haxe.macro.TypeParam>:Array<haxe.macro.TypeParam>]
																			[FInstance:Int]
																				Array<haxe.macro.TypeParam>
																				length:Int
																	[Block:Void]
																		[Var v(112719):haxe.macro.TypeParam]
																			[Array:haxe.macro.TypeParam]
																				[Local `2(112718):Array<haxe.macro.TypeParam>:Array<haxe.macro.TypeParam>]
																				[Local `1(112717):Int:Int]
																		[Unop:Int]
																			++
																			Prefix
																			[Local `1(112717):Int:Int]
																		[Call:Int]
																			[Field:(x : String) -> Int]
																				[Local `(112716):Array<String>:Array<String>]
																				[FInstance:(x : String) -> Int]
																					Array<String>
																					push:(x : Array.T) -> Int
																			[Call:String]
																				[Local f(112715):haxe.macro.TypeParam -> String:haxe.macro.TypeParam -> String]
																				[Local v(112719):haxe.macro.TypeParam:haxe.macro.TypeParam]
															[Local `(112716):Array<String>:Array<String>]
													[FInstance:(sep : String) -> String]
														Array<String>
														join:(sep : String) -> String
												[Const:String] ", "
										+
										[Const:String] ">"
								[Else:String] [Block:String] [Const:String] ""

	public function printComplexType[Function:(ct : haxe.macro.ComplexType) -> String]
		[Arg:haxe.macro.ComplexType] [Local ct(112468):haxe.macro.ComplexType]
		[Return:Dynamic]
			[Meta:String]
				:ast(switch (ct) {
	case TPath(tp):
		printTypePath(tp);	
	case TFunction(args, ret):
		var wrapArgumentsInParentheses = switch args {
			case [TParent(t)]:
				false;			
			case [TPath(_) | TOptional(TPath(_))]:
				false;			
			default:
				true;			
		};
		var argStr = args.map(printComplexType).join(", ");
		(wrapArgumentsInParentheses ? "($argStr)" : argStr) + " -> " + (switch ret {
			case TFunction(_):
				"(${printComplexType(ret)})";			
			default:
				((printComplexType(ret) : String));			
		});	
	case TAnonymous(fields):
		"{ " + [for (f  in  fields) printField(f) + "; "].join("") + "}";	
	case TParent(ct):
		"(" + printComplexType(ct) + ")";	
	case TOptional(ct):
		"?" + printComplexType(ct);	
	case TNamed(n, ct):
		n + ":" + printComplexType(ct);	
	case TExtend(tpl, fields):
		"{> ${tpl.map(printTypePath).join(\" >, \")}, ${fields.map(printField).join(\", \")} }";	
	case TIntersection(tl):
		tl.map(printComplexType).join(" & ");	
})
				[Switch:String]
					[Meta:Int]
						:exhaustive
						[EnumIndex:Int] [Local ct(112468):haxe.macro.ComplexType:haxe.macro.ComplexType]
					[Case:String]
						[Const:Int] 0
						[Block:String]
							[Var `6(112651):haxe.macro.TypePath]
								[EnumParameter:haxe.macro.TypePath]
									[Local ct(112468):haxe.macro.ComplexType:haxe.macro.ComplexType]
									TPath
									0
							[Block:String]
								[Var tp(112652):haxe.macro.TypePath] [Local `6(112651):haxe.macro.TypePath:haxe.macro.TypePath]
								[Block:String]
									[Call:String]
										[Field:(tp : haxe.macro.TypePath) -> String]
											[Const:haxe.macro.Printer] this
											[FInstance:(tp : haxe.macro.TypePath) -> String]
												haxe.macro.Printer
												printTypePath:(tp : haxe.macro.TypePath) -> String
										[Local tp(112652):haxe.macro.TypePath:haxe.macro.TypePath]
					[Case:String]
						[Const:Int] 1
						[Block:String]
							[Var `3(112653):haxe.macro.ComplexType]
								[EnumParameter:haxe.macro.ComplexType]
									[Local ct(112468):haxe.macro.ComplexType:haxe.macro.ComplexType]
									TFunction
									1
							[Var `2(112654):Array<haxe.macro.ComplexType>]
								[EnumParameter:Array<haxe.macro.ComplexType>]
									[Local ct(112468):haxe.macro.ComplexType:haxe.macro.ComplexType]
									TFunction
									0
							[Block:String]
								[Var ret(112655):haxe.macro.ComplexType] [Local `3(112653):haxe.macro.ComplexType:haxe.macro.ComplexType]
								[Var args(112656):Array<haxe.macro.ComplexType>] [Local `2(112654):Array<haxe.macro.ComplexType>:Array<haxe.macro.ComplexType>]
								[Block:String]
									[Var wrapArgumentsInParentheses(112657):Bool]
										[Meta:Bool]
											:ast(switch args {
	case [TParent(t)]:
		false;	
	case [TPath(_) | TOptional(TPath(_))]:
		false;	
	default:
		true;	
})
											[If:Bool]
												[Binop:Bool]
													[Field:Int]
														[Local args(112656):Array<haxe.macro.ComplexType>:Array<haxe.macro.ComplexType>]
														[FInstance:Int]
															Array<haxe.macro.ComplexType>
															length:Int
													==
													[Const:Int] 1
												[Then:Bool] [Block:Bool]
													[Var `(112658):haxe.macro.ComplexType]
														[Array:haxe.macro.ComplexType]
															[Local args(112656):Array<haxe.macro.ComplexType>:Array<haxe.macro.ComplexType>]
															[Const:Int] 0
													[Switch:Bool]
														[EnumIndex:Int] [Local `(112658):haxe.macro.ComplexType:haxe.macro.ComplexType]
														[Case:Bool]
															[Const:Int] 0
															[Block:Bool]
																[Var `2(112659):haxe.macro.TypePath]
																	[EnumParameter:haxe.macro.TypePath]
																		[Local `(112658):haxe.macro.ComplexType:haxe.macro.ComplexType]
																		TPath
																		0
																[Block:Bool] [Const:Bool] false
														[Case:Bool]
															[Const:Int] 3
															[Block:Bool]
																[Var `1(112660):haxe.macro.ComplexType]
																	[EnumParameter:haxe.macro.ComplexType]
																		[Local `(112658):haxe.macro.ComplexType:haxe.macro.ComplexType]
																		TParent
																		0
																[Block:Bool]
																	[Var t(112661):haxe.macro.ComplexType] [Local `1(112660):haxe.macro.ComplexType:haxe.macro.ComplexType]
																	[Block:Bool] [Const:Bool] false
														[Case:Bool]
															[Const:Int] 5
															[Block:Bool]
																[Var `3(112662):haxe.macro.ComplexType]
																	[EnumParameter:haxe.macro.ComplexType]
																		[Local `(112658):haxe.macro.ComplexType:haxe.macro.ComplexType]
																		TOptional
																		0
																[If:Bool]
																	[Binop:Bool]
																		[EnumIndex:Int] [Local `3(112662):haxe.macro.ComplexType:haxe.macro.ComplexType]
																		==
																		[Const:Int] 0
																	[Then:Bool] [Block:Bool]
																		[Var `4(112663):haxe.macro.TypePath]
																			[EnumParameter:haxe.macro.TypePath]
																				[Local `3(112662):haxe.macro.ComplexType:haxe.macro.ComplexType]
																				TPath
																				0
																		[Block:Bool] [Const:Bool] false
																	[Else:Bool] [Block:Bool] [Const:Bool] true
														[Default:Bool] [Block:Bool] [Const:Bool] true
												[Else:Bool] [Block:Bool] [Const:Bool] true
									[Var argStr(112664):String]
										[Call:String]
											[Field:(sep : String) -> String]
												[Block:Array<String>]
													[Var f(112665):haxe.macro.ComplexType -> String]
														[Field:(ct : haxe.macro.ComplexType) -> String]
															[Const:haxe.macro.Printer] this
															[FClosure:(ct : haxe.macro.ComplexType) -> String]
																haxe.macro.Printer
																printComplexType:(ct : haxe.macro.ComplexType) -> String
													[Block:Array<String>]
														[Var `(112666):Array<String>] [ArrayDecl:Array<String>]
														[Block:Void]
															[Var `1(112667):Int] [Const:Int] 0
															[Var `2(112668):Array<haxe.macro.ComplexType>] [Local args(112656):Array<haxe.macro.ComplexType>:Array<haxe.macro.ComplexType>]
															[While:Void]
																[Binop:Bool]
																	[Local `1(112667):Int:Int]
																	<
																	[Field:Int]
																		[Local `2(112668):Array<haxe.macro.ComplexType>:Array<haxe.macro.ComplexType>]
																		[FInstance:Int]
																			Array<haxe.macro.ComplexType>
																			length:Int
																[Block:Void]
																	[Var v(112669):haxe.macro.ComplexType]
																		[Array:haxe.macro.ComplexType]
																			[Local `2(112668):Array<haxe.macro.ComplexType>:Array<haxe.macro.ComplexType>]
																			[Local `1(112667):Int:Int]
																	[Unop:Int]
																		++
																		Prefix
																		[Local `1(112667):Int:Int]
																	[Call:Int]
																		[Field:(x : String) -> Int]
																			[Local `(112666):Array<String>:Array<String>]
																			[FInstance:(x : String) -> Int]
																				Array<String>
																				push:(x : Array.T) -> Int
																		[Call:String]
																			[Local f(112665):haxe.macro.ComplexType -> String:haxe.macro.ComplexType -> String]
																			[Local v(112669):haxe.macro.ComplexType:haxe.macro.ComplexType]
														[Local `(112666):Array<String>:Array<String>]
												[FInstance:(sep : String) -> String]
													Array<String>
													join:(sep : String) -> String
											[Const:String] ", "
									[Binop:String]
										[Binop:String]
											[Parenthesis:String]
												[If:String]
													[Local wrapArgumentsInParentheses(112657):Bool:Bool]
													[Then:String] [Block:String]
														[Binop:String]
															[Binop:String]
																[Const:String] "("
																+
																[Local argStr(112664):String:String]
															+
															[Const:String] ")"
													[Else:String] [Block:String] [Local argStr(112664):String:String]
											+
											[Const:String] " -> "
										+
										[Parenthesis:String]
											[Meta:String]
												:ast(switch ret {
	case TFunction(_):
		"(${printComplexType(ret)})";	
	default:
		((printComplexType(ret) : String));	
})
												[If:String]
													[Binop:Bool]
														[EnumIndex:Int] [Local ret(112655):haxe.macro.ComplexType:haxe.macro.ComplexType]
														==
														[Const:Int] 1
													[Then:String] [Block:String]
														[Var `6(112670):haxe.macro.ComplexType]
															[EnumParameter:haxe.macro.ComplexType]
																[Local ret(112655):haxe.macro.ComplexType:haxe.macro.ComplexType]
																TFunction
																1
														[Var `5(112671):Array<haxe.macro.ComplexType>]
															[EnumParameter:Array<haxe.macro.ComplexType>]
																[Local ret(112655):haxe.macro.ComplexType:haxe.macro.ComplexType]
																TFunction
																0
														[Block:String]
															[Binop:String]
																[Binop:String]
																	[Const:String] "("
																	+
																	[Call:String]
																		[Field:(ct : haxe.macro.ComplexType) -> String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:(ct : haxe.macro.ComplexType) -> String]
																				haxe.macro.Printer
																				printComplexType:(ct : haxe.macro.ComplexType) -> String
																		[Local ret(112655):haxe.macro.ComplexType:haxe.macro.ComplexType]
																+
																[Const:String] ")"
													[Else:String] [Block:String]
														[Parenthesis:String]
															[Cast:String]
																[Call:String]
																	[Field:(ct : haxe.macro.ComplexType) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(ct : haxe.macro.ComplexType) -> String]
																			haxe.macro.Printer
																			printComplexType:(ct : haxe.macro.ComplexType) -> String
																	[Local ret(112655):haxe.macro.ComplexType:haxe.macro.ComplexType]
					[Case:String]
						[Const:Int] 2
						[Block:String]
							[Var `7(112672):Array<haxe.macro.Field>]
								[EnumParameter:Array<haxe.macro.Field>]
									[Local ct(112468):haxe.macro.ComplexType:haxe.macro.ComplexType]
									TAnonymous
									0
							[Block:String]
								[Var fields(112673):Array<haxe.macro.Field>] [Local `7(112672):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
								[Block:String]
									[Binop:String]
										[Binop:String]
											[Const:String] "{ "
											+
											[Call:String]
												[Field:(sep : String) -> String]
													[Block:Array<String>]
														[Var `(112674):Array<String>] [ArrayDecl:Array<String>]
														[Block:Void]
															[Var `1(112675):Int] [Const:Int] 0
															[While:Void]
																[Binop:Bool]
																	[Local `1(112675):Int:Int]
																	<
																	[Field:Int]
																		[Local fields(112673):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																		[FInstance:Int]
																			Array<haxe.macro.Field>
																			length:Int
																[Block:Void]
																	[Var f(112676):haxe.macro.Field]
																		[Array:haxe.macro.Field]
																			[Local fields(112673):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																			[Local `1(112675):Int:Int]
																	[Unop:Int]
																		++
																		Prefix
																		[Local `1(112675):Int:Int]
																	[Call:Int]
																		[Field:(x : String) -> Int]
																			[Local `(112674):Array<String>:Array<String>]
																			[FInstance:(x : String) -> Int]
																				Array<String>
																				push:(x : Array.T) -> Int
																		[Binop:String]
																			[Call:String]
																				[Field:(field : haxe.macro.Field) -> String]
																					[Const:haxe.macro.Printer] this
																					[FInstance:(field : haxe.macro.Field) -> String]
																						haxe.macro.Printer
																						printField:(field : haxe.macro.Field) -> String
																				[Local f(112676):haxe.macro.Field:haxe.macro.Field]
																			+
																			[Const:String] "; "
														[Local `(112674):Array<String>:Array<String>]
													[FInstance:(sep : String) -> String]
														Array<String>
														join:(sep : String) -> String
												[Const:String] ""
										+
										[Const:String] "}"
					[Case:String]
						[Const:Int] 3
						[Block:String]
							[Var `1(112677):haxe.macro.ComplexType]
								[EnumParameter:haxe.macro.ComplexType]
									[Local ct(112468):haxe.macro.ComplexType:haxe.macro.ComplexType]
									TParent
									0
							[Block:String]
								[Var ct(112678):haxe.macro.ComplexType] [Local `1(112677):haxe.macro.ComplexType:haxe.macro.ComplexType]
								[Block:String]
									[Binop:String]
										[Binop:String]
											[Const:String] "("
											+
											[Call:String]
												[Field:(ct : haxe.macro.ComplexType) -> String]
													[Const:haxe.macro.Printer] this
													[FInstance:(ct : haxe.macro.ComplexType) -> String]
														haxe.macro.Printer
														printComplexType:(ct : haxe.macro.ComplexType) -> String
												[Local ct(112678):haxe.macro.ComplexType:haxe.macro.ComplexType]
										+
										[Const:String] ")"
					[Case:String]
						[Const:Int] 4
						[Block:String]
							[Var `10(112679):Array<haxe.macro.Field>]
								[EnumParameter:Array<haxe.macro.Field>]
									[Local ct(112468):haxe.macro.ComplexType:haxe.macro.ComplexType]
									TExtend
									1
							[Var `9(112680):Array<haxe.macro.TypePath>]
								[EnumParameter:Array<haxe.macro.TypePath>]
									[Local ct(112468):haxe.macro.ComplexType:haxe.macro.ComplexType]
									TExtend
									0
							[Block:String]
								[Var fields(112681):Array<haxe.macro.Field>] [Local `10(112679):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
								[Var tpl(112682):Array<haxe.macro.TypePath>] [Local `9(112680):Array<haxe.macro.TypePath>:Array<haxe.macro.TypePath>]
								[Block:String]
									[Binop:String]
										[Binop:String]
											[Binop:String]
												[Binop:String]
													[Const:String] "{> "
													+
													[Call:String]
														[Field:(sep : String) -> String]
															[Block:Array<String>]
																[Var f(112683):haxe.macro.TypePath -> String]
																	[Field:(tp : haxe.macro.TypePath) -> String]
																		[Const:haxe.macro.Printer] this
																		[FClosure:(tp : haxe.macro.TypePath) -> String]
																			haxe.macro.Printer
																			printTypePath:(tp : haxe.macro.TypePath) -> String
																[Block:Array<String>]
																	[Var `(112684):Array<String>] [ArrayDecl:Array<String>]
																	[Block:Void]
																		[Var `1(112685):Int] [Const:Int] 0
																		[Var `2(112686):Array<haxe.macro.TypePath>] [Local tpl(112682):Array<haxe.macro.TypePath>:Array<haxe.macro.TypePath>]
																		[While:Void]
																			[Binop:Bool]
																				[Local `1(112685):Int:Int]
																				<
																				[Field:Int]
																					[Local `2(112686):Array<haxe.macro.TypePath>:Array<haxe.macro.TypePath>]
																					[FInstance:Int]
																						Array<haxe.macro.TypePath>
																						length:Int
																			[Block:Void]
																				[Var v(112687):haxe.macro.TypePath]
																					[Array:haxe.macro.TypePath]
																						[Local `2(112686):Array<haxe.macro.TypePath>:Array<haxe.macro.TypePath>]
																						[Local `1(112685):Int:Int]
																				[Unop:Int]
																					++
																					Prefix
																					[Local `1(112685):Int:Int]
																				[Call:Int]
																					[Field:(x : String) -> Int]
																						[Local `(112684):Array<String>:Array<String>]
																						[FInstance:(x : String) -> Int]
																							Array<String>
																							push:(x : Array.T) -> Int
																					[Call:String]
																						[Local f(112683):haxe.macro.TypePath -> String:haxe.macro.TypePath -> String]
																						[Local v(112687):haxe.macro.TypePath:haxe.macro.TypePath]
																	[Local `(112684):Array<String>:Array<String>]
															[FInstance:(sep : String) -> String]
																Array<String>
																join:(sep : String) -> String
														[Const:String] " >, "
												+
												[Const:String] ", "
											+
											[Call:String]
												[Field:(sep : String) -> String]
													[Block:Array<String>]
														[Var f(112688):haxe.macro.Field -> String]
															[Field:(field : haxe.macro.Field) -> String]
																[Const:haxe.macro.Printer] this
																[FClosure:(field : haxe.macro.Field) -> String]
																	haxe.macro.Printer
																	printField:(field : haxe.macro.Field) -> String
														[Block:Array<String>]
															[Var `(112689):Array<String>] [ArrayDecl:Array<String>]
															[Block:Void]
																[Var `1(112690):Int] [Const:Int] 0
																[Var `2(112691):Array<haxe.macro.Field>] [Local fields(112681):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																[While:Void]
																	[Binop:Bool]
																		[Local `1(112690):Int:Int]
																		<
																		[Field:Int]
																			[Local `2(112691):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																			[FInstance:Int]
																				Array<haxe.macro.Field>
																				length:Int
																	[Block:Void]
																		[Var v(112692):haxe.macro.Field]
																			[Array:haxe.macro.Field]
																				[Local `2(112691):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																				[Local `1(112690):Int:Int]
																		[Unop:Int]
																			++
																			Prefix
																			[Local `1(112690):Int:Int]
																		[Call:Int]
																			[Field:(x : String) -> Int]
																				[Local `(112689):Array<String>:Array<String>]
																				[FInstance:(x : String) -> Int]
																					Array<String>
																					push:(x : Array.T) -> Int
																			[Call:String]
																				[Local f(112688):haxe.macro.Field -> String:haxe.macro.Field -> String]
																				[Local v(112692):haxe.macro.Field:haxe.macro.Field]
															[Local `(112689):Array<String>:Array<String>]
													[FInstance:(sep : String) -> String]
														Array<String>
														join:(sep : String) -> String
												[Const:String] ", "
										+
										[Const:String] " }"
					[Case:String]
						[Const:Int] 5
						[Block:String]
							[Var `8(112693):haxe.macro.ComplexType]
								[EnumParameter:haxe.macro.ComplexType]
									[Local ct(112468):haxe.macro.ComplexType:haxe.macro.ComplexType]
									TOptional
									0
							[Block:String]
								[Var ct(112694):haxe.macro.ComplexType] [Local `8(112693):haxe.macro.ComplexType:haxe.macro.ComplexType]
								[Block:String]
									[Binop:String]
										[Const:String] "?"
										+
										[Call:String]
											[Field:(ct : haxe.macro.ComplexType) -> String]
												[Const:haxe.macro.Printer] this
												[FInstance:(ct : haxe.macro.ComplexType) -> String]
													haxe.macro.Printer
													printComplexType:(ct : haxe.macro.ComplexType) -> String
											[Local ct(112694):haxe.macro.ComplexType:haxe.macro.ComplexType]
					[Case:String]
						[Const:Int] 6
						[Block:String]
							[Var `5(112695):haxe.macro.ComplexType]
								[EnumParameter:haxe.macro.ComplexType]
									[Local ct(112468):haxe.macro.ComplexType:haxe.macro.ComplexType]
									TNamed
									1
							[Var `4(112696):String]
								[EnumParameter:String]
									[Local ct(112468):haxe.macro.ComplexType:haxe.macro.ComplexType]
									TNamed
									0
							[Block:String]
								[Var ct(112697):haxe.macro.ComplexType] [Local `5(112695):haxe.macro.ComplexType:haxe.macro.ComplexType]
								[Var n(112698):String] [Local `4(112696):String:String]
								[Block:String]
									[Binop:String]
										[Binop:String]
											[Local n(112698):String:String]
											+
											[Const:String] ":"
										+
										[Call:String]
											[Field:(ct : haxe.macro.ComplexType) -> String]
												[Const:haxe.macro.Printer] this
												[FInstance:(ct : haxe.macro.ComplexType) -> String]
													haxe.macro.Printer
													printComplexType:(ct : haxe.macro.ComplexType) -> String
											[Local ct(112697):haxe.macro.ComplexType:haxe.macro.ComplexType]
					[Case:String]
						[Const:Int] 7
						[Block:String]
							[Var `(112699):Array<haxe.macro.ComplexType>]
								[EnumParameter:Array<haxe.macro.ComplexType>]
									[Local ct(112468):haxe.macro.ComplexType:haxe.macro.ComplexType]
									TIntersection
									0
							[Block:String]
								[Var tl(112700):Array<haxe.macro.ComplexType>] [Local `(112699):Array<haxe.macro.ComplexType>:Array<haxe.macro.ComplexType>]
								[Block:String]
									[Call:String]
										[Field:(sep : String) -> String]
											[Block:Array<String>]
												[Var f(112701):haxe.macro.ComplexType -> String]
													[Field:(ct : haxe.macro.ComplexType) -> String]
														[Const:haxe.macro.Printer] this
														[FClosure:(ct : haxe.macro.ComplexType) -> String]
															haxe.macro.Printer
															printComplexType:(ct : haxe.macro.ComplexType) -> String
												[Block:Array<String>]
													[Var `(112702):Array<String>] [ArrayDecl:Array<String>]
													[Block:Void]
														[Var `1(112703):Int] [Const:Int] 0
														[Var `2(112704):Array<haxe.macro.ComplexType>] [Local tl(112700):Array<haxe.macro.ComplexType>:Array<haxe.macro.ComplexType>]
														[While:Void]
															[Binop:Bool]
																[Local `1(112703):Int:Int]
																<
																[Field:Int]
																	[Local `2(112704):Array<haxe.macro.ComplexType>:Array<haxe.macro.ComplexType>]
																	[FInstance:Int]
																		Array<haxe.macro.ComplexType>
																		length:Int
															[Block:Void]
																[Var v(112705):haxe.macro.ComplexType]
																	[Array:haxe.macro.ComplexType]
																		[Local `2(112704):Array<haxe.macro.ComplexType>:Array<haxe.macro.ComplexType>]
																		[Local `1(112703):Int:Int]
																[Unop:Int]
																	++
																	Prefix
																	[Local `1(112703):Int:Int]
																[Call:Int]
																	[Field:(x : String) -> Int]
																		[Local `(112702):Array<String>:Array<String>]
																		[FInstance:(x : String) -> Int]
																			Array<String>
																			push:(x : Array.T) -> Int
																	[Call:String]
																		[Local f(112701):haxe.macro.ComplexType -> String:haxe.macro.ComplexType -> String]
																		[Local v(112705):haxe.macro.ComplexType:haxe.macro.ComplexType]
													[Local `(112702):Array<String>:Array<String>]
											[FInstance:(sep : String) -> String]
												Array<String>
												join:(sep : String) -> String
										[Const:String] " & "

	public function printMetadata[Function:(meta : haxe.macro.MetadataEntry) -> String]
		[Arg:haxe.macro.MetadataEntry] [Local meta(112512):haxe.macro.MetadataEntry]
		[Return:Dynamic]
			[Binop:String]
				[Binop:String]
					[Const:String] "@"
					+
					[Field:String]
						[Local meta(112512):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
						[FAnon:String] name:String
				+
				[Parenthesis:String]
					[If:String]
						[Parenthesis:Bool]
							[Binop:Bool]
								[Binop:Bool]
									[Field:Null<Array<haxe.macro.Expr>>]
										[Local meta(112512):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
										[FAnon:Null<Array<haxe.macro.Expr>>] params:Null<Array<haxe.macro.Expr>>
									!=
									[Const:Null<Array<haxe.macro.Expr>>] null
								&&
								[Binop:Bool]
									[Field:Int]
										[Field:Null<Array<haxe.macro.Expr>>]
											[Local meta(112512):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
											[FAnon:Null<Array<haxe.macro.Expr>>] params:Null<Array<haxe.macro.Expr>>
										[FInstance:Int]
											Array<haxe.macro.Expr>
											length:Int
									>
									[Const:Int] 0
						[Then:String] [Block:String]
							[Binop:String]
								[Binop:String]
									[Const:String] "("
									+
									[Call:String]
										[Field:(el : Array<haxe.macro.Expr>, sep : String) -> String]
											[Const:haxe.macro.Printer] this
											[FInstance:(el : Array<haxe.macro.Expr>, sep : String) -> String]
												haxe.macro.Printer
												printExprs:(el : Array<haxe.macro.Expr>, sep : String) -> String
										[Field:Null<Array<haxe.macro.Expr>>]
											[Local meta(112512):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
											[FAnon:Null<Array<haxe.macro.Expr>>] params:Null<Array<haxe.macro.Expr>>
										[Const:String] ", "
								+
								[Const:String] ")"
						[Else:String] [Block:String] [Const:String] ""

	public function printAccess[Function:(access : haxe.macro.Access) -> String]
		[Arg:haxe.macro.Access] [Local access(112526):haxe.macro.Access]
		[Return:Dynamic]
			[Meta:String]
				:ast(switch (access) {
	case AStatic:
		"static";	
	case APublic:
		"public";	
	case APrivate:
		"private";	
	case AOverride:
		"override";	
	case AInline:
		"inline";	
	case ADynamic:
		"dynamic";	
	case AMacro:
		"macro";	
	case AFinal:
		"final";	
	case AExtern:
		"extern";	
})
				[Switch:String]
					[Meta:Int]
						:exhaustive
						[EnumIndex:Int] [Local access(112526):haxe.macro.Access:haxe.macro.Access]
					[Case:String]
						[Const:Int] 0
						[Block:String] [Block:String] [Const:String] "public"
					[Case:String]
						[Const:Int] 1
						[Block:String] [Block:String] [Const:String] "private"
					[Case:String]
						[Const:Int] 2
						[Block:String] [Block:String] [Const:String] "static"
					[Case:String]
						[Const:Int] 3
						[Block:String] [Block:String] [Const:String] "override"
					[Case:String]
						[Const:Int] 4
						[Block:String] [Block:String] [Const:String] "dynamic"
					[Case:String]
						[Const:Int] 5
						[Block:String] [Block:String] [Const:String] "inline"
					[Case:String]
						[Const:Int] 6
						[Block:String] [Block:String] [Const:String] "macro"
					[Case:String]
						[Const:Int] 7
						[Block:String] [Block:String] [Const:String] "final"
					[Case:String]
						[Const:Int] 8
						[Block:String] [Block:String] [Const:String] "extern"

	public function printField[Function:(field : haxe.macro.Field) -> String]
		[Arg:haxe.macro.Field] [Local field(112500):haxe.macro.Field]
		[Block:Dynamic]
			[Block:Void]
			[Return:Dynamic]
				[Binop:String]
					[Binop:String]
						[Binop:String]
							[Parenthesis:String]
								[If:String]
									[Binop:Bool]
										[Binop:Bool]
											[Field:Null<String>]
												[Local field(112500):haxe.macro.Field:haxe.macro.Field]
												[FAnon:Null<String>] doc:Null<String>
											!=
											[Const:Null<String>] null
										&&
										[Binop:Bool]
											[Field:Null<String>]
												[Local field(112500):haxe.macro.Field:haxe.macro.Field]
												[FAnon:Null<String>] doc:Null<String>
											!=
											[Const:String] ""
									[Then:String] [Block:String]
										[Binop:String]
											[Binop:String]
												[Binop:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Const:String] "/**\n"
																	+
																	[Field:String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:String]
																			haxe.macro.Printer
																			tabs:String
																+
																[Field:String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:String]
																		haxe.macro.Printer
																		tabString:String
															+
															[Call:String]
																[Field:(s : String, sub : String, by : String) -> String]
																	[TypeExpr StringTools:Class<StringTools>]
																	[FStatic:(s : String, sub : String, by : String) -> String]
																		StringTools
																		replace:(s : String, sub : String, by : String) -> String
																[Field:Null<String>]
																	[Local field(112500):haxe.macro.Field:haxe.macro.Field]
																	[FAnon:Null<String>] doc:Null<String>
																[Const:String] "\n"
																[Binop:String]
																	[Binop:String]
																		[Const:String] "\n"
																		+
																		[Field:String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:String]
																				haxe.macro.Printer
																				tabs:String
																	+
																	[Field:String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:String]
																			haxe.macro.Printer
																			tabString:String
														+
														[Const:String] "\n"
													+
													[Field:String]
														[Const:haxe.macro.Printer] this
														[FInstance:String]
															haxe.macro.Printer
															tabs:String
												+
												[Const:String] "**/\n"
											+
											[Field:String]
												[Const:haxe.macro.Printer] this
												[FInstance:String]
													haxe.macro.Printer
													tabs:String
									[Else:String] [Block:String] [Const:String] ""
							+
							[Parenthesis:String]
								[If:String]
									[Binop:Bool]
										[Binop:Bool]
											[Field:Null<haxe.macro.Metadata>]
												[Local field(112500):haxe.macro.Field:haxe.macro.Field]
												[FAnon:Null<haxe.macro.Metadata>] meta:Null<haxe.macro.Metadata>
											!=
											[Const:Null<haxe.macro.Metadata>] null
										&&
										[Binop:Bool]
											[Field:Int]
												[Field:Null<haxe.macro.Metadata>]
													[Local field(112500):haxe.macro.Field:haxe.macro.Field]
													[FAnon:Null<haxe.macro.Metadata>] meta:Null<haxe.macro.Metadata>
												[FInstance:Int]
													Array<haxe.macro.MetadataEntry>
													length:Int
											>
											[Const:Int] 0
									[Then:String] [Block:String]
										[Binop:String]
											[Call:String]
												[Field:(sep : String) -> String]
													[Block:Array<String>]
														[Var _this(112514):Null<haxe.macro.Metadata>]
															[Field:Null<haxe.macro.Metadata>]
																[Local field(112500):haxe.macro.Field:haxe.macro.Field]
																[FAnon:Null<haxe.macro.Metadata>] meta:Null<haxe.macro.Metadata>
														[Var f(112515):haxe.macro.MetadataEntry -> String]
															[Field:(meta : haxe.macro.MetadataEntry) -> String]
																[Const:haxe.macro.Printer] this
																[FClosure:(meta : haxe.macro.MetadataEntry) -> String]
																	haxe.macro.Printer
																	printMetadata:(meta : haxe.macro.MetadataEntry) -> String
														[Block:Array<String>]
															[Var `(112516):Array<String>] [ArrayDecl:Array<String>]
															[Block:Void]
																[Var `1(112517):Int] [Const:Int] 0
																[Var `2(112518):Array<haxe.macro.MetadataEntry>] [Local _this(112514):Null<haxe.macro.Metadata>:Array<haxe.macro.MetadataEntry>]
																[While:Void]
																	[Binop:Bool]
																		[Local `1(112517):Int:Int]
																		<
																		[Field:Int]
																			[Local `2(112518):Array<haxe.macro.MetadataEntry>:Array<haxe.macro.MetadataEntry>]
																			[FInstance:Int]
																				Array<haxe.macro.MetadataEntry>
																				length:Int
																	[Block:Void]
																		[Var v(112519):haxe.macro.MetadataEntry]
																			[Array:haxe.macro.MetadataEntry]
																				[Local `2(112518):Array<haxe.macro.MetadataEntry>:Array<haxe.macro.MetadataEntry>]
																				[Local `1(112517):Int:Int]
																		[Unop:Int]
																			++
																			Prefix
																			[Local `1(112517):Int:Int]
																		[Call:Int]
																			[Field:(x : String) -> Int]
																				[Local `(112516):Array<String>:Array<String>]
																				[FInstance:(x : String) -> Int]
																					Array<String>
																					push:(x : Array.T) -> Int
																			[Call:String]
																				[Local f(112515):haxe.macro.MetadataEntry -> String:haxe.macro.MetadataEntry -> String]
																				[Local v(112519):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
															[Local `(112516):Array<String>:Array<String>]
													[FInstance:(sep : String) -> String]
														Array<String>
														join:(sep : String) -> String
												[Binop:String]
													[Const:String] "\n"
													+
													[Field:String]
														[Const:haxe.macro.Printer] this
														[FInstance:String]
															haxe.macro.Printer
															tabs:String
											+
											[Binop:String]
												[Const:String] "\n"
												+
												[Field:String]
													[Const:haxe.macro.Printer] this
													[FInstance:String]
														haxe.macro.Printer
														tabs:String
									[Else:String] [Block:String] [Const:String] ""
						+
						[Parenthesis:String]
							[If:String]
								[Binop:Bool]
									[Binop:Bool]
										[Field:Null<Array<haxe.macro.Access>>]
											[Local field(112500):haxe.macro.Field:haxe.macro.Field]
											[FAnon:Null<Array<haxe.macro.Access>>] access:Null<Array<haxe.macro.Access>>
										!=
										[Const:Null<Array<haxe.macro.Access>>] null
									&&
									[Binop:Bool]
										[Field:Int]
											[Field:Null<Array<haxe.macro.Access>>]
												[Local field(112500):haxe.macro.Field:haxe.macro.Field]
												[FAnon:Null<Array<haxe.macro.Access>>] access:Null<Array<haxe.macro.Access>>
											[FInstance:Int]
												Array<haxe.macro.Access>
												length:Int
										>
										[Const:Int] 0
								[Then:String] [Block:String]
									[Binop:String]
										[Call:String]
											[Field:(sep : String) -> String]
												[Block:Array<String>]
													[Var _this(112528):Array<haxe.macro.Access>]
														[Block:Array<haxe.macro.Access>]
															[Var access(112520):Array<haxe.macro.Access>]
																[Field:Null<Array<haxe.macro.Access>>]
																	[Local field(112500):haxe.macro.Field:haxe.macro.Field]
																	[FAnon:Null<Array<haxe.macro.Access>>] access:Null<Array<haxe.macro.Access>>
															[If:Array<haxe.macro.Access>]
																[Call:Bool]
																	[Field:(it : Iterable<haxe.macro.Access>, elt : haxe.macro.Access) -> Bool]
																		[TypeExpr Lambda:Class<Lambda>]
																		[FStatic:(it : Iterable<haxe.macro.Access>, elt : haxe.macro.Access) -> Bool]
																			Lambda
																			has:(it : Iterable<has.A>, elt : has.A) -> Bool
																	[Local access(112520):Array<haxe.macro.Access>:Array<haxe.macro.Access>]
																	[Field:haxe.macro.Access]
																		[TypeExpr haxe.macro.Access:Enum<haxe.macro.Access>]
																		[FEnum:haxe.macro.Access]
																			haxe.macro.Access
																			AFinal
																[Then:Array<haxe.macro.Access>] [Block:Array<haxe.macro.Access>]
																	[Call:Array<haxe.macro.Access>]
																		[Field:(a : Array<haxe.macro.Access>) -> Array<haxe.macro.Access>]
																			[Block:Array<haxe.macro.Access>]
																				[Var `(112521):Array<haxe.macro.Access>] [ArrayDecl:Array<haxe.macro.Access>]
																				[Block:Void]
																					[Var `1(112522):Int] [Const:Int] 0
																					[Var `2(112523):Array<haxe.macro.Access>] [Local access(112520):Array<haxe.macro.Access>:Array<haxe.macro.Access>]
																					[While:Void]
																						[Binop:Bool]
																							[Local `1(112522):Int:Int]
																							<
																							[Field:Int]
																								[Local `2(112523):Array<haxe.macro.Access>:Array<haxe.macro.Access>]
																								[FInstance:Int]
																									Array<haxe.macro.Access>
																									length:Int
																						[Block:Void]
																							[Var v(112524):haxe.macro.Access]
																								[Array:haxe.macro.Access]
																									[Local `2(112523):Array<haxe.macro.Access>:Array<haxe.macro.Access>]
																									[Local `1(112522):Int:Int]
																							[Unop:Int]
																								++
																								Prefix
																								[Local `1(112522):Int:Int]
																							[If:Void]
																								[Call:Bool]
																									[Function:(a : haxe.macro.Access) -> Bool]
																										[Arg:haxe.macro.Access] [Local a(112525):haxe.macro.Access]
																										[Block:Dynamic]
																											[Return:Dynamic]
																												[Unop:Bool]
																													!
																													Prefix
																													[Parenthesis:Bool]
																														[If:Bool]
																															[Parenthesis:Bool]
																																[Binop:Bool]
																																	[EnumIndex:Int] [Local a(112525):haxe.macro.Access:haxe.macro.Access]
																																	==
																																	[Const:Int] 7
																															[Then:Bool] [Const:Bool] true
																															[Else:Bool] [Const:Bool] false
																									[Local v(112524):haxe.macro.Access:haxe.macro.Access]
																								[Then:Int] [Block:Int]
																									[Call:Int]
																										[Field:(x : haxe.macro.Access) -> Int]
																											[Local `(112521):Array<haxe.macro.Access>:Array<haxe.macro.Access>]
																											[FInstance:(x : haxe.macro.Access) -> Int]
																												Array<haxe.macro.Access>
																												push:(x : Array.T) -> Int
																										[Local v(112524):haxe.macro.Access:haxe.macro.Access]
																				[Local `(112521):Array<haxe.macro.Access>:Array<haxe.macro.Access>]
																			[FInstance:(a : Array<haxe.macro.Access>) -> Array<haxe.macro.Access>]
																				Array<haxe.macro.Access>
																				concat:(a : Array<Array.T>) -> Array<Array.T>
																		[ArrayDecl:Array<haxe.macro.Access>]
																			[Field:haxe.macro.Access]
																				[TypeExpr haxe.macro.Access:Enum<haxe.macro.Access>]
																				[FEnum:haxe.macro.Access]
																					haxe.macro.Access
																					AFinal
																[Else:Array<haxe.macro.Access>] [Block:Array<haxe.macro.Access>] [Local access(112520):Array<haxe.macro.Access>:Array<haxe.macro.Access>]
													[Var f(112529):haxe.macro.Access -> String]
														[Field:(access : haxe.macro.Access) -> String]
															[Const:haxe.macro.Printer] this
															[FClosure:(access : haxe.macro.Access) -> String]
																haxe.macro.Printer
																printAccess:(access : haxe.macro.Access) -> String
													[Block:Array<String>]
														[Var `(112530):Array<String>] [ArrayDecl:Array<String>]
														[Block:Void]
															[Var `1(112531):Int] [Const:Int] 0
															[Var `2(112532):Array<haxe.macro.Access>] [Local _this(112528):Array<haxe.macro.Access>:Array<haxe.macro.Access>]
															[While:Void]
																[Binop:Bool]
																	[Local `1(112531):Int:Int]
																	<
																	[Field:Int]
																		[Local `2(112532):Array<haxe.macro.Access>:Array<haxe.macro.Access>]
																		[FInstance:Int]
																			Array<haxe.macro.Access>
																			length:Int
																[Block:Void]
																	[Var v(112533):haxe.macro.Access]
																		[Array:haxe.macro.Access]
																			[Local `2(112532):Array<haxe.macro.Access>:Array<haxe.macro.Access>]
																			[Local `1(112531):Int:Int]
																	[Unop:Int]
																		++
																		Prefix
																		[Local `1(112531):Int:Int]
																	[Call:Int]
																		[Field:(x : String) -> Int]
																			[Local `(112530):Array<String>:Array<String>]
																			[FInstance:(x : String) -> Int]
																				Array<String>
																				push:(x : Array.T) -> Int
																		[Call:String]
																			[Local f(112529):haxe.macro.Access -> String:haxe.macro.Access -> String]
																			[Local v(112533):haxe.macro.Access:haxe.macro.Access]
														[Local `(112530):Array<String>:Array<String>]
												[FInstance:(sep : String) -> String]
													Array<String>
													join:(sep : String) -> String
											[Const:String] " "
										+
										[Const:String] " "
								[Else:String] [Block:String] [Const:String] ""
					+
					[Meta:String]
						:ast(switch (field.kind) {
	case FVar(t, eo):
		((field.access != null && field.access.has(AFinal)) ? "" : "var ") + "${field.name}" + opt(t, printComplexType, " : ") + opt(eo, printExpr, " = ");	
	case FProp(get, set, t, eo):
		"var ${field.name}($get, $set)" + opt(t, printComplexType, " : ") + opt(eo, printExpr, " = ");	
	case FFun(func):
		"function ${field.name}" + printFunction(func);	
})
						[Block:String]
							[Var `(112596):haxe.macro.FieldType]
								[Field:haxe.macro.FieldType]
									[Local field(112500):haxe.macro.Field:haxe.macro.Field]
									[FAnon:haxe.macro.FieldType] kind:haxe.macro.FieldType
							[Switch:String]
								[Meta:Int]
									:exhaustive
									[EnumIndex:Int] [Local `(112596):haxe.macro.FieldType:haxe.macro.FieldType]
								[Case:String]
									[Const:Int] 0
									[Block:String]
										[Var `6(112597):Null<haxe.macro.Expr>]
											[EnumParameter:Null<haxe.macro.Expr>]
												[Local `(112596):haxe.macro.FieldType:haxe.macro.FieldType]
												FVar
												1
										[Var `5(112598):Null<haxe.macro.ComplexType>]
											[EnumParameter:Null<haxe.macro.ComplexType>]
												[Local `(112596):haxe.macro.FieldType:haxe.macro.FieldType]
												FVar
												0
										[Block:String]
											[Var eo(112599):Null<haxe.macro.Expr>] [Local `6(112597):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
											[Var t(112600):Null<haxe.macro.ComplexType>] [Local `5(112598):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
											[Block:String]
												[Binop:String]
													[Binop:String]
														[Binop:String]
															[Parenthesis:String]
																[If:String]
																	[Parenthesis:Bool]
																		[Binop:Bool]
																			[Binop:Bool]
																				[Field:Null<Array<haxe.macro.Access>>]
																					[Local field(112500):haxe.macro.Field:haxe.macro.Field]
																					[FAnon:Null<Array<haxe.macro.Access>>] access:Null<Array<haxe.macro.Access>>
																				!=
																				[Const:Null<Array<haxe.macro.Access>>] null
																			&&
																			[Call:Bool]
																				[Field:(it : Iterable<haxe.macro.Access>, elt : haxe.macro.Access) -> Bool]
																					[TypeExpr Lambda:Class<Lambda>]
																					[FStatic:(it : Iterable<haxe.macro.Access>, elt : haxe.macro.Access) -> Bool]
																						Lambda
																						has:(it : Iterable<has.A>, elt : has.A) -> Bool
																				[Field:Null<Array<haxe.macro.Access>>]
																					[Local field(112500):haxe.macro.Field:haxe.macro.Field]
																					[FAnon:Null<Array<haxe.macro.Access>>] access:Null<Array<haxe.macro.Access>>
																				[Field:haxe.macro.Access]
																					[TypeExpr haxe.macro.Access:Enum<haxe.macro.Access>]
																					[FEnum:haxe.macro.Access]
																						haxe.macro.Access
																						AFinal
																	[Then:String] [Block:String] [Const:String] ""
																	[Else:String] [Block:String] [Const:String] "var "
															+
															[Binop:String]
																[Const:String] ""
																+
																[Field:String]
																	[Local field(112500):haxe.macro.Field:haxe.macro.Field]
																	[FAnon:String] name:String
														+
														[Call:String]
															[Field:(v : Null<haxe.macro.ComplexType>, f : (Null<haxe.macro.ComplexType> -> String), ?prefix : String) -> String]
																[Const:haxe.macro.Printer] this
																[FInstance:(v : Null<haxe.macro.ComplexType>, f : (Null<haxe.macro.ComplexType> -> String), ?prefix : String) -> String]
																	haxe.macro.Printer
																	opt:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String
															[Local t(112600):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
															[Field:(ct : haxe.macro.ComplexType) -> String]
																[Const:haxe.macro.Printer] this
																[FClosure:(ct : haxe.macro.ComplexType) -> String]
																	haxe.macro.Printer
																	printComplexType:(ct : haxe.macro.ComplexType) -> String
															[Const:String] " : "
													+
													[Call:String]
														[Field:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
															[Const:haxe.macro.Printer] this
															[FInstance:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
																haxe.macro.Printer
																opt:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String
														[Local eo(112599):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
														[Field:(e : haxe.macro.Expr) -> String]
															[Const:haxe.macro.Printer] this
															[FClosure:(e : haxe.macro.Expr) -> String]
																haxe.macro.Printer
																printExpr:(e : haxe.macro.Expr) -> String
														[Const:String] " = "
								[Case:String]
									[Const:Int] 1
									[Block:String]
										[Var `7(112601):haxe.macro.Function]
											[EnumParameter:haxe.macro.Function]
												[Local `(112596):haxe.macro.FieldType:haxe.macro.FieldType]
												FFun
												0
										[Block:String]
											[Var func(112602):haxe.macro.Function] [Local `7(112601):haxe.macro.Function:haxe.macro.Function]
											[Block:String]
												[Binop:String]
													[Binop:String]
														[Const:String] "function "
														+
														[Field:String]
															[Local field(112500):haxe.macro.Field:haxe.macro.Field]
															[FAnon:String] name:String
													+
													[Call:String]
														[Field:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String]
															[Const:haxe.macro.Printer] this
															[FInstance:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String]
																haxe.macro.Printer
																printFunction:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String
														[Local func(112602):haxe.macro.Function:haxe.macro.Function]
														[Const:Null<haxe.macro.FunctionKind>] null
								[Case:String]
									[Const:Int] 2
									[Block:String]
										[Var `4(112603):Null<haxe.macro.Expr>]
											[EnumParameter:Null<haxe.macro.Expr>]
												[Local `(112596):haxe.macro.FieldType:haxe.macro.FieldType]
												FProp
												3
										[Var `3(112604):Null<haxe.macro.ComplexType>]
											[EnumParameter:Null<haxe.macro.ComplexType>]
												[Local `(112596):haxe.macro.FieldType:haxe.macro.FieldType]
												FProp
												2
										[Var `2(112605):String]
											[EnumParameter:String]
												[Local `(112596):haxe.macro.FieldType:haxe.macro.FieldType]
												FProp
												1
										[Var `1(112606):String]
											[EnumParameter:String]
												[Local `(112596):haxe.macro.FieldType:haxe.macro.FieldType]
												FProp
												0
										[Block:String]
											[Var eo(112607):Null<haxe.macro.Expr>] [Local `4(112603):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
											[Var t(112608):Null<haxe.macro.ComplexType>] [Local `3(112604):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
											[Var set(112609):String] [Local `2(112605):String:String]
											[Var get(112610):String] [Local `1(112606):String:String]
											[Block:String]
												[Binop:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Binop:String]
																		[Binop:String]
																			[Binop:String]
																				[Const:String] "var "
																				+
																				[Field:String]
																					[Local field(112500):haxe.macro.Field:haxe.macro.Field]
																					[FAnon:String] name:String
																			+
																			[Const:String] "("
																		+
																		[Local get(112610):String:String]
																	+
																	[Const:String] ", "
																+
																[Local set(112609):String:String]
															+
															[Const:String] ")"
														+
														[Call:String]
															[Field:(v : Null<haxe.macro.ComplexType>, f : (Null<haxe.macro.ComplexType> -> String), ?prefix : String) -> String]
																[Const:haxe.macro.Printer] this
																[FInstance:(v : Null<haxe.macro.ComplexType>, f : (Null<haxe.macro.ComplexType> -> String), ?prefix : String) -> String]
																	haxe.macro.Printer
																	opt:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String
															[Local t(112608):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
															[Field:(ct : haxe.macro.ComplexType) -> String]
																[Const:haxe.macro.Printer] this
																[FClosure:(ct : haxe.macro.ComplexType) -> String]
																	haxe.macro.Printer
																	printComplexType:(ct : haxe.macro.ComplexType) -> String
															[Const:String] " : "
													+
													[Call:String]
														[Field:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
															[Const:haxe.macro.Printer] this
															[FInstance:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
																haxe.macro.Printer
																opt:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String
														[Local eo(112607):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
														[Field:(e : haxe.macro.Expr) -> String]
															[Const:haxe.macro.Printer] this
															[FClosure:(e : haxe.macro.Expr) -> String]
																haxe.macro.Printer
																printExpr:(e : haxe.macro.Expr) -> String
														[Const:String] " = "

	public function printTypeParamDecl[Function:(tpd : haxe.macro.TypeParamDecl) -> String]
		[Arg:haxe.macro.TypeParamDecl] [Local tpd(112558):haxe.macro.TypeParamDecl]
		[Return:Dynamic]
			[Binop:String]
				[Binop:String]
					[Field:String]
						[Local tpd(112558):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
						[FAnon:String] name:String
					+
					[Parenthesis:String]
						[If:String]
							[Binop:Bool]
								[Binop:Bool]
									[Field:Null<Array<haxe.macro.TypeParamDecl>>]
										[Local tpd(112558):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
										[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
									!=
									[Const:Null<Array<haxe.macro.TypeParamDecl>>] null
								&&
								[Binop:Bool]
									[Field:Int]
										[Field:Null<Array<haxe.macro.TypeParamDecl>>]
											[Local tpd(112558):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
											[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
										[FInstance:Int]
											Array<haxe.macro.TypeParamDecl>
											length:Int
									>
									[Const:Int] 0
							[Then:String] [Block:String]
								[Binop:String]
									[Binop:String]
										[Const:String] "<"
										+
										[Call:String]
											[Field:(sep : String) -> String]
												[Block:Array<String>]
													[Var _this(112560):Null<Array<haxe.macro.TypeParamDecl>>]
														[Field:Null<Array<haxe.macro.TypeParamDecl>>]
															[Local tpd(112558):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
															[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
													[Var f(112561):haxe.macro.TypeParamDecl -> String]
														[Field:(tpd : haxe.macro.TypeParamDecl) -> String]
															[Const:haxe.macro.Printer] this
															[FClosure:(tpd : haxe.macro.TypeParamDecl) -> String]
																haxe.macro.Printer
																printTypeParamDecl:(tpd : haxe.macro.TypeParamDecl) -> String
													[Block:Array<String>]
														[Var `(112562):Array<String>] [ArrayDecl:Array<String>]
														[Block:Void]
															[Var `1(112563):Int] [Const:Int] 0
															[Var `2(112564):Array<haxe.macro.TypeParamDecl>] [Local _this(112560):Null<Array<haxe.macro.TypeParamDecl>>:Array<haxe.macro.TypeParamDecl>]
															[While:Void]
																[Binop:Bool]
																	[Local `1(112563):Int:Int]
																	<
																	[Field:Int]
																		[Local `2(112564):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																		[FInstance:Int]
																			Array<haxe.macro.TypeParamDecl>
																			length:Int
																[Block:Void]
																	[Var v(112565):haxe.macro.TypeParamDecl]
																		[Array:haxe.macro.TypeParamDecl]
																			[Local `2(112564):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																			[Local `1(112563):Int:Int]
																	[Unop:Int]
																		++
																		Prefix
																		[Local `1(112563):Int:Int]
																	[Call:Int]
																		[Field:(x : String) -> Int]
																			[Local `(112562):Array<String>:Array<String>]
																			[FInstance:(x : String) -> Int]
																				Array<String>
																				push:(x : Array.T) -> Int
																		[Call:String]
																			[Local f(112561):haxe.macro.TypeParamDecl -> String:haxe.macro.TypeParamDecl -> String]
																			[Local v(112565):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
														[Local `(112562):Array<String>:Array<String>]
												[FInstance:(sep : String) -> String]
													Array<String>
													join:(sep : String) -> String
											[Const:String] ", "
									+
									[Const:String] ">"
							[Else:String] [Block:String] [Const:String] ""
				+
				[Parenthesis:String]
					[If:String]
						[Binop:Bool]
							[Binop:Bool]
								[Field:Null<Array<haxe.macro.ComplexType>>]
									[Local tpd(112558):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
									[FAnon:Null<Array<haxe.macro.ComplexType>>] constraints:Null<Array<haxe.macro.ComplexType>>
								!=
								[Const:Null<Array<haxe.macro.ComplexType>>] null
							&&
							[Binop:Bool]
								[Field:Int]
									[Field:Null<Array<haxe.macro.ComplexType>>]
										[Local tpd(112558):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
										[FAnon:Null<Array<haxe.macro.ComplexType>>] constraints:Null<Array<haxe.macro.ComplexType>>
									[FInstance:Int]
										Array<haxe.macro.ComplexType>
										length:Int
								>
								[Const:Int] 0
						[Then:String] [Block:String]
							[Binop:String]
								[Binop:String]
									[Const:String] ":("
									+
									[Call:String]
										[Field:(sep : String) -> String]
											[Block:Array<String>]
												[Var _this(112567):Null<Array<haxe.macro.ComplexType>>]
													[Field:Null<Array<haxe.macro.ComplexType>>]
														[Local tpd(112558):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
														[FAnon:Null<Array<haxe.macro.ComplexType>>] constraints:Null<Array<haxe.macro.ComplexType>>
												[Var f(112568):haxe.macro.ComplexType -> String]
													[Field:(ct : haxe.macro.ComplexType) -> String]
														[Const:haxe.macro.Printer] this
														[FClosure:(ct : haxe.macro.ComplexType) -> String]
															haxe.macro.Printer
															printComplexType:(ct : haxe.macro.ComplexType) -> String
												[Block:Array<String>]
													[Var `(112569):Array<String>] [ArrayDecl:Array<String>]
													[Block:Void]
														[Var `1(112570):Int] [Const:Int] 0
														[Var `2(112571):Array<haxe.macro.ComplexType>] [Local _this(112567):Null<Array<haxe.macro.ComplexType>>:Array<haxe.macro.ComplexType>]
														[While:Void]
															[Binop:Bool]
																[Local `1(112570):Int:Int]
																<
																[Field:Int]
																	[Local `2(112571):Array<haxe.macro.ComplexType>:Array<haxe.macro.ComplexType>]
																	[FInstance:Int]
																		Array<haxe.macro.ComplexType>
																		length:Int
															[Block:Void]
																[Var v(112572):haxe.macro.ComplexType]
																	[Array:haxe.macro.ComplexType]
																		[Local `2(112571):Array<haxe.macro.ComplexType>:Array<haxe.macro.ComplexType>]
																		[Local `1(112570):Int:Int]
																[Unop:Int]
																	++
																	Prefix
																	[Local `1(112570):Int:Int]
																[Call:Int]
																	[Field:(x : String) -> Int]
																		[Local `(112569):Array<String>:Array<String>]
																		[FInstance:(x : String) -> Int]
																			Array<String>
																			push:(x : Array.T) -> Int
																	[Call:String]
																		[Local f(112568):haxe.macro.ComplexType -> String:haxe.macro.ComplexType -> String]
																		[Local v(112572):haxe.macro.ComplexType:haxe.macro.ComplexType]
													[Local `(112569):Array<String>:Array<String>]
											[FInstance:(sep : String) -> String]
												Array<String>
												join:(sep : String) -> String
										[Const:String] ", "
								+
								[Const:String] ")"
						[Else:String] [Block:String] [Const:String] ""

	public function printFunctionArg[Function:(arg : haxe.macro.FunctionArg) -> String]
		[Arg:haxe.macro.FunctionArg] [Local arg(112580):haxe.macro.FunctionArg]
		[Return:Dynamic]
			[Binop:String]
				[Binop:String]
					[Binop:String]
						[Parenthesis:String]
							[If:String]
								[Field:Null<Bool>]
									[Local arg(112580):haxe.macro.FunctionArg:haxe.macro.FunctionArg]
									[FAnon:Null<Bool>] opt:Null<Bool>
								[Then:String] [Block:String] [Const:String] "?"
								[Else:String] [Block:String] [Const:String] ""
						+
						[Field:String]
							[Local arg(112580):haxe.macro.FunctionArg:haxe.macro.FunctionArg]
							[FAnon:String] name:String
					+
					[Call:String]
						[Field:(v : Null<haxe.macro.ComplexType>, f : (Null<haxe.macro.ComplexType> -> String), ?prefix : String) -> String]
							[Const:haxe.macro.Printer] this
							[FInstance:(v : Null<haxe.macro.ComplexType>, f : (Null<haxe.macro.ComplexType> -> String), ?prefix : String) -> String]
								haxe.macro.Printer
								opt:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String
						[Field:Null<haxe.macro.ComplexType>]
							[Local arg(112580):haxe.macro.FunctionArg:haxe.macro.FunctionArg]
							[FAnon:Null<haxe.macro.ComplexType>] type:Null<haxe.macro.ComplexType>
						[Field:(ct : haxe.macro.ComplexType) -> String]
							[Const:haxe.macro.Printer] this
							[FClosure:(ct : haxe.macro.ComplexType) -> String]
								haxe.macro.Printer
								printComplexType:(ct : haxe.macro.ComplexType) -> String
						[Const:String] ":"
				+
				[Call:String]
					[Field:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
						[Const:haxe.macro.Printer] this
						[FInstance:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
							haxe.macro.Printer
							opt:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String
					[Field:Null<haxe.macro.Expr>]
						[Local arg(112580):haxe.macro.FunctionArg:haxe.macro.FunctionArg]
						[FAnon:Null<haxe.macro.Expr>] value:Null<haxe.macro.Expr>
					[Field:(e : haxe.macro.Expr) -> String]
						[Const:haxe.macro.Printer] this
						[FClosure:(e : haxe.macro.Expr) -> String]
							haxe.macro.Printer
							printExpr:(e : haxe.macro.Expr) -> String
					[Const:String] " = "

	public function printFunction[Function:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String]
		[Arg:haxe.macro.Function] [Local func(112541):haxe.macro.Function]
		[Arg:Null<haxe.macro.FunctionKind>]
			[Local kind(112542):Null<haxe.macro.FunctionKind>]
			[Const:Null<haxe.macro.FunctionKind>] null
		[Block:Dynamic]
			[Var skipParentheses(112557):Bool]
				[Meta:Bool]
					:ast(switch func.args {
	case [{ type : null }]:
		kind == FArrow;	
	case _:
		false;	
})
					[Block:Bool]
						[Var `(112550):Array<haxe.macro.FunctionArg>]
							[Field:Array<haxe.macro.FunctionArg>]
								[Local func(112541):haxe.macro.Function:haxe.macro.Function]
								[FAnon:Array<haxe.macro.FunctionArg>] args:Array<haxe.macro.FunctionArg>
						[If:Bool]
							[Binop:Bool]
								[Field:Int]
									[Local `(112550):Array<haxe.macro.FunctionArg>:Array<haxe.macro.FunctionArg>]
									[FInstance:Int]
										Array<haxe.macro.FunctionArg>
										length:Int
								==
								[Const:Int] 1
							[Then:Bool] [Block:Bool]
								[Var `1(112551):haxe.macro.FunctionArg]
									[Array:haxe.macro.FunctionArg]
										[Local `(112550):Array<haxe.macro.FunctionArg>:Array<haxe.macro.FunctionArg>]
										[Const:Int] 0
								[Block:Bool]
									[Var `6(112552):Null<haxe.macro.Expr>]
										[Field:Null<haxe.macro.Expr>]
											[Local `1(112551):haxe.macro.FunctionArg:haxe.macro.FunctionArg]
											[FAnon:Null<haxe.macro.Expr>] value:Null<haxe.macro.Expr>
									[Var `5(112553):Null<haxe.macro.ComplexType>]
										[Field:Null<haxe.macro.ComplexType>]
											[Local `1(112551):haxe.macro.FunctionArg:haxe.macro.FunctionArg]
											[FAnon:Null<haxe.macro.ComplexType>] type:Null<haxe.macro.ComplexType>
									[Var `4(112554):Null<Bool>]
										[Field:Null<Bool>]
											[Local `1(112551):haxe.macro.FunctionArg:haxe.macro.FunctionArg]
											[FAnon:Null<Bool>] opt:Null<Bool>
									[Var `3(112555):String]
										[Field:String]
											[Local `1(112551):haxe.macro.FunctionArg:haxe.macro.FunctionArg]
											[FAnon:String] name:String
									[Var `2(112556):Null<haxe.macro.Metadata>]
										[Field:Null<haxe.macro.Metadata>]
											[Local `1(112551):haxe.macro.FunctionArg:haxe.macro.FunctionArg]
											[FAnon:Null<haxe.macro.Metadata>] meta:Null<haxe.macro.Metadata>
									[If:Bool]
										[Binop:Bool]
											[Local `5(112553):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
											==
											[Const:Null<haxe.macro.ComplexType>] null
										[Then:Bool] [Block:Bool]
											[Binop:Bool]
												[Local kind(112542):Null<haxe.macro.FunctionKind>:Null<haxe.macro.FunctionKind>]
												==
												[Field:haxe.macro.FunctionKind]
													[TypeExpr haxe.macro.FunctionKind:Enum<haxe.macro.FunctionKind>]
													[FEnum:haxe.macro.FunctionKind]
														haxe.macro.FunctionKind
														FArrow
										[Else:Bool] [Block:Bool] [Const:Bool] false
							[Else:Bool] [Block:Bool] [Const:Bool] false
			[Return:Dynamic]
				[Binop:String]
					[Binop:String]
						[Binop:String]
							[Binop:String]
								[Binop:String]
									[Binop:String]
										[Parenthesis:String]
											[If:String]
												[Binop:Bool]
													[Field:Null<Array<haxe.macro.TypeParamDecl>>]
														[Local func(112541):haxe.macro.Function:haxe.macro.Function]
														[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
													==
													[Const:Null<Array<haxe.macro.TypeParamDecl>>] null
												[Then:String] [Block:String] [Const:String] ""
												[Else:String] [Block:String]
													[If:String]
														[Binop:Bool]
															[Field:Int]
																[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																	[Local func(112541):haxe.macro.Function:haxe.macro.Function]
																	[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																[FInstance:Int]
																	Array<haxe.macro.TypeParamDecl>
																	length:Int
															>
															[Const:Int] 0
														[Then:String] [Block:String]
															[Binop:String]
																[Binop:String]
																	[Const:String] "<"
																	+
																	[Call:String]
																		[Field:(sep : String) -> String]
																			[Block:Array<String>]
																				[Var _this(112574):Null<Array<haxe.macro.TypeParamDecl>>]
																					[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																						[Local func(112541):haxe.macro.Function:haxe.macro.Function]
																						[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																				[Var f(112575):haxe.macro.TypeParamDecl -> String]
																					[Field:(tpd : haxe.macro.TypeParamDecl) -> String]
																						[Const:haxe.macro.Printer] this
																						[FClosure:(tpd : haxe.macro.TypeParamDecl) -> String]
																							haxe.macro.Printer
																							printTypeParamDecl:(tpd : haxe.macro.TypeParamDecl) -> String
																				[Block:Array<String>]
																					[Var `(112576):Array<String>] [ArrayDecl:Array<String>]
																					[Block:Void]
																						[Var `1(112577):Int] [Const:Int] 0
																						[Var `2(112578):Array<haxe.macro.TypeParamDecl>] [Local _this(112574):Null<Array<haxe.macro.TypeParamDecl>>:Array<haxe.macro.TypeParamDecl>]
																						[While:Void]
																							[Binop:Bool]
																								[Local `1(112577):Int:Int]
																								<
																								[Field:Int]
																									[Local `2(112578):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																									[FInstance:Int]
																										Array<haxe.macro.TypeParamDecl>
																										length:Int
																							[Block:Void]
																								[Var v(112579):haxe.macro.TypeParamDecl]
																									[Array:haxe.macro.TypeParamDecl]
																										[Local `2(112578):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																										[Local `1(112577):Int:Int]
																								[Unop:Int]
																									++
																									Prefix
																									[Local `1(112577):Int:Int]
																								[Call:Int]
																									[Field:(x : String) -> Int]
																										[Local `(112576):Array<String>:Array<String>]
																										[FInstance:(x : String) -> Int]
																											Array<String>
																											push:(x : Array.T) -> Int
																									[Call:String]
																										[Local f(112575):haxe.macro.TypeParamDecl -> String:haxe.macro.TypeParamDecl -> String]
																										[Local v(112579):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
																					[Local `(112576):Array<String>:Array<String>]
																			[FInstance:(sep : String) -> String]
																				Array<String>
																				join:(sep : String) -> String
																		[Const:String] ", "
																+
																[Const:String] ">"
														[Else:String] [Block:String] [Const:String] ""
										+
										[Parenthesis:String]
											[If:String]
												[Local skipParentheses(112557):Bool:Bool]
												[Then:String] [Block:String] [Const:String] ""
												[Else:String] [Block:String] [Const:String] "("
									+
									[Call:String]
										[Field:(sep : String) -> String]
											[Block:Array<String>]
												[Var _this(112582):Array<haxe.macro.FunctionArg>]
													[Field:Array<haxe.macro.FunctionArg>]
														[Local func(112541):haxe.macro.Function:haxe.macro.Function]
														[FAnon:Array<haxe.macro.FunctionArg>] args:Array<haxe.macro.FunctionArg>
												[Var f(112583):haxe.macro.FunctionArg -> String]
													[Field:(arg : haxe.macro.FunctionArg) -> String]
														[Const:haxe.macro.Printer] this
														[FClosure:(arg : haxe.macro.FunctionArg) -> String]
															haxe.macro.Printer
															printFunctionArg:(arg : haxe.macro.FunctionArg) -> String
												[Block:Array<String>]
													[Var `(112584):Array<String>] [ArrayDecl:Array<String>]
													[Block:Void]
														[Var `1(112585):Int] [Const:Int] 0
														[Var `2(112586):Array<haxe.macro.FunctionArg>] [Local _this(112582):Array<haxe.macro.FunctionArg>:Array<haxe.macro.FunctionArg>]
														[While:Void]
															[Binop:Bool]
																[Local `1(112585):Int:Int]
																<
																[Field:Int]
																	[Local `2(112586):Array<haxe.macro.FunctionArg>:Array<haxe.macro.FunctionArg>]
																	[FInstance:Int]
																		Array<haxe.macro.FunctionArg>
																		length:Int
															[Block:Void]
																[Var v(112587):haxe.macro.FunctionArg]
																	[Array:haxe.macro.FunctionArg]
																		[Local `2(112586):Array<haxe.macro.FunctionArg>:Array<haxe.macro.FunctionArg>]
																		[Local `1(112585):Int:Int]
																[Unop:Int]
																	++
																	Prefix
																	[Local `1(112585):Int:Int]
																[Call:Int]
																	[Field:(x : String) -> Int]
																		[Local `(112584):Array<String>:Array<String>]
																		[FInstance:(x : String) -> Int]
																			Array<String>
																			push:(x : Array.T) -> Int
																	[Call:String]
																		[Local f(112583):haxe.macro.FunctionArg -> String:haxe.macro.FunctionArg -> String]
																		[Local v(112587):haxe.macro.FunctionArg:haxe.macro.FunctionArg]
													[Local `(112584):Array<String>:Array<String>]
											[FInstance:(sep : String) -> String]
												Array<String>
												join:(sep : String) -> String
										[Const:String] ", "
								+
								[Parenthesis:String]
									[If:String]
										[Local skipParentheses(112557):Bool:Bool]
										[Then:String] [Block:String] [Const:String] ""
										[Else:String] [Block:String] [Const:String] ")"
							+
							[Parenthesis:String]
								[If:String]
									[Binop:Bool]
										[Local kind(112542):Null<haxe.macro.FunctionKind>:Null<haxe.macro.FunctionKind>]
										==
										[Field:haxe.macro.FunctionKind]
											[TypeExpr haxe.macro.FunctionKind:Enum<haxe.macro.FunctionKind>]
											[FEnum:haxe.macro.FunctionKind]
												haxe.macro.FunctionKind
												FArrow
									[Then:String] [Block:String] [Const:String] " ->"
									[Else:String] [Block:String] [Const:String] ""
						+
						[Call:String]
							[Field:(v : Null<haxe.macro.ComplexType>, f : (Null<haxe.macro.ComplexType> -> String), ?prefix : String) -> String]
								[Const:haxe.macro.Printer] this
								[FInstance:(v : Null<haxe.macro.ComplexType>, f : (Null<haxe.macro.ComplexType> -> String), ?prefix : String) -> String]
									haxe.macro.Printer
									opt:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String
							[Field:Null<haxe.macro.ComplexType>]
								[Local func(112541):haxe.macro.Function:haxe.macro.Function]
								[FAnon:Null<haxe.macro.ComplexType>] ret:Null<haxe.macro.ComplexType>
							[Field:(ct : haxe.macro.ComplexType) -> String]
								[Const:haxe.macro.Printer] this
								[FClosure:(ct : haxe.macro.ComplexType) -> String]
									haxe.macro.Printer
									printComplexType:(ct : haxe.macro.ComplexType) -> String
							[Const:String] ":"
					+
					[Call:String]
						[Field:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
							[Const:haxe.macro.Printer] this
							[FInstance:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
								haxe.macro.Printer
								opt:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String
						[Field:Null<haxe.macro.Expr>]
							[Local func(112541):haxe.macro.Function:haxe.macro.Function]
							[FAnon:Null<haxe.macro.Expr>] expr:Null<haxe.macro.Expr>
						[Field:(e : haxe.macro.Expr) -> String]
							[Const:haxe.macro.Printer] this
							[FClosure:(e : haxe.macro.Expr) -> String]
								haxe.macro.Printer
								printExpr:(e : haxe.macro.Expr) -> String
						[Const:String] " "

	public function printVar[Function:(v : haxe.macro.Var) -> String]
		[Arg:haxe.macro.Var] [Local v(112731):haxe.macro.Var]
		[Return:Dynamic]
			[Binop:String]
				[Binop:String]
					[Field:String]
						[Local v(112731):haxe.macro.Var:haxe.macro.Var]
						[FAnon:String] name:String
					+
					[Call:String]
						[Field:(v : Null<haxe.macro.ComplexType>, f : (Null<haxe.macro.ComplexType> -> String), ?prefix : String) -> String]
							[Const:haxe.macro.Printer] this
							[FInstance:(v : Null<haxe.macro.ComplexType>, f : (Null<haxe.macro.ComplexType> -> String), ?prefix : String) -> String]
								haxe.macro.Printer
								opt:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String
						[Field:Null<haxe.macro.ComplexType>]
							[Local v(112731):haxe.macro.Var:haxe.macro.Var]
							[FAnon:Null<haxe.macro.ComplexType>] type:Null<haxe.macro.ComplexType>
						[Field:(ct : haxe.macro.ComplexType) -> String]
							[Const:haxe.macro.Printer] this
							[FClosure:(ct : haxe.macro.ComplexType) -> String]
								haxe.macro.Printer
								printComplexType:(ct : haxe.macro.ComplexType) -> String
						[Const:String] ":"
				+
				[Call:String]
					[Field:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
						[Const:haxe.macro.Printer] this
						[FInstance:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
							haxe.macro.Printer
							opt:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String
					[Field:Null<haxe.macro.Expr>]
						[Local v(112731):haxe.macro.Var:haxe.macro.Var]
						[FAnon:Null<haxe.macro.Expr>] expr:Null<haxe.macro.Expr>
					[Field:(e : haxe.macro.Expr) -> String]
						[Const:haxe.macro.Printer] this
						[FClosure:(e : haxe.macro.Expr) -> String]
							haxe.macro.Printer
							printExpr:(e : haxe.macro.Expr) -> String
					[Const:String] " = "

	public function printObjectFieldKey[Function:(of : haxe.macro.ObjectField) -> String]
		[Arg:haxe.macro.ObjectField] [Local of(112440):haxe.macro.ObjectField]
		[Block:Dynamic]
			[Return:Dynamic]
				[Meta:String]
					:ast(switch (of.quotes) {
	case null | Unquoted:
		of.field;	
	case Quoted:
		"\"${of.field}\"";	
})
					[Block:String]
						[Var `(112442):Null<haxe.macro.QuoteStatus>]
							[Field:Null<haxe.macro.QuoteStatus>]
								[Local of(112440):haxe.macro.ObjectField:haxe.macro.ObjectField]
								[FAnon:Null<haxe.macro.QuoteStatus>] quotes:Null<haxe.macro.QuoteStatus>
						[If:String]
							[Binop:Bool]
								[Local `(112442):Null<haxe.macro.QuoteStatus>:Null<haxe.macro.QuoteStatus>]
								==
								[Const:Null<haxe.macro.QuoteStatus>] null
							[Then:String] [Block:String]
								[Field:String]
									[Local of(112440):haxe.macro.ObjectField:haxe.macro.ObjectField]
									[FAnon:String] field:String
							[Else:String] [Switch:String]
								[Meta:Int]
									:exhaustive
									[EnumIndex:Int] [Local `(112442):Null<haxe.macro.QuoteStatus>:Null<haxe.macro.QuoteStatus>]
								[Case:String]
									[Const:Int] 0
									[Block:String]
										[Block:String]
											[Field:String]
												[Local of(112440):haxe.macro.ObjectField:haxe.macro.ObjectField]
												[FAnon:String] field:String
								[Case:String]
									[Const:Int] 1
									[Block:String]
										[Block:String]
											[Binop:String]
												[Binop:String]
													[Const:String] "\""
													+
													[Field:String]
														[Local of(112440):haxe.macro.ObjectField:haxe.macro.ObjectField]
														[FAnon:String] field:String
												+
												[Const:String] "\""

	public function printObjectField[Function:(of : haxe.macro.ObjectField) -> String]
		[Arg:haxe.macro.ObjectField] [Local of(112439):haxe.macro.ObjectField]
		[Block:Dynamic]
			[Return:Dynamic]
				[Binop:String]
					[Binop:String]
						[Binop:String]
							[Const:String] ""
							+
							[Call:String]
								[Field:(of : haxe.macro.ObjectField) -> String]
									[Const:haxe.macro.Printer] this
									[FInstance:(of : haxe.macro.ObjectField) -> String]
										haxe.macro.Printer
										printObjectFieldKey:(of : haxe.macro.ObjectField) -> String
								[Local of(112439):haxe.macro.ObjectField:haxe.macro.ObjectField]
						+
						[Const:String] " : "
					+
					[Call:String]
						[Field:(e : haxe.macro.Expr) -> String]
							[Const:haxe.macro.Printer] this
							[FInstance:(e : haxe.macro.Expr) -> String]
								haxe.macro.Printer
								printExpr:(e : haxe.macro.Expr) -> String
						[Field:haxe.macro.Expr]
							[Local of(112439):haxe.macro.ObjectField:haxe.macro.ObjectField]
							[FAnon:haxe.macro.Expr] expr:haxe.macro.Expr

	public function printExpr[Function:(e : haxe.macro.Expr) -> String]
		[Arg:haxe.macro.Expr] [Local e(112387):haxe.macro.Expr]
		[Block:Dynamic]
			[Var `this(112438):haxe.macro.Printer] [Const:haxe.macro.Printer] this
			[Return:Dynamic]
				[If:String]
					[Binop:Bool]
						[Local e(112387):haxe.macro.Expr:haxe.macro.Expr]
						==
						[Const:haxe.macro.Expr] null
					[Then:String] [Block:String] [Const:String] "#NULL"
					[Else:String] [Block:String]
						[Meta:String]
							:ast(switch (e.expr) {
	case EConst(CString(s)):
		haxe.macro.MacroStringTools.isFormatExpr(e) ? printFormatString(s) : printString(s);	
	case EConst(c):
		printConstant(c);	
	case EArray(e1, e2):
		"${printExpr(e1)}[${printExpr(e2)}]";	
	case EBinop(op, e1, e2):
		"${printExpr(e1)} ${printBinop(op)} ${printExpr(e2)}";	
	case EField(e1, n):
		"${printExpr(e1)}.$n";	
	case EParenthesis(e1):
		"(${printExpr(e1)})";	
	case EObjectDecl(fl):
		"{ " + fl.map(function(fld) return printObjectField(fld)).join(", ") + " }";	
	case EArrayDecl(el):
		"[${printExprs(el, \", \")}]";	
	case ECall(e1, el):
		"${printExpr(e1)}(${printExprs(el, \", \")})";	
	case ENew(tp, el):
		"new ${printTypePath(tp)}(${printExprs(el, \", \")})";	
	case EUnop(op, true, e1):
		printExpr(e1) + printUnop(op);	
	case EUnop(op, false, e1):
		printUnop(op) + printExpr(e1);	
	case EFunction(FNamed(no, inlined), func):
		(inlined ? "inline " : "") + "function $no" + printFunction(func);	
	case EFunction(kind, func):
		(kind != FArrow ? "function" : "") + printFunction(func, kind);	
	case EVars(vl):
		"var " + vl.map(printVar).join(", ");	
	case EBlock([]):
		"{ }";	
	case EBlock(el):
		var old = tabs;
		tabs += tabString;
		var s = "{\n$tabs" + printExprs(el, ";\n$tabs");
		tabs = old;
		s + ";\n$tabs}";	
	case EFor(e1, e2):
		"for (${printExpr(e1)}) ${printExpr(e2)}";	
	case EIf(econd, eif, null):
		"if (${printExpr(econd)}) ${printExpr(eif)}";	
	case EIf(econd, eif, eelse):
		"if (${printExpr(econd)}) ${printExpr(eif)} else ${printExpr(eelse)}";	
	case EWhile(econd, e1, true):
		"while (${printExpr(econd)}) ${printExpr(e1)}";	
	case EWhile(econd, e1, false):
		"do ${printExpr(e1)} while (${printExpr(econd)})";	
	case ESwitch(e1, cl, edef):
		var old = tabs;
		tabs += tabString;
		var s = "switch ${printExpr(e1)} {\n$tabs" + cl.map(function(c) return "case ${printExprs(c.values, \", \")}" + (c.guard != null ? " if (${printExpr(c.guard)}):" : ":") + (c.expr != null ? (opt(c.expr, printExpr)) + ";" : "")).join("\n$tabs");
		if (edef != null) s += "\n${tabs}default:" + (edef.expr == null ? "" : printExpr(edef) + ";");
		tabs = old;
		s + "\n$tabs}";	
	case ETry(e1, cl):
		"try ${printExpr(e1)}" + cl.map(function(c) return " catch(${c.name}${c.type == null ? '' : (':' + printComplexType(c.type))}) ${printExpr(c.expr)}").join("");	
	case EReturn(eo):
		"return" + opt(eo, printExpr, " ");	
	case EBreak:
		"break";	
	case EContinue:
		"continue";	
	case EUntyped(e1):
		"untyped " + printExpr(e1);	
	case EThrow(e1):
		"throw " + printExpr(e1);	
	case ECast(e1, cto) if (cto != null):
		"cast(${printExpr(e1)}, ${printComplexType(cto)})";	
	case ECast(e1, _):
		"cast " + printExpr(e1);	
	case EDisplay(e1, _):
		"#DISPLAY(${printExpr(e1)})";	
	case EDisplayNew(tp):
		"#DISPLAY(${printTypePath(tp)})";	
	case ETernary(econd, eif, eelse):
		"${printExpr(econd)} ? ${printExpr(eif)} : ${printExpr(eelse)}";	
	case ECheckType(e1, ct):
		"(${printExpr(e1)} : ${printComplexType(ct)})";	
	case EMeta({ name : ":implicitReturn" }, { expr : EReturn(e1) }):
		printExpr(e1);	
	case EMeta(meta, e1):
		printMetadata(meta) + " " + printExpr(e1);	
})
							[Block:String]
								[Var `(112858):haxe.macro.ExprDef]
									[Field:haxe.macro.ExprDef]
										[Local e(112387):haxe.macro.Expr:haxe.macro.Expr]
										[FAnon:haxe.macro.ExprDef] expr:haxe.macro.ExprDef
								[Switch:String]
									[Meta:Int]
										:exhaustive
										[EnumIndex:Int] [Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
									[Case:String]
										[Const:Int] 0
										[Block:String]
											[Var `56(112859):haxe.macro.Constant]
												[EnumParameter:haxe.macro.Constant]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EConst
													0
											[If:String]
												[Binop:Bool]
													[EnumIndex:Int] [Local `56(112859):haxe.macro.Constant:haxe.macro.Constant]
													==
													[Const:Int] 2
												[Then:String] [Block:String]
													[Var `58(112860):Null<haxe.macro.StringLiteralKind>]
														[EnumParameter:Null<haxe.macro.StringLiteralKind>]
															[Local `56(112859):haxe.macro.Constant:haxe.macro.Constant]
															CString
															1
													[Var `57(112861):String]
														[EnumParameter:String]
															[Local `56(112859):haxe.macro.Constant:haxe.macro.Constant]
															CString
															0
													[Block:String]
														[Var s(112862):String] [Local `57(112861):String:String]
														[Block:String]
															[If:String]
																[Call:Bool]
																	[Field:(e : haxe.macro.ExprOf<String>) -> Bool]
																		[TypeExpr haxe.macro.MacroStringTools:Class<haxe.macro.MacroStringTools>]
																		[FStatic:(e : haxe.macro.ExprOf<String>) -> Bool]
																			haxe.macro.MacroStringTools
																			isFormatExpr:(e : haxe.macro.ExprOf<String>) -> Bool
																	[Local e(112387):haxe.macro.Expr:haxe.macro.Expr]
																[Then:String] [Block:String]
																	[Call:String]
																		[Field:(s : String) -> String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:(s : String) -> String]
																				haxe.macro.Printer
																				printFormatString:(s : String) -> String
																		[Local s(112862):String:String]
																[Else:String] [Block:String]
																	[Call:String]
																		[Field:(s : String) -> String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:(s : String) -> String]
																				haxe.macro.Printer
																				printString:(s : String) -> String
																		[Local s(112862):String:String]
												[Else:String] [Block:String]
													[Var c(112863):haxe.macro.Constant] [Local `56(112859):haxe.macro.Constant:haxe.macro.Constant]
													[Block:String]
														[Call:String]
															[Field:(c : haxe.macro.Constant) -> String]
																[Const:haxe.macro.Printer] this
																[FInstance:(c : haxe.macro.Constant) -> String]
																	haxe.macro.Printer
																	printConstant:(c : haxe.macro.Constant) -> String
															[Local c(112863):haxe.macro.Constant:haxe.macro.Constant]
									[Case:String]
										[Const:Int] 1
										[Block:String]
											[Var `44(112864):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EArray
													1
											[Var `43(112865):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EArray
													0
											[Block:String]
												[Var e2(112866):haxe.macro.Expr] [Local `44(112864):haxe.macro.Expr:haxe.macro.Expr]
												[Var e1(112867):haxe.macro.Expr] [Local `43(112865):haxe.macro.Expr:haxe.macro.Expr]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Const:String] ""
																	+
																	[Call:String]
																		[Field:(e : haxe.macro.Expr) -> String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:(e : haxe.macro.Expr) -> String]
																				haxe.macro.Printer
																				printExpr:(e : haxe.macro.Expr) -> String
																		[Local e1(112867):haxe.macro.Expr:haxe.macro.Expr]
																+
																[Const:String] "["
															+
															[Call:String]
																[Field:(e : haxe.macro.Expr) -> String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:(e : haxe.macro.Expr) -> String]
																		haxe.macro.Printer
																		printExpr:(e : haxe.macro.Expr) -> String
																[Local e2(112866):haxe.macro.Expr:haxe.macro.Expr]
														+
														[Const:String] "]"
									[Case:String]
										[Const:Int] 2
										[Block:String]
											[Var `52(112868):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EBinop
													2
											[Var `51(112869):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EBinop
													1
											[Var `50(112870):haxe.macro.Binop]
												[EnumParameter:haxe.macro.Binop]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EBinop
													0
											[Block:String]
												[Var e2(112871):haxe.macro.Expr] [Local `52(112868):haxe.macro.Expr:haxe.macro.Expr]
												[Var e1(112872):haxe.macro.Expr] [Local `51(112869):haxe.macro.Expr:haxe.macro.Expr]
												[Var op(112873):haxe.macro.Binop] [Local `50(112870):haxe.macro.Binop:haxe.macro.Binop]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Binop:String]
																		[Const:String] ""
																		+
																		[Call:String]
																			[Field:(e : haxe.macro.Expr) -> String]
																				[Const:haxe.macro.Printer] this
																				[FInstance:(e : haxe.macro.Expr) -> String]
																					haxe.macro.Printer
																					printExpr:(e : haxe.macro.Expr) -> String
																			[Local e1(112872):haxe.macro.Expr:haxe.macro.Expr]
																	+
																	[Const:String] " "
																+
																[Call:String]
																	[Field:(op : haxe.macro.Binop) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(op : haxe.macro.Binop) -> String]
																			haxe.macro.Printer
																			printBinop:(op : haxe.macro.Binop) -> String
																	[Local op(112873):haxe.macro.Binop:haxe.macro.Binop]
															+
															[Const:String] " "
														+
														[Call:String]
															[Field:(e : haxe.macro.Expr) -> String]
																[Const:haxe.macro.Printer] this
																[FInstance:(e : haxe.macro.Expr) -> String]
																	haxe.macro.Printer
																	printExpr:(e : haxe.macro.Expr) -> String
															[Local e2(112871):haxe.macro.Expr:haxe.macro.Expr]
									[Case:String]
										[Const:Int] 3
										[Block:String]
											[Var `46(112874):String]
												[EnumParameter:String]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EField
													1
											[Var `45(112875):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EField
													0
											[Block:String]
												[Var n(112876):String] [Local `46(112874):String:String]
												[Var e1(112877):haxe.macro.Expr] [Local `45(112875):haxe.macro.Expr:haxe.macro.Expr]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Const:String] ""
																+
																[Call:String]
																	[Field:(e : haxe.macro.Expr) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(e : haxe.macro.Expr) -> String]
																			haxe.macro.Printer
																			printExpr:(e : haxe.macro.Expr) -> String
																	[Local e1(112877):haxe.macro.Expr:haxe.macro.Expr]
															+
															[Const:String] "."
														+
														[Local n(112876):String:String]
									[Case:String]
										[Const:Int] 4
										[Block:String]
											[Var `6(112878):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EParenthesis
													0
											[Block:String]
												[Var e1(112879):haxe.macro.Expr] [Local `6(112878):haxe.macro.Expr:haxe.macro.Expr]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Const:String] "("
															+
															[Call:String]
																[Field:(e : haxe.macro.Expr) -> String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:(e : haxe.macro.Expr) -> String]
																		haxe.macro.Printer
																		printExpr:(e : haxe.macro.Expr) -> String
																[Local e1(112879):haxe.macro.Expr:haxe.macro.Expr]
														+
														[Const:String] ")"
									[Case:String]
										[Const:Int] 5
										[Block:String]
											[Var `1(112880):Array<haxe.macro.ObjectField>]
												[EnumParameter:Array<haxe.macro.ObjectField>]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EObjectDecl
													0
											[Block:String]
												[Var fl(112881):Array<haxe.macro.ObjectField>] [Local `1(112880):Array<haxe.macro.ObjectField>:Array<haxe.macro.ObjectField>]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Const:String] "{ "
															+
															[Call:String]
																[Field:(sep : String) -> String]
																	[Block:Array<String>]
																		[Var `(112882):Array<String>] [ArrayDecl:Array<String>]
																		[Block:Void]
																			[Var `1(112883):Int] [Const:Int] 0
																			[Var `2(112884):Array<haxe.macro.ObjectField>] [Local fl(112881):Array<haxe.macro.ObjectField>:Array<haxe.macro.ObjectField>]
																			[While:Void]
																				[Binop:Bool]
																					[Local `1(112883):Int:Int]
																					<
																					[Field:Int]
																						[Local `2(112884):Array<haxe.macro.ObjectField>:Array<haxe.macro.ObjectField>]
																						[FInstance:Int]
																							Array<haxe.macro.ObjectField>
																							length:Int
																				[Block:Void]
																					[Var v(112885):haxe.macro.ObjectField]
																						[Array:haxe.macro.ObjectField]
																							[Local `2(112884):Array<haxe.macro.ObjectField>:Array<haxe.macro.ObjectField>]
																							[Local `1(112883):Int:Int]
																					[Unop:Int]
																						++
																						Prefix
																						[Local `1(112883):Int:Int]
																					[Call:Int]
																						[Field:(x : String) -> Int]
																							[Local `(112882):Array<String>:Array<String>]
																							[FInstance:(x : String) -> Int]
																								Array<String>
																								push:(x : Array.T) -> Int
																						[Call:String]
																							[Function:(fld : haxe.macro.ObjectField) -> String]
																								[Arg:haxe.macro.ObjectField] [Local fld(112886):haxe.macro.ObjectField]
																								[Block:Dynamic]
																									[Return:Dynamic]
																										[Call:String]
																											[Field:(of : haxe.macro.ObjectField) -> String]
																												[Local `this(112438):haxe.macro.Printer:haxe.macro.Printer]
																												[FInstance:(of : haxe.macro.ObjectField) -> String]
																													haxe.macro.Printer
																													printObjectField:(of : haxe.macro.ObjectField) -> String
																											[Local fld(112886):haxe.macro.ObjectField:haxe.macro.ObjectField]
																							[Local v(112885):haxe.macro.ObjectField:haxe.macro.ObjectField]
																		[Local `(112882):Array<String>:Array<String>]
																	[FInstance:(sep : String) -> String]
																		Array<String>
																		join:(sep : String) -> String
																[Const:String] ", "
														+
														[Const:String] " }"
									[Case:String]
										[Const:Int] 6
										[Block:String]
											[Var `47(112887):Array<haxe.macro.Expr>]
												[EnumParameter:Array<haxe.macro.Expr>]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EArrayDecl
													0
											[Block:String]
												[Var el(112888):Array<haxe.macro.Expr>] [Local `47(112887):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Const:String] "["
															+
															[Call:String]
																[Field:(el : Array<haxe.macro.Expr>, sep : String) -> String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:(el : Array<haxe.macro.Expr>, sep : String) -> String]
																		haxe.macro.Printer
																		printExprs:(el : Array<haxe.macro.Expr>, sep : String) -> String
																[Local el(112888):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
																[Const:String] ", "
														+
														[Const:String] "]"
									[Case:String]
										[Const:Int] 7
										[Block:String]
											[Var `3(112889):Array<haxe.macro.Expr>]
												[EnumParameter:Array<haxe.macro.Expr>]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ECall
													1
											[Var `2(112890):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ECall
													0
											[Block:String]
												[Var el(112891):Array<haxe.macro.Expr>] [Local `3(112889):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
												[Var e1(112892):haxe.macro.Expr] [Local `2(112890):haxe.macro.Expr:haxe.macro.Expr]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Const:String] ""
																	+
																	[Call:String]
																		[Field:(e : haxe.macro.Expr) -> String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:(e : haxe.macro.Expr) -> String]
																				haxe.macro.Printer
																				printExpr:(e : haxe.macro.Expr) -> String
																		[Local e1(112892):haxe.macro.Expr:haxe.macro.Expr]
																+
																[Const:String] "("
															+
															[Call:String]
																[Field:(el : Array<haxe.macro.Expr>, sep : String) -> String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:(el : Array<haxe.macro.Expr>, sep : String) -> String]
																		haxe.macro.Printer
																		printExprs:(el : Array<haxe.macro.Expr>, sep : String) -> String
																[Local el(112891):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
																[Const:String] ", "
														+
														[Const:String] ")"
									[Case:String]
										[Const:Int] 8
										[Block:String]
											[Var `8(112893):Array<haxe.macro.Expr>]
												[EnumParameter:Array<haxe.macro.Expr>]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ENew
													1
											[Var `7(112894):haxe.macro.TypePath]
												[EnumParameter:haxe.macro.TypePath]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ENew
													0
											[Block:String]
												[Var el(112895):Array<haxe.macro.Expr>] [Local `8(112893):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
												[Var tp(112896):haxe.macro.TypePath] [Local `7(112894):haxe.macro.TypePath:haxe.macro.TypePath]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Const:String] "new "
																	+
																	[Call:String]
																		[Field:(tp : haxe.macro.TypePath) -> String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:(tp : haxe.macro.TypePath) -> String]
																				haxe.macro.Printer
																				printTypePath:(tp : haxe.macro.TypePath) -> String
																		[Local tp(112896):haxe.macro.TypePath:haxe.macro.TypePath]
																+
																[Const:String] "("
															+
															[Call:String]
																[Field:(el : Array<haxe.macro.Expr>, sep : String) -> String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:(el : Array<haxe.macro.Expr>, sep : String) -> String]
																		haxe.macro.Printer
																		printExprs:(el : Array<haxe.macro.Expr>, sep : String) -> String
																[Local el(112895):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
																[Const:String] ", "
														+
														[Const:String] ")"
									[Case:String]
										[Const:Int] 9
										[Block:String]
											[Var `26(112897):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EUnop
													2
											[Var `25(112898):Bool]
												[EnumParameter:Bool]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EUnop
													1
											[Var `24(112899):haxe.macro.Unop]
												[EnumParameter:haxe.macro.Unop]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EUnop
													0
											[If:String]
												[Local `25(112898):Bool:Bool]
												[Then:String] [Block:String]
													[Block:String]
														[Var e1(112900):haxe.macro.Expr] [Local `26(112897):haxe.macro.Expr:haxe.macro.Expr]
														[Var op(112901):haxe.macro.Unop] [Local `24(112899):haxe.macro.Unop:haxe.macro.Unop]
														[Block:String]
															[Binop:String]
																[Call:String]
																	[Field:(e : haxe.macro.Expr) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(e : haxe.macro.Expr) -> String]
																			haxe.macro.Printer
																			printExpr:(e : haxe.macro.Expr) -> String
																	[Local e1(112900):haxe.macro.Expr:haxe.macro.Expr]
																+
																[Call:String]
																	[Field:(op : haxe.macro.Unop) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(op : haxe.macro.Unop) -> String]
																			haxe.macro.Printer
																			printUnop:(op : haxe.macro.Unop) -> String
																	[Local op(112901):haxe.macro.Unop:haxe.macro.Unop]
												[Else:String] [Block:String]
													[Block:String]
														[Var e1(112902):haxe.macro.Expr] [Local `26(112897):haxe.macro.Expr:haxe.macro.Expr]
														[Var op(112903):haxe.macro.Unop] [Local `24(112899):haxe.macro.Unop:haxe.macro.Unop]
														[Block:String]
															[Binop:String]
																[Call:String]
																	[Field:(op : haxe.macro.Unop) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(op : haxe.macro.Unop) -> String]
																			haxe.macro.Printer
																			printUnop:(op : haxe.macro.Unop) -> String
																	[Local op(112903):haxe.macro.Unop:haxe.macro.Unop]
																+
																[Call:String]
																	[Field:(e : haxe.macro.Expr) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(e : haxe.macro.Expr) -> String]
																			haxe.macro.Printer
																			printExpr:(e : haxe.macro.Expr) -> String
																	[Local e1(112902):haxe.macro.Expr:haxe.macro.Expr]
									[Case:String]
										[Const:Int] 10
										[Block:String]
											[Var `39(112904):Array<haxe.macro.Var>]
												[EnumParameter:Array<haxe.macro.Var>]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EVars
													0
											[Block:String]
												[Var vl(112905):Array<haxe.macro.Var>] [Local `39(112904):Array<haxe.macro.Var>:Array<haxe.macro.Var>]
												[Block:String]
													[Binop:String]
														[Const:String] "var "
														+
														[Call:String]
															[Field:(sep : String) -> String]
																[Block:Array<String>]
																	[Var f(112906):haxe.macro.Var -> String]
																		[Field:(v : haxe.macro.Var) -> String]
																			[Const:haxe.macro.Printer] this
																			[FClosure:(v : haxe.macro.Var) -> String]
																				haxe.macro.Printer
																				printVar:(v : haxe.macro.Var) -> String
																	[Block:Array<String>]
																		[Var `(112907):Array<String>] [ArrayDecl:Array<String>]
																		[Block:Void]
																			[Var `1(112908):Int] [Const:Int] 0
																			[Var `2(112909):Array<haxe.macro.Var>] [Local vl(112905):Array<haxe.macro.Var>:Array<haxe.macro.Var>]
																			[While:Void]
																				[Binop:Bool]
																					[Local `1(112908):Int:Int]
																					<
																					[Field:Int]
																						[Local `2(112909):Array<haxe.macro.Var>:Array<haxe.macro.Var>]
																						[FInstance:Int]
																							Array<haxe.macro.Var>
																							length:Int
																				[Block:Void]
																					[Var v(112910):haxe.macro.Var]
																						[Array:haxe.macro.Var]
																							[Local `2(112909):Array<haxe.macro.Var>:Array<haxe.macro.Var>]
																							[Local `1(112908):Int:Int]
																					[Unop:Int]
																						++
																						Prefix
																						[Local `1(112908):Int:Int]
																					[Call:Int]
																						[Field:(x : String) -> Int]
																							[Local `(112907):Array<String>:Array<String>]
																							[FInstance:(x : String) -> Int]
																								Array<String>
																								push:(x : Array.T) -> Int
																						[Call:String]
																							[Local f(112906):haxe.macro.Var -> String:haxe.macro.Var -> String]
																							[Local v(112910):haxe.macro.Var:haxe.macro.Var]
																		[Local `(112907):Array<String>:Array<String>]
																[FInstance:(sep : String) -> String]
																	Array<String>
																	join:(sep : String) -> String
															[Const:String] ", "
									[Case:String]
										[Const:Int] 11
										[Block:String]
											[Var `28(112911):haxe.macro.Function]
												[EnumParameter:haxe.macro.Function]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EFunction
													1
											[Var `27(112912):Null<haxe.macro.FunctionKind>]
												[EnumParameter:Null<haxe.macro.FunctionKind>]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EFunction
													0
											[If:String]
												[Binop:Bool]
													[Local `27(112912):Null<haxe.macro.FunctionKind>:Null<haxe.macro.FunctionKind>]
													==
													[Const:Null<haxe.macro.FunctionKind>] null
												[Then:String] [Block:String]
													[Var func(112913):haxe.macro.Function] [Local `28(112911):haxe.macro.Function:haxe.macro.Function]
													[Var kind(112914):Null<haxe.macro.FunctionKind>] [Local `27(112912):Null<haxe.macro.FunctionKind>:Null<haxe.macro.FunctionKind>]
													[Block:String]
														[Binop:String]
															[Parenthesis:String]
																[If:String]
																	[Binop:Bool]
																		[Local kind(112914):Null<haxe.macro.FunctionKind>:Null<haxe.macro.FunctionKind>]
																		!=
																		[Field:haxe.macro.FunctionKind]
																			[TypeExpr haxe.macro.FunctionKind:Enum<haxe.macro.FunctionKind>]
																			[FEnum:haxe.macro.FunctionKind]
																				haxe.macro.FunctionKind
																				FArrow
																	[Then:String] [Block:String] [Const:String] "function"
																	[Else:String] [Block:String] [Const:String] ""
															+
															[Call:String]
																[Field:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String]
																		haxe.macro.Printer
																		printFunction:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String
																[Local func(112913):haxe.macro.Function:haxe.macro.Function]
																[Local kind(112914):Null<haxe.macro.FunctionKind>:Null<haxe.macro.FunctionKind>]
												[Else:String] [If:String]
													[Binop:Bool]
														[EnumIndex:Int] [Local `27(112912):Null<haxe.macro.FunctionKind>:Null<haxe.macro.FunctionKind>]
														==
														[Const:Int] 1
													[Then:String] [Block:String]
														[Var `30(112915):Null<Bool>]
															[EnumParameter:Null<Bool>]
																[Local `27(112912):Null<haxe.macro.FunctionKind>:Null<haxe.macro.FunctionKind>]
																FNamed
																1
														[Var `29(112916):String]
															[EnumParameter:String]
																[Local `27(112912):Null<haxe.macro.FunctionKind>:Null<haxe.macro.FunctionKind>]
																FNamed
																0
														[Block:String]
															[Var func(112917):haxe.macro.Function] [Local `28(112911):haxe.macro.Function:haxe.macro.Function]
															[Var inlined(112918):Null<Bool>] [Local `30(112915):Null<Bool>:Null<Bool>]
															[Var no(112919):String] [Local `29(112916):String:String]
															[Block:String]
																[Binop:String]
																	[Binop:String]
																		[Parenthesis:String]
																			[If:String]
																				[Local inlined(112918):Null<Bool>:Null<Bool>]
																				[Then:String] [Block:String] [Const:String] "inline "
																				[Else:String] [Block:String] [Const:String] ""
																		+
																		[Binop:String]
																			[Const:String] "function "
																			+
																			[Local no(112919):String:String]
																	+
																	[Call:String]
																		[Field:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String]
																				haxe.macro.Printer
																				printFunction:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String
																		[Local func(112917):haxe.macro.Function:haxe.macro.Function]
																		[Const:Null<haxe.macro.FunctionKind>] null
													[Else:String] [Block:String]
														[Var func(112920):haxe.macro.Function] [Local `28(112911):haxe.macro.Function:haxe.macro.Function]
														[Var kind(112921):Null<haxe.macro.FunctionKind>] [Local `27(112912):Null<haxe.macro.FunctionKind>:Null<haxe.macro.FunctionKind>]
														[Block:String]
															[Binop:String]
																[Parenthesis:String]
																	[If:String]
																		[Binop:Bool]
																			[Local kind(112921):Null<haxe.macro.FunctionKind>:Null<haxe.macro.FunctionKind>]
																			!=
																			[Field:haxe.macro.FunctionKind]
																				[TypeExpr haxe.macro.FunctionKind:Enum<haxe.macro.FunctionKind>]
																				[FEnum:haxe.macro.FunctionKind]
																					haxe.macro.FunctionKind
																					FArrow
																		[Then:String] [Block:String] [Const:String] "function"
																		[Else:String] [Block:String] [Const:String] ""
																+
																[Call:String]
																	[Field:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String]
																			haxe.macro.Printer
																			printFunction:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String
																	[Local func(112920):haxe.macro.Function:haxe.macro.Function]
																	[Local kind(112921):Null<haxe.macro.FunctionKind>:Null<haxe.macro.FunctionKind>]
									[Case:String]
										[Const:Int] 12
										[Block:String]
											[Var `31(112922):Array<haxe.macro.Expr>]
												[EnumParameter:Array<haxe.macro.Expr>]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EBlock
													0
											[If:String]
												[Binop:Bool]
													[Field:Int]
														[Local `31(112922):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
														[FInstance:Int]
															Array<haxe.macro.Expr>
															length:Int
													==
													[Const:Int] 0
												[Then:String] [Block:String] [Block:String] [Const:String] "{ }"
												[Else:String] [Block:String]
													[Var el(112923):Array<haxe.macro.Expr>] [Local `31(112922):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
													[Block:String]
														[Var old(112924):String]
															[Field:String]
																[Const:haxe.macro.Printer] this
																[FInstance:String]
																	haxe.macro.Printer
																	tabs:String
														[Binop:String]
															[Field:String]
																[Const:haxe.macro.Printer] this
																[FInstance:String]
																	haxe.macro.Printer
																	tabs:String
															+=
															[Field:String]
																[Const:haxe.macro.Printer] this
																[FInstance:String]
																	haxe.macro.Printer
																	tabString:String
														[Var s(112925):String]
															[Binop:String]
																[Binop:String]
																	[Const:String] "{\n"
																	+
																	[Field:String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:String]
																			haxe.macro.Printer
																			tabs:String
																+
																[Call:String]
																	[Field:(el : Array<haxe.macro.Expr>, sep : String) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(el : Array<haxe.macro.Expr>, sep : String) -> String]
																			haxe.macro.Printer
																			printExprs:(el : Array<haxe.macro.Expr>, sep : String) -> String
																	[Local el(112923):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
																	[Binop:String]
																		[Const:String] ";\n"
																		+
																		[Field:String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:String]
																				haxe.macro.Printer
																				tabs:String
														[Binop:String]
															[Field:String]
																[Const:haxe.macro.Printer] this
																[FInstance:String]
																	haxe.macro.Printer
																	tabs:String
															=
															[Local old(112924):String:String]
														[Binop:String]
															[Local s(112925):String:String]
															+
															[Binop:String]
																[Binop:String]
																	[Const:String] ";\n"
																	+
																	[Field:String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:String]
																			haxe.macro.Printer
																			tabs:String
																+
																[Const:String] "}"
									[Case:String]
										[Const:Int] 13
										[Block:String]
											[Var `10(112926):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EFor
													1
											[Var `9(112927):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EFor
													0
											[Block:String]
												[Var e2(112928):haxe.macro.Expr] [Local `10(112926):haxe.macro.Expr:haxe.macro.Expr]
												[Var e1(112929):haxe.macro.Expr] [Local `9(112927):haxe.macro.Expr:haxe.macro.Expr]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Const:String] "for ("
																+
																[Call:String]
																	[Field:(e : haxe.macro.Expr) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(e : haxe.macro.Expr) -> String]
																			haxe.macro.Printer
																			printExpr:(e : haxe.macro.Expr) -> String
																	[Local e1(112929):haxe.macro.Expr:haxe.macro.Expr]
															+
															[Const:String] ") "
														+
														[Call:String]
															[Field:(e : haxe.macro.Expr) -> String]
																[Const:haxe.macro.Printer] this
																[FInstance:(e : haxe.macro.Expr) -> String]
																	haxe.macro.Printer
																	printExpr:(e : haxe.macro.Expr) -> String
															[Local e2(112928):haxe.macro.Expr:haxe.macro.Expr]
									[Case:String]
										[Const:Int] 14
										[Block:String]
											[Var `13(112930):Null<haxe.macro.Expr>]
												[EnumParameter:Null<haxe.macro.Expr>]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EIf
													2
											[Var `12(112931):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EIf
													1
											[Var `11(112932):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EIf
													0
											[If:String]
												[Binop:Bool]
													[Local `13(112930):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
													==
													[Const:Null<haxe.macro.Expr>] null
												[Then:String] [Block:String]
													[Var econd(112933):haxe.macro.Expr] [Local `11(112932):haxe.macro.Expr:haxe.macro.Expr]
													[Var eif(112934):haxe.macro.Expr] [Local `12(112931):haxe.macro.Expr:haxe.macro.Expr]
													[Block:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Const:String] "if ("
																	+
																	[Call:String]
																		[Field:(e : haxe.macro.Expr) -> String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:(e : haxe.macro.Expr) -> String]
																				haxe.macro.Printer
																				printExpr:(e : haxe.macro.Expr) -> String
																		[Local econd(112933):haxe.macro.Expr:haxe.macro.Expr]
																+
																[Const:String] ") "
															+
															[Call:String]
																[Field:(e : haxe.macro.Expr) -> String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:(e : haxe.macro.Expr) -> String]
																		haxe.macro.Printer
																		printExpr:(e : haxe.macro.Expr) -> String
																[Local eif(112934):haxe.macro.Expr:haxe.macro.Expr]
												[Else:String] [Block:String]
													[Var econd(112935):haxe.macro.Expr] [Local `11(112932):haxe.macro.Expr:haxe.macro.Expr]
													[Var eif(112936):haxe.macro.Expr] [Local `12(112931):haxe.macro.Expr:haxe.macro.Expr]
													[Var eelse(112937):Null<haxe.macro.Expr>] [Local `13(112930):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
													[Block:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Binop:String]
																		[Binop:String]
																			[Const:String] "if ("
																			+
																			[Call:String]
																				[Field:(e : haxe.macro.Expr) -> String]
																					[Const:haxe.macro.Printer] this
																					[FInstance:(e : haxe.macro.Expr) -> String]
																						haxe.macro.Printer
																						printExpr:(e : haxe.macro.Expr) -> String
																				[Local econd(112935):haxe.macro.Expr:haxe.macro.Expr]
																		+
																		[Const:String] ") "
																	+
																	[Call:String]
																		[Field:(e : haxe.macro.Expr) -> String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:(e : haxe.macro.Expr) -> String]
																				haxe.macro.Printer
																				printExpr:(e : haxe.macro.Expr) -> String
																		[Local eif(112936):haxe.macro.Expr:haxe.macro.Expr]
																+
																[Const:String] " else "
															+
															[Call:String]
																[Field:(e : haxe.macro.Expr) -> String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:(e : haxe.macro.Expr) -> String]
																		haxe.macro.Printer
																		printExpr:(e : haxe.macro.Expr) -> String
																[Local eelse(112937):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
									[Case:String]
										[Const:Int] 15
										[Block:String]
											[Var `42(112938):Bool]
												[EnumParameter:Bool]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EWhile
													2
											[Var `41(112939):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EWhile
													1
											[Var `40(112940):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EWhile
													0
											[If:String]
												[Local `42(112938):Bool:Bool]
												[Then:String] [Block:String]
													[Block:String]
														[Var econd(112941):haxe.macro.Expr] [Local `40(112940):haxe.macro.Expr:haxe.macro.Expr]
														[Var e1(112942):haxe.macro.Expr] [Local `41(112939):haxe.macro.Expr:haxe.macro.Expr]
														[Block:String]
															[Binop:String]
																[Binop:String]
																	[Binop:String]
																		[Const:String] "while ("
																		+
																		[Call:String]
																			[Field:(e : haxe.macro.Expr) -> String]
																				[Const:haxe.macro.Printer] this
																				[FInstance:(e : haxe.macro.Expr) -> String]
																					haxe.macro.Printer
																					printExpr:(e : haxe.macro.Expr) -> String
																			[Local econd(112941):haxe.macro.Expr:haxe.macro.Expr]
																	+
																	[Const:String] ") "
																+
																[Call:String]
																	[Field:(e : haxe.macro.Expr) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(e : haxe.macro.Expr) -> String]
																			haxe.macro.Printer
																			printExpr:(e : haxe.macro.Expr) -> String
																	[Local e1(112942):haxe.macro.Expr:haxe.macro.Expr]
												[Else:String] [Block:String]
													[Block:String]
														[Var econd(112943):haxe.macro.Expr] [Local `40(112940):haxe.macro.Expr:haxe.macro.Expr]
														[Var e1(112944):haxe.macro.Expr] [Local `41(112939):haxe.macro.Expr:haxe.macro.Expr]
														[Block:String]
															[Binop:String]
																[Binop:String]
																	[Binop:String]
																		[Binop:String]
																			[Const:String] "do "
																			+
																			[Call:String]
																				[Field:(e : haxe.macro.Expr) -> String]
																					[Const:haxe.macro.Printer] this
																					[FInstance:(e : haxe.macro.Expr) -> String]
																						haxe.macro.Printer
																						printExpr:(e : haxe.macro.Expr) -> String
																				[Local e1(112944):haxe.macro.Expr:haxe.macro.Expr]
																		+
																		[Const:String] " while ("
																	+
																	[Call:String]
																		[Field:(e : haxe.macro.Expr) -> String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:(e : haxe.macro.Expr) -> String]
																				haxe.macro.Printer
																				printExpr:(e : haxe.macro.Expr) -> String
																		[Local econd(112943):haxe.macro.Expr:haxe.macro.Expr]
																+
																[Const:String] ")"
									[Case:String]
										[Const:Int] 16
										[Block:String]
											[Var `38(112945):Null<haxe.macro.Expr>]
												[EnumParameter:Null<haxe.macro.Expr>]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ESwitch
													2
											[Var `37(112946):Array<haxe.macro.Case>]
												[EnumParameter:Array<haxe.macro.Case>]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ESwitch
													1
											[Var `36(112947):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ESwitch
													0
											[Block:String]
												[Var edef(112948):Null<haxe.macro.Expr>] [Local `38(112945):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
												[Var cl(112949):Array<haxe.macro.Case>] [Local `37(112946):Array<haxe.macro.Case>:Array<haxe.macro.Case>]
												[Var e1(112950):haxe.macro.Expr] [Local `36(112947):haxe.macro.Expr:haxe.macro.Expr]
												[Block:String]
													[Var old(112951):String]
														[Field:String]
															[Const:haxe.macro.Printer] this
															[FInstance:String]
																haxe.macro.Printer
																tabs:String
													[Binop:String]
														[Field:String]
															[Const:haxe.macro.Printer] this
															[FInstance:String]
																haxe.macro.Printer
																tabs:String
														+=
														[Field:String]
															[Const:haxe.macro.Printer] this
															[FInstance:String]
																haxe.macro.Printer
																tabString:String
													[Var s(112952):String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Binop:String]
																		[Const:String] "switch "
																		+
																		[Call:String]
																			[Field:(e : haxe.macro.Expr) -> String]
																				[Const:haxe.macro.Printer] this
																				[FInstance:(e : haxe.macro.Expr) -> String]
																					haxe.macro.Printer
																					printExpr:(e : haxe.macro.Expr) -> String
																			[Local e1(112950):haxe.macro.Expr:haxe.macro.Expr]
																	+
																	[Const:String] " {\n"
																+
																[Field:String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:String]
																		haxe.macro.Printer
																		tabs:String
															+
															[Call:String]
																[Field:(sep : String) -> String]
																	[Block:Array<String>]
																		[Var `(112953):Array<String>] [ArrayDecl:Array<String>]
																		[Block:Void]
																			[Var `1(112954):Int] [Const:Int] 0
																			[Var `2(112955):Array<haxe.macro.Case>] [Local cl(112949):Array<haxe.macro.Case>:Array<haxe.macro.Case>]
																			[While:Void]
																				[Binop:Bool]
																					[Local `1(112954):Int:Int]
																					<
																					[Field:Int]
																						[Local `2(112955):Array<haxe.macro.Case>:Array<haxe.macro.Case>]
																						[FInstance:Int]
																							Array<haxe.macro.Case>
																							length:Int
																				[Block:Void]
																					[Var v(112956):haxe.macro.Case]
																						[Array:haxe.macro.Case]
																							[Local `2(112955):Array<haxe.macro.Case>:Array<haxe.macro.Case>]
																							[Local `1(112954):Int:Int]
																					[Unop:Int]
																						++
																						Prefix
																						[Local `1(112954):Int:Int]
																					[Call:Int]
																						[Field:(x : String) -> Int]
																							[Local `(112953):Array<String>:Array<String>]
																							[FInstance:(x : String) -> Int]
																								Array<String>
																								push:(x : Array.T) -> Int
																						[Call:String]
																							[Function:(c : haxe.macro.Case) -> String]
																								[Arg:haxe.macro.Case] [Local c(112957):haxe.macro.Case]
																								[Block:Dynamic]
																									[Return:Dynamic]
																										[Binop:String]
																											[Binop:String]
																												[Binop:String]
																													[Const:String] "case "
																													+
																													[Call:String]
																														[Field:(el : Array<haxe.macro.Expr>, sep : String) -> String]
																															[Local `this(112438):haxe.macro.Printer:haxe.macro.Printer]
																															[FInstance:(el : Array<haxe.macro.Expr>, sep : String) -> String]
																																haxe.macro.Printer
																																printExprs:(el : Array<haxe.macro.Expr>, sep : String) -> String
																														[Field:Array<haxe.macro.Expr>]
																															[Local c(112957):haxe.macro.Case:haxe.macro.Case]
																															[FAnon:Array<haxe.macro.Expr>] values:Array<haxe.macro.Expr>
																														[Const:String] ", "
																												+
																												[Parenthesis:String]
																													[If:String]
																														[Parenthesis:Bool]
																															[Binop:Bool]
																																[Field:Null<haxe.macro.Expr>]
																																	[Local c(112957):haxe.macro.Case:haxe.macro.Case]
																																	[FAnon:Null<haxe.macro.Expr>] guard:Null<haxe.macro.Expr>
																																!=
																																[Const:Null<haxe.macro.Expr>] null
																														[Then:String] [Binop:String]
																															[Binop:String]
																																[Const:String] " if ("
																																+
																																[Call:String]
																																	[Field:(e : haxe.macro.Expr) -> String]
																																		[Local `this(112438):haxe.macro.Printer:haxe.macro.Printer]
																																		[FInstance:(e : haxe.macro.Expr) -> String]
																																			haxe.macro.Printer
																																			printExpr:(e : haxe.macro.Expr) -> String
																																	[Field:Null<haxe.macro.Expr>]
																																		[Local c(112957):haxe.macro.Case:haxe.macro.Case]
																																		[FAnon:Null<haxe.macro.Expr>] guard:Null<haxe.macro.Expr>
																															+
																															[Const:String] "):"
																														[Else:String] [Const:String] ":"
																											+
																											[Parenthesis:String]
																												[If:String]
																													[Parenthesis:Bool]
																														[Binop:Bool]
																															[Field:Null<haxe.macro.Expr>]
																																[Local c(112957):haxe.macro.Case:haxe.macro.Case]
																																[FAnon:Null<haxe.macro.Expr>] expr:Null<haxe.macro.Expr>
																															!=
																															[Const:Null<haxe.macro.Expr>] null
																													[Then:String] [Binop:String]
																														[Call:String]
																															[Field:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
																																[Local `this(112438):haxe.macro.Printer:haxe.macro.Printer]
																																[FInstance:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
																																	haxe.macro.Printer
																																	opt:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String
																															[Field:Null<haxe.macro.Expr>]
																																[Local c(112957):haxe.macro.Case:haxe.macro.Case]
																																[FAnon:Null<haxe.macro.Expr>] expr:Null<haxe.macro.Expr>
																															[Field:(e : haxe.macro.Expr) -> String]
																																[Local `this(112438):haxe.macro.Printer:haxe.macro.Printer]
																																[FClosure:(e : haxe.macro.Expr) -> String]
																																	haxe.macro.Printer
																																	printExpr:(e : haxe.macro.Expr) -> String
																															[Const:Null<String>] null
																														+
																														[Const:String] ";"
																													[Else:String] [Const:String] ""
																							[Local v(112956):haxe.macro.Case:haxe.macro.Case]
																		[Local `(112953):Array<String>:Array<String>]
																	[FInstance:(sep : String) -> String]
																		Array<String>
																		join:(sep : String) -> String
																[Binop:String]
																	[Const:String] "\n"
																	+
																	[Field:String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:String]
																			haxe.macro.Printer
																			tabs:String
													[If:Void]
														[Binop:Bool]
															[Local edef(112948):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
															!=
															[Const:Null<haxe.macro.Expr>] null
														[Then:String] [Block:String]
															[Binop:String]
																[Local s(112952):String:String]
																+=
																[Binop:String]
																	[Binop:String]
																		[Binop:String]
																			[Const:String] "\n"
																			+
																			[Field:String]
																				[Const:haxe.macro.Printer] this
																				[FInstance:String]
																					haxe.macro.Printer
																					tabs:String
																		+
																		[Const:String] "default:"
																	+
																	[Parenthesis:String]
																		[If:String]
																			[Binop:Bool]
																				[Field:haxe.macro.ExprDef]
																					[Local edef(112948):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
																					[FAnon:haxe.macro.ExprDef] expr:haxe.macro.ExprDef
																				==
																				[Const:haxe.macro.ExprDef] null
																			[Then:String] [Block:String] [Const:String] ""
																			[Else:String] [Block:String]
																				[Binop:String]
																					[Call:String]
																						[Field:(e : haxe.macro.Expr) -> String]
																							[Const:haxe.macro.Printer] this
																							[FInstance:(e : haxe.macro.Expr) -> String]
																								haxe.macro.Printer
																								printExpr:(e : haxe.macro.Expr) -> String
																						[Local edef(112948):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
																					+
																					[Const:String] ";"
													[Binop:String]
														[Field:String]
															[Const:haxe.macro.Printer] this
															[FInstance:String]
																haxe.macro.Printer
																tabs:String
														=
														[Local old(112951):String:String]
													[Binop:String]
														[Local s(112952):String:String]
														+
														[Binop:String]
															[Binop:String]
																[Const:String] "\n"
																+
																[Field:String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:String]
																		haxe.macro.Printer
																		tabs:String
															+
															[Const:String] "}"
									[Case:String]
										[Const:Int] 17
										[Block:String]
											[Var `35(112958):Array<haxe.macro.Catch>]
												[EnumParameter:Array<haxe.macro.Catch>]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ETry
													1
											[Var `34(112959):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ETry
													0
											[Block:String]
												[Var cl(112960):Array<haxe.macro.Catch>] [Local `35(112958):Array<haxe.macro.Catch>:Array<haxe.macro.Catch>]
												[Var e1(112961):haxe.macro.Expr] [Local `34(112959):haxe.macro.Expr:haxe.macro.Expr]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Const:String] "try "
															+
															[Call:String]
																[Field:(e : haxe.macro.Expr) -> String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:(e : haxe.macro.Expr) -> String]
																		haxe.macro.Printer
																		printExpr:(e : haxe.macro.Expr) -> String
																[Local e1(112961):haxe.macro.Expr:haxe.macro.Expr]
														+
														[Call:String]
															[Field:(sep : String) -> String]
																[Block:Array<String>]
																	[Var `(112962):Array<String>] [ArrayDecl:Array<String>]
																	[Block:Void]
																		[Var `1(112963):Int] [Const:Int] 0
																		[Var `2(112964):Array<haxe.macro.Catch>] [Local cl(112960):Array<haxe.macro.Catch>:Array<haxe.macro.Catch>]
																		[While:Void]
																			[Binop:Bool]
																				[Local `1(112963):Int:Int]
																				<
																				[Field:Int]
																					[Local `2(112964):Array<haxe.macro.Catch>:Array<haxe.macro.Catch>]
																					[FInstance:Int]
																						Array<haxe.macro.Catch>
																						length:Int
																			[Block:Void]
																				[Var v(112965):haxe.macro.Catch]
																					[Array:haxe.macro.Catch]
																						[Local `2(112964):Array<haxe.macro.Catch>:Array<haxe.macro.Catch>]
																						[Local `1(112963):Int:Int]
																				[Unop:Int]
																					++
																					Prefix
																					[Local `1(112963):Int:Int]
																				[Call:Int]
																					[Field:(x : String) -> Int]
																						[Local `(112962):Array<String>:Array<String>]
																						[FInstance:(x : String) -> Int]
																							Array<String>
																							push:(x : Array.T) -> Int
																					[Call:String]
																						[Function:(c : haxe.macro.Catch) -> String]
																							[Arg:haxe.macro.Catch] [Local c(112966):haxe.macro.Catch]
																							[Block:Dynamic]
																								[Return:Dynamic]
																									[Binop:String]
																										[Binop:String]
																											[Binop:String]
																												[Binop:String]
																													[Const:String] " catch("
																													+
																													[Field:String]
																														[Local c(112966):haxe.macro.Catch:haxe.macro.Catch]
																														[FAnon:String] name:String
																												+
																												[Parenthesis:String]
																													[If:String]
																														[Parenthesis:Bool]
																															[Binop:Bool]
																																[Field:Null<haxe.macro.ComplexType>]
																																	[Local c(112966):haxe.macro.Catch:haxe.macro.Catch]
																																	[FAnon:Null<haxe.macro.ComplexType>] type:Null<haxe.macro.ComplexType>
																																==
																																[Const:Null<haxe.macro.ComplexType>] null
																														[Then:String] [Const:String] ""
																														[Else:String] [Binop:String]
																															[Const:String] ":"
																															+
																															[Call:String]
																																[Field:(ct : haxe.macro.ComplexType) -> String]
																																	[Local `this(112438):haxe.macro.Printer:haxe.macro.Printer]
																																	[FInstance:(ct : haxe.macro.ComplexType) -> String]
																																		haxe.macro.Printer
																																		printComplexType:(ct : haxe.macro.ComplexType) -> String
																																[Field:Null<haxe.macro.ComplexType>]
																																	[Local c(112966):haxe.macro.Catch:haxe.macro.Catch]
																																	[FAnon:Null<haxe.macro.ComplexType>] type:Null<haxe.macro.ComplexType>
																											+
																											[Const:String] ") "
																										+
																										[Call:String]
																											[Field:(e : haxe.macro.Expr) -> String]
																												[Local `this(112438):haxe.macro.Printer:haxe.macro.Printer]
																												[FInstance:(e : haxe.macro.Expr) -> String]
																													haxe.macro.Printer
																													printExpr:(e : haxe.macro.Expr) -> String
																											[Field:haxe.macro.Expr]
																												[Local c(112966):haxe.macro.Catch:haxe.macro.Catch]
																												[FAnon:haxe.macro.Expr] expr:haxe.macro.Expr
																						[Local v(112965):haxe.macro.Catch:haxe.macro.Catch]
																	[Local `(112962):Array<String>:Array<String>]
																[FInstance:(sep : String) -> String]
																	Array<String>
																	join:(sep : String) -> String
															[Const:String] ""
									[Case:String]
										[Const:Int] 18
										[Block:String]
											[Var `59(112967):Null<haxe.macro.Expr>]
												[EnumParameter:Null<haxe.macro.Expr>]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EReturn
													0
											[Block:String]
												[Var eo(112968):Null<haxe.macro.Expr>] [Local `59(112967):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
												[Block:String]
													[Binop:String]
														[Const:String] "return"
														+
														[Call:String]
															[Field:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
																[Const:haxe.macro.Printer] this
																[FInstance:(v : Null<haxe.macro.Expr>, f : (Null<haxe.macro.Expr> -> String), ?prefix : String) -> String]
																	haxe.macro.Printer
																	opt:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String
															[Local eo(112968):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
															[Field:(e : haxe.macro.Expr) -> String]
																[Const:haxe.macro.Printer] this
																[FClosure:(e : haxe.macro.Expr) -> String]
																	haxe.macro.Printer
																	printExpr:(e : haxe.macro.Expr) -> String
															[Const:String] " "
									[Case:String]
										[Const:Int] 19
										[Block:String] [Block:String] [Const:String] "break"
									[Case:String]
										[Const:Int] 20
										[Block:String] [Block:String] [Const:String] "continue"
									[Case:String]
										[Const:Int] 21
										[Block:String]
											[Var `14(112969):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EUntyped
													0
											[Block:String]
												[Var e1(112970):haxe.macro.Expr] [Local `14(112969):haxe.macro.Expr:haxe.macro.Expr]
												[Block:String]
													[Binop:String]
														[Const:String] "untyped "
														+
														[Call:String]
															[Field:(e : haxe.macro.Expr) -> String]
																[Const:haxe.macro.Printer] this
																[FInstance:(e : haxe.macro.Expr) -> String]
																	haxe.macro.Printer
																	printExpr:(e : haxe.macro.Expr) -> String
															[Local e1(112970):haxe.macro.Expr:haxe.macro.Expr]
									[Case:String]
										[Const:Int] 22
										[Block:String]
											[Var `15(112971):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EThrow
													0
											[Block:String]
												[Var e1(112972):haxe.macro.Expr] [Local `15(112971):haxe.macro.Expr:haxe.macro.Expr]
												[Block:String]
													[Binop:String]
														[Const:String] "throw "
														+
														[Call:String]
															[Field:(e : haxe.macro.Expr) -> String]
																[Const:haxe.macro.Printer] this
																[FInstance:(e : haxe.macro.Expr) -> String]
																	haxe.macro.Printer
																	printExpr:(e : haxe.macro.Expr) -> String
															[Local e1(112972):haxe.macro.Expr:haxe.macro.Expr]
									[Case:String]
										[Const:Int] 23
										[Block:String]
											[Var `5(112973):Null<haxe.macro.ComplexType>]
												[EnumParameter:Null<haxe.macro.ComplexType>]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ECast
													1
											[Var `4(112974):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ECast
													0
											[Block:String]
												[Var cto(112975):Null<haxe.macro.ComplexType>] [Local `5(112973):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
												[Var e1(112976):haxe.macro.Expr] [Local `4(112974):haxe.macro.Expr:haxe.macro.Expr]
												[If:String]
													[Binop:Bool]
														[Local cto(112975):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
														!=
														[Const:Null<haxe.macro.ComplexType>] null
													[Then:String] [Block:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Binop:String]
																		[Const:String] "cast("
																		+
																		[Call:String]
																			[Field:(e : haxe.macro.Expr) -> String]
																				[Const:haxe.macro.Printer] this
																				[FInstance:(e : haxe.macro.Expr) -> String]
																					haxe.macro.Printer
																					printExpr:(e : haxe.macro.Expr) -> String
																			[Local e1(112976):haxe.macro.Expr:haxe.macro.Expr]
																	+
																	[Const:String] ", "
																+
																[Call:String]
																	[Field:(ct : haxe.macro.ComplexType) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(ct : haxe.macro.ComplexType) -> String]
																			haxe.macro.Printer
																			printComplexType:(ct : haxe.macro.ComplexType) -> String
																	[Local cto(112975):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
															+
															[Const:String] ")"
													[Else:String] [Block:String]
														[Var e1(112977):haxe.macro.Expr] [Local `4(112974):haxe.macro.Expr:haxe.macro.Expr]
														[Block:String]
															[Binop:String]
																[Const:String] "cast "
																+
																[Call:String]
																	[Field:(e : haxe.macro.Expr) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(e : haxe.macro.Expr) -> String]
																			haxe.macro.Printer
																			printExpr:(e : haxe.macro.Expr) -> String
																	[Local e1(112977):haxe.macro.Expr:haxe.macro.Expr]
									[Case:String]
										[Const:Int] 24
										[Block:String]
											[Var `49(112978):haxe.macro.DisplayKind]
												[EnumParameter:haxe.macro.DisplayKind]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EDisplay
													1
											[Var `48(112979):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EDisplay
													0
											[Block:String]
												[Var e1(112980):haxe.macro.Expr] [Local `48(112979):haxe.macro.Expr:haxe.macro.Expr]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Const:String] "#DISPLAY("
															+
															[Call:String]
																[Field:(e : haxe.macro.Expr) -> String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:(e : haxe.macro.Expr) -> String]
																		haxe.macro.Printer
																		printExpr:(e : haxe.macro.Expr) -> String
																[Local e1(112980):haxe.macro.Expr:haxe.macro.Expr]
														+
														[Const:String] ")"
									[Case:String]
										[Const:Int] 25
										[Block:String]
											[Var `60(112981):haxe.macro.TypePath]
												[EnumParameter:haxe.macro.TypePath]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EDisplayNew
													0
											[Block:String]
												[Var tp(112982):haxe.macro.TypePath] [Local `60(112981):haxe.macro.TypePath:haxe.macro.TypePath]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Const:String] "#DISPLAY("
															+
															[Call:String]
																[Field:(tp : haxe.macro.TypePath) -> String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:(tp : haxe.macro.TypePath) -> String]
																		haxe.macro.Printer
																		printTypePath:(tp : haxe.macro.TypePath) -> String
																[Local tp(112982):haxe.macro.TypePath:haxe.macro.TypePath]
														+
														[Const:String] ")"
									[Case:String]
										[Const:Int] 26
										[Block:String]
											[Var `55(112983):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ETernary
													2
											[Var `54(112984):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ETernary
													1
											[Var `53(112985):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ETernary
													0
											[Block:String]
												[Var eelse(112986):haxe.macro.Expr] [Local `55(112983):haxe.macro.Expr:haxe.macro.Expr]
												[Var eif(112987):haxe.macro.Expr] [Local `54(112984):haxe.macro.Expr:haxe.macro.Expr]
												[Var econd(112988):haxe.macro.Expr] [Local `53(112985):haxe.macro.Expr:haxe.macro.Expr]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Binop:String]
																		[Const:String] ""
																		+
																		[Call:String]
																			[Field:(e : haxe.macro.Expr) -> String]
																				[Const:haxe.macro.Printer] this
																				[FInstance:(e : haxe.macro.Expr) -> String]
																					haxe.macro.Printer
																					printExpr:(e : haxe.macro.Expr) -> String
																			[Local econd(112988):haxe.macro.Expr:haxe.macro.Expr]
																	+
																	[Const:String] " ? "
																+
																[Call:String]
																	[Field:(e : haxe.macro.Expr) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(e : haxe.macro.Expr) -> String]
																			haxe.macro.Printer
																			printExpr:(e : haxe.macro.Expr) -> String
																	[Local eif(112987):haxe.macro.Expr:haxe.macro.Expr]
															+
															[Const:String] " : "
														+
														[Call:String]
															[Field:(e : haxe.macro.Expr) -> String]
																[Const:haxe.macro.Printer] this
																[FInstance:(e : haxe.macro.Expr) -> String]
																	haxe.macro.Printer
																	printExpr:(e : haxe.macro.Expr) -> String
															[Local eelse(112986):haxe.macro.Expr:haxe.macro.Expr]
									[Case:String]
										[Const:Int] 27
										[Block:String]
											[Var `33(112989):haxe.macro.ComplexType]
												[EnumParameter:haxe.macro.ComplexType]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ECheckType
													1
											[Var `32(112990):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ECheckType
													0
											[Block:String]
												[Var ct(112991):haxe.macro.ComplexType] [Local `33(112989):haxe.macro.ComplexType:haxe.macro.ComplexType]
												[Var e1(112992):haxe.macro.Expr] [Local `32(112990):haxe.macro.Expr:haxe.macro.Expr]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Const:String] "("
																	+
																	[Call:String]
																		[Field:(e : haxe.macro.Expr) -> String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:(e : haxe.macro.Expr) -> String]
																				haxe.macro.Printer
																				printExpr:(e : haxe.macro.Expr) -> String
																		[Local e1(112992):haxe.macro.Expr:haxe.macro.Expr]
																+
																[Const:String] " : "
															+
															[Call:String]
																[Field:(ct : haxe.macro.ComplexType) -> String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:(ct : haxe.macro.ComplexType) -> String]
																		haxe.macro.Printer
																		printComplexType:(ct : haxe.macro.ComplexType) -> String
																[Local ct(112991):haxe.macro.ComplexType:haxe.macro.ComplexType]
														+
														[Const:String] ")"
									[Case:String]
										[Const:Int] 28
										[Block:String]
											[Var `17(112993):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EMeta
													1
											[Var `16(112994):haxe.macro.MetadataEntry]
												[EnumParameter:haxe.macro.MetadataEntry]
													[Local `(112858):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EMeta
													0
											[Block:String]
												[Var `20(112995):haxe.macro.Position]
													[Field:haxe.macro.Position]
														[Local `16(112994):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
														[FAnon:haxe.macro.Position] pos:haxe.macro.Position
												[Var `19(112996):Null<Array<haxe.macro.Expr>>]
													[Field:Null<Array<haxe.macro.Expr>>]
														[Local `16(112994):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
														[FAnon:Null<Array<haxe.macro.Expr>>] params:Null<Array<haxe.macro.Expr>>
												[Var `18(112997):String]
													[Field:String]
														[Local `16(112994):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
														[FAnon:String] name:String
												[If:String]
													[Binop:Bool]
														[Local `18(112997):String:String]
														==
														[Const:String] ":implicitReturn"
													[Then:String] [Block:String]
														[Block:String]
															[Var `22(112998):haxe.macro.Position]
																[Field:haxe.macro.Position]
																	[Local `17(112993):haxe.macro.Expr:haxe.macro.Expr]
																	[FAnon:haxe.macro.Position] pos:haxe.macro.Position
															[Var `21(112999):haxe.macro.ExprDef]
																[Field:haxe.macro.ExprDef]
																	[Local `17(112993):haxe.macro.Expr:haxe.macro.Expr]
																	[FAnon:haxe.macro.ExprDef] expr:haxe.macro.ExprDef
															[If:String]
																[Binop:Bool]
																	[EnumIndex:Int] [Local `21(112999):haxe.macro.ExprDef:haxe.macro.ExprDef]
																	==
																	[Const:Int] 18
																[Then:String] [Block:String]
																	[Var `23(113000):Null<haxe.macro.Expr>]
																		[EnumParameter:Null<haxe.macro.Expr>]
																			[Local `21(112999):haxe.macro.ExprDef:haxe.macro.ExprDef]
																			EReturn
																			0
																	[Block:String]
																		[Var e1(113001):Null<haxe.macro.Expr>] [Local `23(113000):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
																		[Block:String]
																			[Call:String]
																				[Field:(e : haxe.macro.Expr) -> String]
																					[Const:haxe.macro.Printer] this
																					[FInstance:(e : haxe.macro.Expr) -> String]
																						haxe.macro.Printer
																						printExpr:(e : haxe.macro.Expr) -> String
																				[Local e1(113001):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
																[Else:String] [Block:String]
																	[Var meta(113002):haxe.macro.MetadataEntry] [Local `16(112994):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
																	[Var e1(113003):haxe.macro.Expr] [Local `17(112993):haxe.macro.Expr:haxe.macro.Expr]
																	[Block:String]
																		[Binop:String]
																			[Binop:String]
																				[Call:String]
																					[Field:(meta : haxe.macro.MetadataEntry) -> String]
																						[Const:haxe.macro.Printer] this
																						[FInstance:(meta : haxe.macro.MetadataEntry) -> String]
																							haxe.macro.Printer
																							printMetadata:(meta : haxe.macro.MetadataEntry) -> String
																					[Local meta(113002):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
																				+
																				[Const:String] " "
																			+
																			[Call:String]
																				[Field:(e : haxe.macro.Expr) -> String]
																					[Const:haxe.macro.Printer] this
																					[FInstance:(e : haxe.macro.Expr) -> String]
																						haxe.macro.Printer
																						printExpr:(e : haxe.macro.Expr) -> String
																				[Local e1(113003):haxe.macro.Expr:haxe.macro.Expr]
													[Else:String] [Block:String]
														[Var e1(113004):haxe.macro.Expr] [Local `17(112993):haxe.macro.Expr:haxe.macro.Expr]
														[Var meta(113005):haxe.macro.MetadataEntry] [Local `16(112994):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
														[Block:String]
															[Binop:String]
																[Binop:String]
																	[Call:String]
																		[Field:(meta : haxe.macro.MetadataEntry) -> String]
																			[Const:haxe.macro.Printer] this
																			[FInstance:(meta : haxe.macro.MetadataEntry) -> String]
																				haxe.macro.Printer
																				printMetadata:(meta : haxe.macro.MetadataEntry) -> String
																		[Local meta(113005):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
																	+
																	[Const:String] " "
																+
																[Call:String]
																	[Field:(e : haxe.macro.Expr) -> String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:(e : haxe.macro.Expr) -> String]
																			haxe.macro.Printer
																			printExpr:(e : haxe.macro.Expr) -> String
																	[Local e1(113004):haxe.macro.Expr:haxe.macro.Expr]

	public function printExprs[Function:(el : Array<haxe.macro.Expr>, sep : String) -> String]
		[Arg:Array<haxe.macro.Expr>] [Local el(112452):Array<haxe.macro.Expr>]
		[Arg:String] [Local sep(112453):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:String]
					[Field:(sep : String) -> String]
						[Block:Array<String>]
							[Var f(112456):haxe.macro.Expr -> String]
								[Field:(e : haxe.macro.Expr) -> String]
									[Const:haxe.macro.Printer] this
									[FClosure:(e : haxe.macro.Expr) -> String]
										haxe.macro.Printer
										printExpr:(e : haxe.macro.Expr) -> String
							[Block:Array<String>]
								[Var `(112457):Array<String>] [ArrayDecl:Array<String>]
								[Block:Void]
									[Var `1(112458):Int] [Const:Int] 0
									[Var `2(112459):Array<haxe.macro.Expr>] [Local el(112452):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
									[While:Void]
										[Binop:Bool]
											[Local `1(112458):Int:Int]
											<
											[Field:Int]
												[Local `2(112459):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
												[FInstance:Int]
													Array<haxe.macro.Expr>
													length:Int
										[Block:Void]
											[Var v(112460):haxe.macro.Expr]
												[Array:haxe.macro.Expr]
													[Local `2(112459):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
													[Local `1(112458):Int:Int]
											[Unop:Int]
												++
												Prefix
												[Local `1(112458):Int:Int]
											[Call:Int]
												[Field:(x : String) -> Int]
													[Local `(112457):Array<String>:Array<String>]
													[FInstance:(x : String) -> Int]
														Array<String>
														push:(x : Array.T) -> Int
												[Call:String]
													[Local f(112456):haxe.macro.Expr -> String:haxe.macro.Expr -> String]
													[Local v(112460):haxe.macro.Expr:haxe.macro.Expr]
								[Local `(112457):Array<String>:Array<String>]
						[FInstance:(sep : String) -> String]
							Array<String>
							join:(sep : String) -> String
					[Local sep(112453):String:String]

	function printExtension[Function:(tpl : Array<haxe.macro.TypePath>, fields : Array<haxe.macro.Field>) -> String]
		[Arg:Array<haxe.macro.TypePath>] [Local tpl(113020):Array<haxe.macro.TypePath>]
		[Arg:Array<haxe.macro.Field>] [Local fields(113021):Array<haxe.macro.Field>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Binop:String]
					[Binop:String]
						[Binop:String]
							[Binop:String]
								[Binop:String]
									[Const:String] "{\n"
									+
									[Field:String]
										[Const:haxe.macro.Printer] this
										[FInstance:String]
											haxe.macro.Printer
											tabs:String
								+
								[Const:String] ">"
							+
							[Call:String]
								[Field:(sep : String) -> String]
									[Block:Array<String>]
										[Var f(113024):haxe.macro.TypePath -> String]
											[Field:(tp : haxe.macro.TypePath) -> String]
												[Const:haxe.macro.Printer] this
												[FClosure:(tp : haxe.macro.TypePath) -> String]
													haxe.macro.Printer
													printTypePath:(tp : haxe.macro.TypePath) -> String
										[Block:Array<String>]
											[Var `(113025):Array<String>] [ArrayDecl:Array<String>]
											[Block:Void]
												[Var `1(113026):Int] [Const:Int] 0
												[Var `2(113027):Array<haxe.macro.TypePath>] [Local tpl(113020):Array<haxe.macro.TypePath>:Array<haxe.macro.TypePath>]
												[While:Void]
													[Binop:Bool]
														[Local `1(113026):Int:Int]
														<
														[Field:Int]
															[Local `2(113027):Array<haxe.macro.TypePath>:Array<haxe.macro.TypePath>]
															[FInstance:Int]
																Array<haxe.macro.TypePath>
																length:Int
													[Block:Void]
														[Var v(113028):haxe.macro.TypePath]
															[Array:haxe.macro.TypePath]
																[Local `2(113027):Array<haxe.macro.TypePath>:Array<haxe.macro.TypePath>]
																[Local `1(113026):Int:Int]
														[Unop:Int]
															++
															Prefix
															[Local `1(113026):Int:Int]
														[Call:Int]
															[Field:(x : String) -> Int]
																[Local `(113025):Array<String>:Array<String>]
																[FInstance:(x : String) -> Int]
																	Array<String>
																	push:(x : Array.T) -> Int
															[Call:String]
																[Local f(113024):haxe.macro.TypePath -> String:haxe.macro.TypePath -> String]
																[Local v(113028):haxe.macro.TypePath:haxe.macro.TypePath]
											[Local `(113025):Array<String>:Array<String>]
									[FInstance:(sep : String) -> String]
										Array<String>
										join:(sep : String) -> String
								[Binop:String]
									[Binop:String]
										[Const:String] ",\n"
										+
										[Field:String]
											[Const:haxe.macro.Printer] this
											[FInstance:String]
												haxe.macro.Printer
												tabs:String
									+
									[Const:String] ">"
						+
						[Const:String] ","
					+
					[Parenthesis:String]
						[If:String]
							[Binop:Bool]
								[Field:Int]
									[Local fields(113021):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
									[FInstance:Int]
										Array<haxe.macro.Field>
										length:Int
								>
								[Const:Int] 0
							[Then:String] [Block:String]
								[Parenthesis:String]
									[Binop:String]
										[Binop:String]
											[Binop:String]
												[Const:String] "\n"
												+
												[Field:String]
													[Const:haxe.macro.Printer] this
													[FInstance:String]
														haxe.macro.Printer
														tabs:String
											+
											[Call:String]
												[Field:(sep : String) -> String]
													[Block:Array<String>]
														[Var f(113031):haxe.macro.Field -> String]
															[Field:(field : haxe.macro.Field) -> String]
																[Const:haxe.macro.Printer] this
																[FClosure:(field : haxe.macro.Field) -> String]
																	haxe.macro.Printer
																	printField:(field : haxe.macro.Field) -> String
														[Block:Array<String>]
															[Var `(113032):Array<String>] [ArrayDecl:Array<String>]
															[Block:Void]
																[Var `1(113033):Int] [Const:Int] 0
																[Var `2(113034):Array<haxe.macro.Field>] [Local fields(113021):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																[While:Void]
																	[Binop:Bool]
																		[Local `1(113033):Int:Int]
																		<
																		[Field:Int]
																			[Local `2(113034):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																			[FInstance:Int]
																				Array<haxe.macro.Field>
																				length:Int
																	[Block:Void]
																		[Var v(113035):haxe.macro.Field]
																			[Array:haxe.macro.Field]
																				[Local `2(113034):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																				[Local `1(113033):Int:Int]
																		[Unop:Int]
																			++
																			Prefix
																			[Local `1(113033):Int:Int]
																		[Call:Int]
																			[Field:(x : String) -> Int]
																				[Local `(113032):Array<String>:Array<String>]
																				[FInstance:(x : String) -> Int]
																					Array<String>
																					push:(x : Array.T) -> Int
																			[Call:String]
																				[Local f(113031):haxe.macro.Field -> String:haxe.macro.Field -> String]
																				[Local v(113035):haxe.macro.Field:haxe.macro.Field]
															[Local `(113032):Array<String>:Array<String>]
													[FInstance:(sep : String) -> String]
														Array<String>
														join:(sep : String) -> String
												[Binop:String]
													[Const:String] ";\n"
													+
													[Field:String]
														[Const:haxe.macro.Printer] this
														[FInstance:String]
															haxe.macro.Printer
															tabs:String
										+
										[Const:String] ";\n}"
							[Else:String] [Block:String] [Parenthesis:String] [Const:String] "\n}"

	function printStructure[Function:(fields : Array<haxe.macro.Field>) -> String]
		[Arg:Array<haxe.macro.Field>] [Local fields(113036):Array<haxe.macro.Field>]
		[Block:Dynamic]
			[Return:Dynamic]
				[If:String]
					[Binop:Bool]
						[Field:Int]
							[Local fields(113036):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
							[FInstance:Int]
								Array<haxe.macro.Field>
								length:Int
						==
						[Const:Int] 0
					[Then:String] [Block:String] [Const:String] "{ }"
					[Else:String] [Block:String]
						[Binop:String]
							[Binop:String]
								[Binop:String]
									[Const:String] "{\n"
									+
									[Field:String]
										[Const:haxe.macro.Printer] this
										[FInstance:String]
											haxe.macro.Printer
											tabs:String
								+
								[Call:String]
									[Field:(sep : String) -> String]
										[Block:Array<String>]
											[Var f(113039):haxe.macro.Field -> String]
												[Field:(field : haxe.macro.Field) -> String]
													[Const:haxe.macro.Printer] this
													[FClosure:(field : haxe.macro.Field) -> String]
														haxe.macro.Printer
														printField:(field : haxe.macro.Field) -> String
											[Block:Array<String>]
												[Var `(113040):Array<String>] [ArrayDecl:Array<String>]
												[Block:Void]
													[Var `1(113041):Int] [Const:Int] 0
													[Var `2(113042):Array<haxe.macro.Field>] [Local fields(113036):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
													[While:Void]
														[Binop:Bool]
															[Local `1(113041):Int:Int]
															<
															[Field:Int]
																[Local `2(113042):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																[FInstance:Int]
																	Array<haxe.macro.Field>
																	length:Int
														[Block:Void]
															[Var v(113043):haxe.macro.Field]
																[Array:haxe.macro.Field]
																	[Local `2(113042):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																	[Local `1(113041):Int:Int]
															[Unop:Int]
																++
																Prefix
																[Local `1(113041):Int:Int]
															[Call:Int]
																[Field:(x : String) -> Int]
																	[Local `(113040):Array<String>:Array<String>]
																	[FInstance:(x : String) -> Int]
																		Array<String>
																		push:(x : Array.T) -> Int
																[Call:String]
																	[Local f(113039):haxe.macro.Field -> String:haxe.macro.Field -> String]
																	[Local v(113043):haxe.macro.Field:haxe.macro.Field]
												[Local `(113040):Array<String>:Array<String>]
										[FInstance:(sep : String) -> String]
											Array<String>
											join:(sep : String) -> String
									[Binop:String]
										[Const:String] ";\n"
										+
										[Field:String]
											[Const:haxe.macro.Printer] this
											[FInstance:String]
												haxe.macro.Printer
												tabs:String
							+
							[Const:String] ";\n}"

	@:value({ printPackage : true })
	public function printTypeDefinition[Function:(t : haxe.macro.TypeDefinition, ?printPackage : Bool) -> String]
		[Arg:haxe.macro.TypeDefinition] [Local t(113044):haxe.macro.TypeDefinition]
		[Arg:Bool]
			[Local printPackage(113045):Bool]
			[Const:Bool] true
		[Block:Dynamic]
			[Var old(113046):String]
				[Field:String]
					[Const:haxe.macro.Printer] this
					[FInstance:String]
						haxe.macro.Printer
						tabs:String
			[Binop:String]
				[Field:String]
					[Const:haxe.macro.Printer] this
					[FInstance:String]
						haxe.macro.Printer
						tabs:String
				=
				[Field:String]
					[Const:haxe.macro.Printer] this
					[FInstance:String]
						haxe.macro.Printer
						tabString:String
			[Var str(113301):String]
				[If:String]
					[Binop:Bool]
						[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
						==
						[Const:haxe.macro.TypeDefinition] null
					[Then:String] [Block:String] [Const:String] "#NULL"
					[Else:String] [Block:String]
						[Binop:String]
							[Binop:String]
								[Binop:String]
									[Binop:String]
										[Parenthesis:String]
											[If:String]
												[Binop:Bool]
													[Binop:Bool]
														[Local printPackage(113045):Bool:Bool]
														&&
														[Binop:Bool]
															[Field:Int]
																[Field:Array<String>]
																	[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																	[FAnon:Array<String>] pack:Array<String>
																[FInstance:Int]
																	Array<String>
																	length:Int
															>
															[Const:Int] 0
													&&
													[Binop:Bool]
														[Array:String]
															[Field:Array<String>]
																[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																[FAnon:Array<String>] pack:Array<String>
															[Const:Int] 0
														!=
														[Const:String] ""
												[Then:String] [Block:String]
													[Binop:String]
														[Binop:String]
															[Const:String] "package "
															+
															[Call:String]
																[Field:(sep : String) -> String]
																	[Field:Array<String>]
																		[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																		[FAnon:Array<String>] pack:Array<String>
																	[FInstance:(sep : String) -> String]
																		Array<String>
																		join:(sep : String) -> String
																[Const:String] "."
														+
														[Const:String] ";\n"
												[Else:String] [Block:String] [Const:String] ""
										+
										[Parenthesis:String]
											[If:String]
												[Binop:Bool]
													[Binop:Bool]
														[Field:Null<String>]
															[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
															[FAnon:Null<String>] doc:Null<String>
														!=
														[Const:Null<String>] null
													&&
													[Binop:Bool]
														[Field:Null<String>]
															[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
															[FAnon:Null<String>] doc:Null<String>
														!=
														[Const:String] ""
												[Then:String] [Block:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Const:String] "/**\n"
																+
																[Field:String]
																	[Const:haxe.macro.Printer] this
																	[FInstance:String]
																		haxe.macro.Printer
																		tabString:String
															+
															[Call:String]
																[Field:(s : String, sub : String, by : String) -> String]
																	[TypeExpr StringTools:Class<StringTools>]
																	[FStatic:(s : String, sub : String, by : String) -> String]
																		StringTools
																		replace:(s : String, sub : String, by : String) -> String
																[Field:Null<String>]
																	[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																	[FAnon:Null<String>] doc:Null<String>
																[Const:String] "\n"
																[Binop:String]
																	[Const:String] "\n"
																	+
																	[Field:String]
																		[Const:haxe.macro.Printer] this
																		[FInstance:String]
																			haxe.macro.Printer
																			tabString:String
														+
														[Const:String] "\n**/\n"
												[Else:String] [Block:String] [Const:String] ""
									+
									[Parenthesis:String]
										[If:String]
											[Binop:Bool]
												[Binop:Bool]
													[Field:Null<haxe.macro.Metadata>]
														[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
														[FAnon:Null<haxe.macro.Metadata>] meta:Null<haxe.macro.Metadata>
													!=
													[Const:Null<haxe.macro.Metadata>] null
												&&
												[Binop:Bool]
													[Field:Int]
														[Field:Null<haxe.macro.Metadata>]
															[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
															[FAnon:Null<haxe.macro.Metadata>] meta:Null<haxe.macro.Metadata>
														[FInstance:Int]
															Array<haxe.macro.MetadataEntry>
															length:Int
													>
													[Const:Int] 0
											[Then:String] [Block:String]
												[Binop:String]
													[Call:String]
														[Field:(sep : String) -> String]
															[Block:Array<String>]
																[Var _this(113048):Null<haxe.macro.Metadata>]
																	[Field:Null<haxe.macro.Metadata>]
																		[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																		[FAnon:Null<haxe.macro.Metadata>] meta:Null<haxe.macro.Metadata>
																[Var f(113049):haxe.macro.MetadataEntry -> String]
																	[Field:(meta : haxe.macro.MetadataEntry) -> String]
																		[Const:haxe.macro.Printer] this
																		[FClosure:(meta : haxe.macro.MetadataEntry) -> String]
																			haxe.macro.Printer
																			printMetadata:(meta : haxe.macro.MetadataEntry) -> String
																[Block:Array<String>]
																	[Var `(113050):Array<String>] [ArrayDecl:Array<String>]
																	[Block:Void]
																		[Var `1(113051):Int] [Const:Int] 0
																		[Var `2(113052):Array<haxe.macro.MetadataEntry>] [Local _this(113048):Null<haxe.macro.Metadata>:Array<haxe.macro.MetadataEntry>]
																		[While:Void]
																			[Binop:Bool]
																				[Local `1(113051):Int:Int]
																				<
																				[Field:Int]
																					[Local `2(113052):Array<haxe.macro.MetadataEntry>:Array<haxe.macro.MetadataEntry>]
																					[FInstance:Int]
																						Array<haxe.macro.MetadataEntry>
																						length:Int
																			[Block:Void]
																				[Var v(113053):haxe.macro.MetadataEntry]
																					[Array:haxe.macro.MetadataEntry]
																						[Local `2(113052):Array<haxe.macro.MetadataEntry>:Array<haxe.macro.MetadataEntry>]
																						[Local `1(113051):Int:Int]
																				[Unop:Int]
																					++
																					Prefix
																					[Local `1(113051):Int:Int]
																				[Call:Int]
																					[Field:(x : String) -> Int]
																						[Local `(113050):Array<String>:Array<String>]
																						[FInstance:(x : String) -> Int]
																							Array<String>
																							push:(x : Array.T) -> Int
																					[Call:String]
																						[Local f(113049):haxe.macro.MetadataEntry -> String:haxe.macro.MetadataEntry -> String]
																						[Local v(113053):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
																	[Local `(113050):Array<String>:Array<String>]
															[FInstance:(sep : String) -> String]
																Array<String>
																join:(sep : String) -> String
														[Const:String] " "
													+
													[Const:String] " "
											[Else:String] [Block:String] [Const:String] ""
								+
								[Parenthesis:String]
									[If:String]
										[Field:Null<Bool>]
											[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
											[FAnon:Null<Bool>] isExtern:Null<Bool>
										[Then:String] [Block:String] [Const:String] "extern "
										[Else:String] [Block:String] [Const:String] ""
							+
							[Meta:String]
								:ast(switch (t.kind) {
	case TDEnum:
		"enum " + t.name + ((t.params != null && t.params.length > 0) ? "<" + t.params.map(printTypeParamDecl).join(", ") + ">" : "") + " {\n" + [for (field  in  t.fields) tabs + (field.doc != null && field.doc != "" ? "/**\n" + tabs + tabString + StringTools.replace(field.doc, "\n", "\n" + tabs + tabString) + "\n" + tabs + "**/\n" + tabs : "") + (field.meta != null && field.meta.length > 0 ? field.meta.map(printMetadata).join(" ") + " " : "") + (switch (field.kind) {
			case FVar(t, _):
				field.name + opt(t, printComplexType, ":");			
			case FProp(_, _, _, _):
				throw "FProp is invalid for TDEnum.";			
			case FFun(func):
				field.name + printFunction(func);			
		}) + ";"].join("\n") + "\n}";	
	case TDStructure:
		"typedef " + t.name + ((t.params != null && t.params.length > 0) ? "<" + t.params.map(printTypeParamDecl).join(", ") + ">" : "") + " = {\n" + [for (f  in  t.fields) {
			tabs + printField(f) + ";";
		}].join("\n") + "\n}";	
	case TDClass(superClass, interfaces, isInterface, isFinal):
		(isFinal ? "final " : "") + (isInterface ? "interface " : "class ") + t.name + (t.params != null && t.params.length > 0 ? "<" + t.params.map(printTypeParamDecl).join(", ") + ">" : "") + (superClass != null ? " extends " + printTypePath(superClass) : "") + (interfaces != null ? (isInterface ? [for (tp  in  interfaces) " extends " + printTypePath(tp)] : [for (tp  in  interfaces) " implements " + printTypePath(tp)]).join("") : "") + " {\n" + [for (f  in  t.fields) {
			tabs + printFieldWithDelimiter(f);
		}].join("\n") + "\n}";	
	case TDAlias(ct):
		"typedef " + t.name + ((t.params != null && t.params.length > 0) ? "<" + t.params.map(printTypeParamDecl).join(", ") + ">" : "") + " = " + (switch (ct) {
			case TExtend(tpl, fields):
				printExtension(tpl, fields);			
			case TAnonymous(fields):
				printStructure(fields);			
			case _:
				printComplexType(ct);			
		}) + ";";	
	case TDAbstract(tthis, from, to):
		"abstract " + t.name + ((t.params != null && t.params.length > 0) ? "<" + t.params.map(printTypeParamDecl).join(", ") + ">" : "") + (tthis == null ? "" : "(" + printComplexType(tthis) + ")") + (from == null ? "" : [for (f  in  from) " from " + printComplexType(f)].join("")) + (to == null ? "" : [for (t  in  to) " to " + printComplexType(t)].join("")) + " {\n" + [for (f  in  t.fields) {
			tabs + printFieldWithDelimiter(f);
		}].join("\n") + "\n}";	
})
								[Block:String]
									[Var `(113204):haxe.macro.TypeDefKind]
										[Field:haxe.macro.TypeDefKind]
											[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
											[FAnon:haxe.macro.TypeDefKind] kind:haxe.macro.TypeDefKind
									[Switch:String]
										[Meta:Int]
											:exhaustive
											[EnumIndex:Int] [Local `(113204):haxe.macro.TypeDefKind:haxe.macro.TypeDefKind]
										[Case:String]
											[Const:Int] 0
											[Block:String]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Binop:String]
																		[Const:String] "enum "
																		+
																		[Field:String]
																			[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																			[FAnon:String] name:String
																	+
																	[Parenthesis:String]
																		[If:String]
																			[Parenthesis:Bool]
																				[Binop:Bool]
																					[Binop:Bool]
																						[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																							[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																							[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																						!=
																						[Const:Null<Array<haxe.macro.TypeParamDecl>>] null
																					&&
																					[Binop:Bool]
																						[Field:Int]
																							[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																								[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																								[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																							[FInstance:Int]
																								Array<haxe.macro.TypeParamDecl>
																								length:Int
																						>
																						[Const:Int] 0
																			[Then:String] [Block:String]
																				[Binop:String]
																					[Binop:String]
																						[Const:String] "<"
																						+
																						[Call:String]
																							[Field:(sep : String) -> String]
																								[Block:Array<String>]
																									[Var _this(113205):Null<Array<haxe.macro.TypeParamDecl>>]
																										[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																											[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																											[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																									[Var f(113206):haxe.macro.TypeParamDecl -> String]
																										[Field:(tpd : haxe.macro.TypeParamDecl) -> String]
																											[Const:haxe.macro.Printer] this
																											[FClosure:(tpd : haxe.macro.TypeParamDecl) -> String]
																												haxe.macro.Printer
																												printTypeParamDecl:(tpd : haxe.macro.TypeParamDecl) -> String
																									[Block:Array<String>]
																										[Var `(113207):Array<String>] [ArrayDecl:Array<String>]
																										[Block:Void]
																											[Var `1(113208):Int] [Const:Int] 0
																											[Var `2(113209):Array<haxe.macro.TypeParamDecl>] [Local _this(113205):Null<Array<haxe.macro.TypeParamDecl>>:Array<haxe.macro.TypeParamDecl>]
																											[While:Void]
																												[Binop:Bool]
																													[Local `1(113208):Int:Int]
																													<
																													[Field:Int]
																														[Local `2(113209):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																														[FInstance:Int]
																															Array<haxe.macro.TypeParamDecl>
																															length:Int
																												[Block:Void]
																													[Var v(113210):haxe.macro.TypeParamDecl]
																														[Array:haxe.macro.TypeParamDecl]
																															[Local `2(113209):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																															[Local `1(113208):Int:Int]
																													[Unop:Int]
																														++
																														Prefix
																														[Local `1(113208):Int:Int]
																													[Call:Int]
																														[Field:(x : String) -> Int]
																															[Local `(113207):Array<String>:Array<String>]
																															[FInstance:(x : String) -> Int]
																																Array<String>
																																push:(x : Array.T) -> Int
																														[Call:String]
																															[Local f(113206):haxe.macro.TypeParamDecl -> String:haxe.macro.TypeParamDecl -> String]
																															[Local v(113210):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
																										[Local `(113207):Array<String>:Array<String>]
																								[FInstance:(sep : String) -> String]
																									Array<String>
																									join:(sep : String) -> String
																							[Const:String] ", "
																					+
																					[Const:String] ">"
																			[Else:String] [Block:String] [Const:String] ""
																+
																[Const:String] " {\n"
															+
															[Call:String]
																[Field:(sep : String) -> String]
																	[Block:Array<String>]
																		[Var `(113211):Array<String>] [ArrayDecl:Array<String>]
																		[Block:Void]
																			[Var `1(113212):Int] [Const:Int] 0
																			[Var `2(113213):Array<haxe.macro.Field>]
																				[Field:Array<haxe.macro.Field>]
																					[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																					[FAnon:Array<haxe.macro.Field>] fields:Array<haxe.macro.Field>
																			[While:Void]
																				[Binop:Bool]
																					[Local `1(113212):Int:Int]
																					<
																					[Field:Int]
																						[Local `2(113213):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																						[FInstance:Int]
																							Array<haxe.macro.Field>
																							length:Int
																				[Block:Void]
																					[Var field(113214):haxe.macro.Field]
																						[Array:haxe.macro.Field]
																							[Local `2(113213):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																							[Local `1(113212):Int:Int]
																					[Unop:Int]
																						++
																						Prefix
																						[Local `1(113212):Int:Int]
																					[Call:Int]
																						[Field:(x : String) -> Int]
																							[Local `(113211):Array<String>:Array<String>]
																							[FInstance:(x : String) -> Int]
																								Array<String>
																								push:(x : Array.T) -> Int
																						[Binop:String]
																							[Binop:String]
																								[Binop:String]
																									[Binop:String]
																										[Field:String]
																											[Const:haxe.macro.Printer] this
																											[FInstance:String]
																												haxe.macro.Printer
																												tabs:String
																										+
																										[Parenthesis:String]
																											[If:String]
																												[Binop:Bool]
																													[Binop:Bool]
																														[Field:Null<String>]
																															[Local field(113214):haxe.macro.Field:haxe.macro.Field]
																															[FAnon:Null<String>] doc:Null<String>
																														!=
																														[Const:Null<String>] null
																													&&
																													[Binop:Bool]
																														[Field:Null<String>]
																															[Local field(113214):haxe.macro.Field:haxe.macro.Field]
																															[FAnon:Null<String>] doc:Null<String>
																														!=
																														[Const:String] ""
																												[Then:String] [Block:String]
																													[Binop:String]
																														[Binop:String]
																															[Binop:String]
																																[Binop:String]
																																	[Binop:String]
																																		[Binop:String]
																																			[Binop:String]
																																				[Const:String] "/**\n"
																																				+
																																				[Field:String]
																																					[Const:haxe.macro.Printer] this
																																					[FInstance:String]
																																						haxe.macro.Printer
																																						tabs:String
																																			+
																																			[Field:String]
																																				[Const:haxe.macro.Printer] this
																																				[FInstance:String]
																																					haxe.macro.Printer
																																					tabString:String
																																		+
																																		[Call:String]
																																			[Field:(s : String, sub : String, by : String) -> String]
																																				[TypeExpr StringTools:Class<StringTools>]
																																				[FStatic:(s : String, sub : String, by : String) -> String]
																																					StringTools
																																					replace:(s : String, sub : String, by : String) -> String
																																			[Field:Null<String>]
																																				[Local field(113214):haxe.macro.Field:haxe.macro.Field]
																																				[FAnon:Null<String>] doc:Null<String>
																																			[Const:String] "\n"
																																			[Binop:String]
																																				[Binop:String]
																																					[Const:String] "\n"
																																					+
																																					[Field:String]
																																						[Const:haxe.macro.Printer] this
																																						[FInstance:String]
																																							haxe.macro.Printer
																																							tabs:String
																																				+
																																				[Field:String]
																																					[Const:haxe.macro.Printer] this
																																					[FInstance:String]
																																						haxe.macro.Printer
																																						tabString:String
																																	+
																																	[Const:String] "\n"
																																+
																																[Field:String]
																																	[Const:haxe.macro.Printer] this
																																	[FInstance:String]
																																		haxe.macro.Printer
																																		tabs:String
																															+
																															[Const:String] "**/\n"
																														+
																														[Field:String]
																															[Const:haxe.macro.Printer] this
																															[FInstance:String]
																																haxe.macro.Printer
																																tabs:String
																												[Else:String] [Block:String] [Const:String] ""
																									+
																									[Parenthesis:String]
																										[If:String]
																											[Binop:Bool]
																												[Binop:Bool]
																													[Field:Null<haxe.macro.Metadata>]
																														[Local field(113214):haxe.macro.Field:haxe.macro.Field]
																														[FAnon:Null<haxe.macro.Metadata>] meta:Null<haxe.macro.Metadata>
																													!=
																													[Const:Null<haxe.macro.Metadata>] null
																												&&
																												[Binop:Bool]
																													[Field:Int]
																														[Field:Null<haxe.macro.Metadata>]
																															[Local field(113214):haxe.macro.Field:haxe.macro.Field]
																															[FAnon:Null<haxe.macro.Metadata>] meta:Null<haxe.macro.Metadata>
																														[FInstance:Int]
																															Array<haxe.macro.MetadataEntry>
																															length:Int
																													>
																													[Const:Int] 0
																											[Then:String] [Block:String]
																												[Binop:String]
																													[Call:String]
																														[Field:(sep : String) -> String]
																															[Block:Array<String>]
																																[Var _this(113215):Null<haxe.macro.Metadata>]
																																	[Field:Null<haxe.macro.Metadata>]
																																		[Local field(113214):haxe.macro.Field:haxe.macro.Field]
																																		[FAnon:Null<haxe.macro.Metadata>] meta:Null<haxe.macro.Metadata>
																																[Var f(113216):haxe.macro.MetadataEntry -> String]
																																	[Field:(meta : haxe.macro.MetadataEntry) -> String]
																																		[Const:haxe.macro.Printer] this
																																		[FClosure:(meta : haxe.macro.MetadataEntry) -> String]
																																			haxe.macro.Printer
																																			printMetadata:(meta : haxe.macro.MetadataEntry) -> String
																																[Block:Array<String>]
																																	[Var `(113217):Array<String>] [ArrayDecl:Array<String>]
																																	[Block:Void]
																																		[Var `1(113218):Int] [Const:Int] 0
																																		[Var `2(113219):Array<haxe.macro.MetadataEntry>] [Local _this(113215):Null<haxe.macro.Metadata>:Array<haxe.macro.MetadataEntry>]
																																		[While:Void]
																																			[Binop:Bool]
																																				[Local `1(113218):Int:Int]
																																				<
																																				[Field:Int]
																																					[Local `2(113219):Array<haxe.macro.MetadataEntry>:Array<haxe.macro.MetadataEntry>]
																																					[FInstance:Int]
																																						Array<haxe.macro.MetadataEntry>
																																						length:Int
																																			[Block:Void]
																																				[Var v(113220):haxe.macro.MetadataEntry]
																																					[Array:haxe.macro.MetadataEntry]
																																						[Local `2(113219):Array<haxe.macro.MetadataEntry>:Array<haxe.macro.MetadataEntry>]
																																						[Local `1(113218):Int:Int]
																																				[Unop:Int]
																																					++
																																					Prefix
																																					[Local `1(113218):Int:Int]
																																				[Call:Int]
																																					[Field:(x : String) -> Int]
																																						[Local `(113217):Array<String>:Array<String>]
																																						[FInstance:(x : String) -> Int]
																																							Array<String>
																																							push:(x : Array.T) -> Int
																																					[Call:String]
																																						[Local f(113216):haxe.macro.MetadataEntry -> String:haxe.macro.MetadataEntry -> String]
																																						[Local v(113220):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
																																	[Local `(113217):Array<String>:Array<String>]
																															[FInstance:(sep : String) -> String]
																																Array<String>
																																join:(sep : String) -> String
																														[Const:String] " "
																													+
																													[Const:String] " "
																											[Else:String] [Block:String] [Const:String] ""
																								+
																								[Parenthesis:String]
																									[Meta:String]
																										:ast(switch (field.kind) {
	case FVar(t, _):
		field.name + opt(t, printComplexType, ":");	
	case FProp(_, _, _, _):
		throw "FProp is invalid for TDEnum.";	
	case FFun(func):
		field.name + printFunction(func);	
})
																										[Block:String]
																											[Var `1(113221):haxe.macro.FieldType]
																												[Field:haxe.macro.FieldType]
																													[Local field(113214):haxe.macro.Field:haxe.macro.Field]
																													[FAnon:haxe.macro.FieldType] kind:haxe.macro.FieldType
																											[Switch:String]
																												[Meta:Int]
																													:exhaustive
																													[EnumIndex:Int] [Local `1(113221):haxe.macro.FieldType:haxe.macro.FieldType]
																												[Case:String]
																													[Const:Int] 0
																													[Block:String]
																														[Var `7(113222):Null<haxe.macro.Expr>]
																															[EnumParameter:Null<haxe.macro.Expr>]
																																[Local `1(113221):haxe.macro.FieldType:haxe.macro.FieldType]
																																FVar
																																1
																														[Var `6(113223):Null<haxe.macro.ComplexType>]
																															[EnumParameter:Null<haxe.macro.ComplexType>]
																																[Local `1(113221):haxe.macro.FieldType:haxe.macro.FieldType]
																																FVar
																																0
																														[Block:String]
																															[Var t(113224):Null<haxe.macro.ComplexType>] [Local `6(113223):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
																															[Block:String]
																																[Binop:String]
																																	[Field:String]
																																		[Local field(113214):haxe.macro.Field:haxe.macro.Field]
																																		[FAnon:String] name:String
																																	+
																																	[Call:String]
																																		[Field:(v : Null<haxe.macro.ComplexType>, f : (Null<haxe.macro.ComplexType> -> String), ?prefix : String) -> String]
																																			[Const:haxe.macro.Printer] this
																																			[FInstance:(v : Null<haxe.macro.ComplexType>, f : (Null<haxe.macro.ComplexType> -> String), ?prefix : String) -> String]
																																				haxe.macro.Printer
																																				opt:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String
																																		[Local t(113224):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
																																		[Field:(ct : haxe.macro.ComplexType) -> String]
																																			[Const:haxe.macro.Printer] this
																																			[FClosure:(ct : haxe.macro.ComplexType) -> String]
																																				haxe.macro.Printer
																																				printComplexType:(ct : haxe.macro.ComplexType) -> String
																																		[Const:String] ":"
																												[Case:String]
																													[Const:Int] 1
																													[Block:String]
																														[Var `8(113225):haxe.macro.Function]
																															[EnumParameter:haxe.macro.Function]
																																[Local `1(113221):haxe.macro.FieldType:haxe.macro.FieldType]
																																FFun
																																0
																														[Block:String]
																															[Var func(113226):haxe.macro.Function] [Local `8(113225):haxe.macro.Function:haxe.macro.Function]
																															[Block:String]
																																[Binop:String]
																																	[Field:String]
																																		[Local field(113214):haxe.macro.Field:haxe.macro.Field]
																																		[FAnon:String] name:String
																																	+
																																	[Call:String]
																																		[Field:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String]
																																			[Const:haxe.macro.Printer] this
																																			[FInstance:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String]
																																				haxe.macro.Printer
																																				printFunction:(func : haxe.macro.Function, ?kind : Null<haxe.macro.FunctionKind>) -> String
																																		[Local func(113226):haxe.macro.Function:haxe.macro.Function]
																																		[Const:Null<haxe.macro.FunctionKind>] null
																												[Case:String]
																													[Const:Int] 2
																													[Block:String]
																														[Var `5(113227):Null<haxe.macro.Expr>]
																															[EnumParameter:Null<haxe.macro.Expr>]
																																[Local `1(113221):haxe.macro.FieldType:haxe.macro.FieldType]
																																FProp
																																3
																														[Var `4(113228):Null<haxe.macro.ComplexType>]
																															[EnumParameter:Null<haxe.macro.ComplexType>]
																																[Local `1(113221):haxe.macro.FieldType:haxe.macro.FieldType]
																																FProp
																																2
																														[Var `3(113229):String]
																															[EnumParameter:String]
																																[Local `1(113221):haxe.macro.FieldType:haxe.macro.FieldType]
																																FProp
																																1
																														[Var `2(113230):String]
																															[EnumParameter:String]
																																[Local `1(113221):haxe.macro.FieldType:haxe.macro.FieldType]
																																FProp
																																0
																														[Block:String]
																															[Throw:String]
																																[Throw:String]
																																	[Call:Any]
																																		[Field:(value : Any) -> Any]
																																			[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
																																			[FStatic:(value : Any) -> Any]
																																				haxe.Exception
																																				thrown:(value : Any) -> Any
																																		[Const:String] "FProp is invalid for TDEnum."
																							+
																							[Const:String] ";"
																		[Local `(113211):Array<String>:Array<String>]
																	[FInstance:(sep : String) -> String]
																		Array<String>
																		join:(sep : String) -> String
																[Const:String] "\n"
														+
														[Const:String] "\n}"
										[Case:String]
											[Const:Int] 1
											[Block:String]
												[Block:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Binop:String]
																		[Const:String] "typedef "
																		+
																		[Field:String]
																			[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																			[FAnon:String] name:String
																	+
																	[Parenthesis:String]
																		[If:String]
																			[Parenthesis:Bool]
																				[Binop:Bool]
																					[Binop:Bool]
																						[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																							[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																							[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																						!=
																						[Const:Null<Array<haxe.macro.TypeParamDecl>>] null
																					&&
																					[Binop:Bool]
																						[Field:Int]
																							[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																								[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																								[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																							[FInstance:Int]
																								Array<haxe.macro.TypeParamDecl>
																								length:Int
																						>
																						[Const:Int] 0
																			[Then:String] [Block:String]
																				[Binop:String]
																					[Binop:String]
																						[Const:String] "<"
																						+
																						[Call:String]
																							[Field:(sep : String) -> String]
																								[Block:Array<String>]
																									[Var _this(113231):Null<Array<haxe.macro.TypeParamDecl>>]
																										[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																											[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																											[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																									[Var f(113232):haxe.macro.TypeParamDecl -> String]
																										[Field:(tpd : haxe.macro.TypeParamDecl) -> String]
																											[Const:haxe.macro.Printer] this
																											[FClosure:(tpd : haxe.macro.TypeParamDecl) -> String]
																												haxe.macro.Printer
																												printTypeParamDecl:(tpd : haxe.macro.TypeParamDecl) -> String
																									[Block:Array<String>]
																										[Var `(113233):Array<String>] [ArrayDecl:Array<String>]
																										[Block:Void]
																											[Var `1(113234):Int] [Const:Int] 0
																											[Var `2(113235):Array<haxe.macro.TypeParamDecl>] [Local _this(113231):Null<Array<haxe.macro.TypeParamDecl>>:Array<haxe.macro.TypeParamDecl>]
																											[While:Void]
																												[Binop:Bool]
																													[Local `1(113234):Int:Int]
																													<
																													[Field:Int]
																														[Local `2(113235):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																														[FInstance:Int]
																															Array<haxe.macro.TypeParamDecl>
																															length:Int
																												[Block:Void]
																													[Var v(113236):haxe.macro.TypeParamDecl]
																														[Array:haxe.macro.TypeParamDecl]
																															[Local `2(113235):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																															[Local `1(113234):Int:Int]
																													[Unop:Int]
																														++
																														Prefix
																														[Local `1(113234):Int:Int]
																													[Call:Int]
																														[Field:(x : String) -> Int]
																															[Local `(113233):Array<String>:Array<String>]
																															[FInstance:(x : String) -> Int]
																																Array<String>
																																push:(x : Array.T) -> Int
																														[Call:String]
																															[Local f(113232):haxe.macro.TypeParamDecl -> String:haxe.macro.TypeParamDecl -> String]
																															[Local v(113236):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
																										[Local `(113233):Array<String>:Array<String>]
																								[FInstance:(sep : String) -> String]
																									Array<String>
																									join:(sep : String) -> String
																							[Const:String] ", "
																					+
																					[Const:String] ">"
																			[Else:String] [Block:String] [Const:String] ""
																+
																[Const:String] " = {\n"
															+
															[Call:String]
																[Field:(sep : String) -> String]
																	[Block:Array<String>]
																		[Var `(113237):Array<String>] [ArrayDecl:Array<String>]
																		[Block:Void]
																			[Var `1(113238):Int] [Const:Int] 0
																			[Var `2(113239):Array<haxe.macro.Field>]
																				[Field:Array<haxe.macro.Field>]
																					[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																					[FAnon:Array<haxe.macro.Field>] fields:Array<haxe.macro.Field>
																			[While:Void]
																				[Binop:Bool]
																					[Local `1(113238):Int:Int]
																					<
																					[Field:Int]
																						[Local `2(113239):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																						[FInstance:Int]
																							Array<haxe.macro.Field>
																							length:Int
																				[Block:Void]
																					[Var f(113240):haxe.macro.Field]
																						[Array:haxe.macro.Field]
																							[Local `2(113239):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																							[Local `1(113238):Int:Int]
																					[Unop:Int]
																						++
																						Prefix
																						[Local `1(113238):Int:Int]
																					[Call:Int]
																						[Field:(x : String) -> Int]
																							[Local `(113237):Array<String>:Array<String>]
																							[FInstance:(x : String) -> Int]
																								Array<String>
																								push:(x : Array.T) -> Int
																						[Binop:String]
																							[Binop:String]
																								[Field:String]
																									[Const:haxe.macro.Printer] this
																									[FInstance:String]
																										haxe.macro.Printer
																										tabs:String
																								+
																								[Call:String]
																									[Field:(field : haxe.macro.Field) -> String]
																										[Const:haxe.macro.Printer] this
																										[FInstance:(field : haxe.macro.Field) -> String]
																											haxe.macro.Printer
																											printField:(field : haxe.macro.Field) -> String
																									[Local f(113240):haxe.macro.Field:haxe.macro.Field]
																							+
																							[Const:String] ";"
																		[Local `(113237):Array<String>:Array<String>]
																	[FInstance:(sep : String) -> String]
																		Array<String>
																		join:(sep : String) -> String
																[Const:String] "\n"
														+
														[Const:String] "\n}"
										[Case:String]
											[Const:Int] 2
											[Block:String]
												[Var `4(113241):Null<Bool>]
													[EnumParameter:Null<Bool>]
														[Local `(113204):haxe.macro.TypeDefKind:haxe.macro.TypeDefKind]
														TDClass
														3
												[Var `3(113242):Null<Bool>]
													[EnumParameter:Null<Bool>]
														[Local `(113204):haxe.macro.TypeDefKind:haxe.macro.TypeDefKind]
														TDClass
														2
												[Var `2(113243):Null<Array<haxe.macro.TypePath>>]
													[EnumParameter:Null<Array<haxe.macro.TypePath>>]
														[Local `(113204):haxe.macro.TypeDefKind:haxe.macro.TypeDefKind]
														TDClass
														1
												[Var `1(113244):Null<haxe.macro.TypePath>]
													[EnumParameter:Null<haxe.macro.TypePath>]
														[Local `(113204):haxe.macro.TypeDefKind:haxe.macro.TypeDefKind]
														TDClass
														0
												[Block:String]
													[Var isFinal(113245):Null<Bool>] [Local `4(113241):Null<Bool>:Null<Bool>]
													[Var isInterface(113246):Null<Bool>] [Local `3(113242):Null<Bool>:Null<Bool>]
													[Var interfaces(113247):Null<Array<haxe.macro.TypePath>>] [Local `2(113243):Null<Array<haxe.macro.TypePath>>:Null<Array<haxe.macro.TypePath>>]
													[Var superClass(113248):Null<haxe.macro.TypePath>] [Local `1(113244):Null<haxe.macro.TypePath>:Null<haxe.macro.TypePath>]
													[Block:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Binop:String]
																		[Binop:String]
																			[Binop:String]
																				[Binop:String]
																					[Binop:String]
																						[Parenthesis:String]
																							[If:String]
																								[Local isFinal(113245):Null<Bool>:Null<Bool>]
																								[Then:String] [Block:String] [Const:String] "final "
																								[Else:String] [Block:String] [Const:String] ""
																						+
																						[Parenthesis:String]
																							[If:String]
																								[Local isInterface(113246):Null<Bool>:Null<Bool>]
																								[Then:String] [Block:String] [Const:String] "interface "
																								[Else:String] [Block:String] [Const:String] "class "
																					+
																					[Field:String]
																						[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																						[FAnon:String] name:String
																				+
																				[Parenthesis:String]
																					[If:String]
																						[Binop:Bool]
																							[Binop:Bool]
																								[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																									[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																									[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																								!=
																								[Const:Null<Array<haxe.macro.TypeParamDecl>>] null
																							&&
																							[Binop:Bool]
																								[Field:Int]
																									[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																										[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																										[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																									[FInstance:Int]
																										Array<haxe.macro.TypeParamDecl>
																										length:Int
																								>
																								[Const:Int] 0
																						[Then:String] [Block:String]
																							[Binop:String]
																								[Binop:String]
																									[Const:String] "<"
																									+
																									[Call:String]
																										[Field:(sep : String) -> String]
																											[Block:Array<String>]
																												[Var _this(113249):Null<Array<haxe.macro.TypeParamDecl>>]
																													[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																														[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																														[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																												[Var f(113250):haxe.macro.TypeParamDecl -> String]
																													[Field:(tpd : haxe.macro.TypeParamDecl) -> String]
																														[Const:haxe.macro.Printer] this
																														[FClosure:(tpd : haxe.macro.TypeParamDecl) -> String]
																															haxe.macro.Printer
																															printTypeParamDecl:(tpd : haxe.macro.TypeParamDecl) -> String
																												[Block:Array<String>]
																													[Var `(113251):Array<String>] [ArrayDecl:Array<String>]
																													[Block:Void]
																														[Var `1(113252):Int] [Const:Int] 0
																														[Var `2(113253):Array<haxe.macro.TypeParamDecl>] [Local _this(113249):Null<Array<haxe.macro.TypeParamDecl>>:Array<haxe.macro.TypeParamDecl>]
																														[While:Void]
																															[Binop:Bool]
																																[Local `1(113252):Int:Int]
																																<
																																[Field:Int]
																																	[Local `2(113253):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																																	[FInstance:Int]
																																		Array<haxe.macro.TypeParamDecl>
																																		length:Int
																															[Block:Void]
																																[Var v(113254):haxe.macro.TypeParamDecl]
																																	[Array:haxe.macro.TypeParamDecl]
																																		[Local `2(113253):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																																		[Local `1(113252):Int:Int]
																																[Unop:Int]
																																	++
																																	Prefix
																																	[Local `1(113252):Int:Int]
																																[Call:Int]
																																	[Field:(x : String) -> Int]
																																		[Local `(113251):Array<String>:Array<String>]
																																		[FInstance:(x : String) -> Int]
																																			Array<String>
																																			push:(x : Array.T) -> Int
																																	[Call:String]
																																		[Local f(113250):haxe.macro.TypeParamDecl -> String:haxe.macro.TypeParamDecl -> String]
																																		[Local v(113254):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
																													[Local `(113251):Array<String>:Array<String>]
																											[FInstance:(sep : String) -> String]
																												Array<String>
																												join:(sep : String) -> String
																										[Const:String] ", "
																								+
																								[Const:String] ">"
																						[Else:String] [Block:String] [Const:String] ""
																			+
																			[Parenthesis:String]
																				[If:String]
																					[Binop:Bool]
																						[Local superClass(113248):Null<haxe.macro.TypePath>:Null<haxe.macro.TypePath>]
																						!=
																						[Const:Null<haxe.macro.TypePath>] null
																					[Then:String] [Block:String]
																						[Binop:String]
																							[Const:String] " extends "
																							+
																							[Call:String]
																								[Field:(tp : haxe.macro.TypePath) -> String]
																									[Const:haxe.macro.Printer] this
																									[FInstance:(tp : haxe.macro.TypePath) -> String]
																										haxe.macro.Printer
																										printTypePath:(tp : haxe.macro.TypePath) -> String
																								[Local superClass(113248):Null<haxe.macro.TypePath>:Null<haxe.macro.TypePath>]
																					[Else:String] [Block:String] [Const:String] ""
																		+
																		[Parenthesis:String]
																			[If:String]
																				[Binop:Bool]
																					[Local interfaces(113247):Null<Array<haxe.macro.TypePath>>:Null<Array<haxe.macro.TypePath>>]
																					!=
																					[Const:Null<Array<haxe.macro.TypePath>>] null
																				[Then:String] [Block:String]
																					[Call:String]
																						[Field:(sep : String) -> String]
																							[Parenthesis:Array<String>]
																								[If:Array<String>]
																									[Local isInterface(113246):Null<Bool>:Null<Bool>]
																									[Then:Array<String>] [Block:Array<String>]
																										[Block:Array<String>]
																											[Var `(113255):Array<String>] [ArrayDecl:Array<String>]
																											[Block:Void]
																												[Var `1(113256):Int] [Const:Int] 0
																												[While:Void]
																													[Binop:Bool]
																														[Local `1(113256):Int:Int]
																														<
																														[Field:Int]
																															[Local interfaces(113247):Null<Array<haxe.macro.TypePath>>:Null<Array<haxe.macro.TypePath>>]
																															[FInstance:Int]
																																Array<haxe.macro.TypePath>
																																length:Int
																													[Block:Void]
																														[Var tp(113257):haxe.macro.TypePath]
																															[Array:haxe.macro.TypePath]
																																[Local interfaces(113247):Null<Array<haxe.macro.TypePath>>:Null<Array<haxe.macro.TypePath>>]
																																[Local `1(113256):Int:Int]
																														[Unop:Int]
																															++
																															Prefix
																															[Local `1(113256):Int:Int]
																														[Call:Int]
																															[Field:(x : String) -> Int]
																																[Local `(113255):Array<String>:Array<String>]
																																[FInstance:(x : String) -> Int]
																																	Array<String>
																																	push:(x : Array.T) -> Int
																															[Binop:String]
																																[Const:String] " extends "
																																+
																																[Call:String]
																																	[Field:(tp : haxe.macro.TypePath) -> String]
																																		[Const:haxe.macro.Printer] this
																																		[FInstance:(tp : haxe.macro.TypePath) -> String]
																																			haxe.macro.Printer
																																			printTypePath:(tp : haxe.macro.TypePath) -> String
																																	[Local tp(113257):haxe.macro.TypePath:haxe.macro.TypePath]
																											[Local `(113255):Array<String>:Array<String>]
																									[Else:Array<String>] [Block:Array<String>]
																										[Block:Array<String>]
																											[Var `(113258):Array<String>] [ArrayDecl:Array<String>]
																											[Block:Void]
																												[Var `1(113259):Int] [Const:Int] 0
																												[While:Void]
																													[Binop:Bool]
																														[Local `1(113259):Int:Int]
																														<
																														[Field:Int]
																															[Local interfaces(113247):Null<Array<haxe.macro.TypePath>>:Null<Array<haxe.macro.TypePath>>]
																															[FInstance:Int]
																																Array<haxe.macro.TypePath>
																																length:Int
																													[Block:Void]
																														[Var tp(113260):haxe.macro.TypePath]
																															[Array:haxe.macro.TypePath]
																																[Local interfaces(113247):Null<Array<haxe.macro.TypePath>>:Null<Array<haxe.macro.TypePath>>]
																																[Local `1(113259):Int:Int]
																														[Unop:Int]
																															++
																															Prefix
																															[Local `1(113259):Int:Int]
																														[Call:Int]
																															[Field:(x : String) -> Int]
																																[Local `(113258):Array<String>:Array<String>]
																																[FInstance:(x : String) -> Int]
																																	Array<String>
																																	push:(x : Array.T) -> Int
																															[Binop:String]
																																[Const:String] " implements "
																																+
																																[Call:String]
																																	[Field:(tp : haxe.macro.TypePath) -> String]
																																		[Const:haxe.macro.Printer] this
																																		[FInstance:(tp : haxe.macro.TypePath) -> String]
																																			haxe.macro.Printer
																																			printTypePath:(tp : haxe.macro.TypePath) -> String
																																	[Local tp(113260):haxe.macro.TypePath:haxe.macro.TypePath]
																											[Local `(113258):Array<String>:Array<String>]
																							[FInstance:(sep : String) -> String]
																								Array<String>
																								join:(sep : String) -> String
																						[Const:String] ""
																				[Else:String] [Block:String] [Const:String] ""
																	+
																	[Const:String] " {\n"
																+
																[Call:String]
																	[Field:(sep : String) -> String]
																		[Block:Array<String>]
																			[Var `(113261):Array<String>] [ArrayDecl:Array<String>]
																			[Block:Void]
																				[Var `1(113262):Int] [Const:Int] 0
																				[Var `2(113263):Array<haxe.macro.Field>]
																					[Field:Array<haxe.macro.Field>]
																						[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																						[FAnon:Array<haxe.macro.Field>] fields:Array<haxe.macro.Field>
																				[While:Void]
																					[Binop:Bool]
																						[Local `1(113262):Int:Int]
																						<
																						[Field:Int]
																							[Local `2(113263):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																							[FInstance:Int]
																								Array<haxe.macro.Field>
																								length:Int
																					[Block:Void]
																						[Var f(113264):haxe.macro.Field]
																							[Array:haxe.macro.Field]
																								[Local `2(113263):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																								[Local `1(113262):Int:Int]
																						[Unop:Int]
																							++
																							Prefix
																							[Local `1(113262):Int:Int]
																						[Call:Int]
																							[Field:(x : String) -> Int]
																								[Local `(113261):Array<String>:Array<String>]
																								[FInstance:(x : String) -> Int]
																									Array<String>
																									push:(x : Array.T) -> Int
																							[Binop:String]
																								[Field:String]
																									[Const:haxe.macro.Printer] this
																									[FInstance:String]
																										haxe.macro.Printer
																										tabs:String
																								+
																								[Call:String]
																									[Field:(f : haxe.macro.Field) -> String]
																										[Const:haxe.macro.Printer] this
																										[FInstance:(f : haxe.macro.Field) -> String]
																											haxe.macro.Printer
																											printFieldWithDelimiter:(f : haxe.macro.Field) -> String
																									[Local f(113264):haxe.macro.Field:haxe.macro.Field]
																			[Local `(113261):Array<String>:Array<String>]
																		[FInstance:(sep : String) -> String]
																			Array<String>
																			join:(sep : String) -> String
																	[Const:String] "\n"
															+
															[Const:String] "\n}"
										[Case:String]
											[Const:Int] 3
											[Block:String]
												[Var `8(113265):haxe.macro.ComplexType]
													[EnumParameter:haxe.macro.ComplexType]
														[Local `(113204):haxe.macro.TypeDefKind:haxe.macro.TypeDefKind]
														TDAlias
														0
												[Block:String]
													[Var ct(113266):haxe.macro.ComplexType] [Local `8(113265):haxe.macro.ComplexType:haxe.macro.ComplexType]
													[Block:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Binop:String]
																		[Binop:String]
																			[Const:String] "typedef "
																			+
																			[Field:String]
																				[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																				[FAnon:String] name:String
																		+
																		[Parenthesis:String]
																			[If:String]
																				[Parenthesis:Bool]
																					[Binop:Bool]
																						[Binop:Bool]
																							[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																								[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																								[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																							!=
																							[Const:Null<Array<haxe.macro.TypeParamDecl>>] null
																						&&
																						[Binop:Bool]
																							[Field:Int]
																								[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																									[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																									[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																								[FInstance:Int]
																									Array<haxe.macro.TypeParamDecl>
																									length:Int
																							>
																							[Const:Int] 0
																				[Then:String] [Block:String]
																					[Binop:String]
																						[Binop:String]
																							[Const:String] "<"
																							+
																							[Call:String]
																								[Field:(sep : String) -> String]
																									[Block:Array<String>]
																										[Var _this(113267):Null<Array<haxe.macro.TypeParamDecl>>]
																											[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																												[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																												[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																										[Var f(113268):haxe.macro.TypeParamDecl -> String]
																											[Field:(tpd : haxe.macro.TypeParamDecl) -> String]
																												[Const:haxe.macro.Printer] this
																												[FClosure:(tpd : haxe.macro.TypeParamDecl) -> String]
																													haxe.macro.Printer
																													printTypeParamDecl:(tpd : haxe.macro.TypeParamDecl) -> String
																										[Block:Array<String>]
																											[Var `(113269):Array<String>] [ArrayDecl:Array<String>]
																											[Block:Void]
																												[Var `1(113270):Int] [Const:Int] 0
																												[Var `2(113271):Array<haxe.macro.TypeParamDecl>] [Local _this(113267):Null<Array<haxe.macro.TypeParamDecl>>:Array<haxe.macro.TypeParamDecl>]
																												[While:Void]
																													[Binop:Bool]
																														[Local `1(113270):Int:Int]
																														<
																														[Field:Int]
																															[Local `2(113271):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																															[FInstance:Int]
																																Array<haxe.macro.TypeParamDecl>
																																length:Int
																													[Block:Void]
																														[Var v(113272):haxe.macro.TypeParamDecl]
																															[Array:haxe.macro.TypeParamDecl]
																																[Local `2(113271):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																																[Local `1(113270):Int:Int]
																														[Unop:Int]
																															++
																															Prefix
																															[Local `1(113270):Int:Int]
																														[Call:Int]
																															[Field:(x : String) -> Int]
																																[Local `(113269):Array<String>:Array<String>]
																																[FInstance:(x : String) -> Int]
																																	Array<String>
																																	push:(x : Array.T) -> Int
																															[Call:String]
																																[Local f(113268):haxe.macro.TypeParamDecl -> String:haxe.macro.TypeParamDecl -> String]
																																[Local v(113272):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
																											[Local `(113269):Array<String>:Array<String>]
																									[FInstance:(sep : String) -> String]
																										Array<String>
																										join:(sep : String) -> String
																								[Const:String] ", "
																						+
																						[Const:String] ">"
																				[Else:String] [Block:String] [Const:String] ""
																	+
																	[Const:String] " = "
																+
																[Parenthesis:String]
																	[Meta:String]
																		:ast(switch (ct) {
	case TExtend(tpl, fields):
		printExtension(tpl, fields);	
	case TAnonymous(fields):
		printStructure(fields);	
	case _:
		printComplexType(ct);	
})
																		[Switch:String]
																			[EnumIndex:Int] [Local ct(113266):haxe.macro.ComplexType:haxe.macro.ComplexType]
																			[Case:String]
																				[Const:Int] 2
																				[Block:String]
																					[Var `(113273):Array<haxe.macro.Field>]
																						[EnumParameter:Array<haxe.macro.Field>]
																							[Local ct(113266):haxe.macro.ComplexType:haxe.macro.ComplexType]
																							TAnonymous
																							0
																					[Block:String]
																						[Var fields(113274):Array<haxe.macro.Field>] [Local `(113273):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																						[Block:String]
																							[Call:String]
																								[Field:(fields : Array<haxe.macro.Field>) -> String]
																									[Const:haxe.macro.Printer] this
																									[FInstance:(fields : Array<haxe.macro.Field>) -> String]
																										haxe.macro.Printer
																										printStructure:(fields : Array<haxe.macro.Field>) -> String
																								[Local fields(113274):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																			[Case:String]
																				[Const:Int] 4
																				[Block:String]
																					[Var `2(113275):Array<haxe.macro.Field>]
																						[EnumParameter:Array<haxe.macro.Field>]
																							[Local ct(113266):haxe.macro.ComplexType:haxe.macro.ComplexType]
																							TExtend
																							1
																					[Var `1(113276):Array<haxe.macro.TypePath>]
																						[EnumParameter:Array<haxe.macro.TypePath>]
																							[Local ct(113266):haxe.macro.ComplexType:haxe.macro.ComplexType]
																							TExtend
																							0
																					[Block:String]
																						[Var fields(113277):Array<haxe.macro.Field>] [Local `2(113275):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																						[Var tpl(113278):Array<haxe.macro.TypePath>] [Local `1(113276):Array<haxe.macro.TypePath>:Array<haxe.macro.TypePath>]
																						[Block:String]
																							[Call:String]
																								[Field:(tpl : Array<haxe.macro.TypePath>, fields : Array<haxe.macro.Field>) -> String]
																									[Const:haxe.macro.Printer] this
																									[FInstance:(tpl : Array<haxe.macro.TypePath>, fields : Array<haxe.macro.Field>) -> String]
																										haxe.macro.Printer
																										printExtension:(tpl : Array<haxe.macro.TypePath>, fields : Array<haxe.macro.Field>) -> String
																								[Local tpl(113278):Array<haxe.macro.TypePath>:Array<haxe.macro.TypePath>]
																								[Local fields(113277):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																			[Default:String]
																				[Block:String]
																					[Call:String]
																						[Field:(ct : haxe.macro.ComplexType) -> String]
																							[Const:haxe.macro.Printer] this
																							[FInstance:(ct : haxe.macro.ComplexType) -> String]
																								haxe.macro.Printer
																								printComplexType:(ct : haxe.macro.ComplexType) -> String
																						[Local ct(113266):haxe.macro.ComplexType:haxe.macro.ComplexType]
															+
															[Const:String] ";"
										[Case:String]
											[Const:Int] 4
											[Block:String]
												[Var `7(113279):Null<Array<haxe.macro.ComplexType>>]
													[EnumParameter:Null<Array<haxe.macro.ComplexType>>]
														[Local `(113204):haxe.macro.TypeDefKind:haxe.macro.TypeDefKind]
														TDAbstract
														2
												[Var `6(113280):Null<Array<haxe.macro.ComplexType>>]
													[EnumParameter:Null<Array<haxe.macro.ComplexType>>]
														[Local `(113204):haxe.macro.TypeDefKind:haxe.macro.TypeDefKind]
														TDAbstract
														1
												[Var `5(113281):Null<haxe.macro.ComplexType>]
													[EnumParameter:Null<haxe.macro.ComplexType>]
														[Local `(113204):haxe.macro.TypeDefKind:haxe.macro.TypeDefKind]
														TDAbstract
														0
												[Block:String]
													[Var to(113282):Null<Array<haxe.macro.ComplexType>>] [Local `7(113279):Null<Array<haxe.macro.ComplexType>>:Null<Array<haxe.macro.ComplexType>>]
													[Var from(113283):Null<Array<haxe.macro.ComplexType>>] [Local `6(113280):Null<Array<haxe.macro.ComplexType>>:Null<Array<haxe.macro.ComplexType>>]
													[Var tthis(113284):Null<haxe.macro.ComplexType>] [Local `5(113281):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
													[Block:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Binop:String]
																		[Binop:String]
																			[Binop:String]
																				[Binop:String]
																					[Binop:String]
																						[Const:String] "abstract "
																						+
																						[Field:String]
																							[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																							[FAnon:String] name:String
																					+
																					[Parenthesis:String]
																						[If:String]
																							[Parenthesis:Bool]
																								[Binop:Bool]
																									[Binop:Bool]
																										[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																											[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																											[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																										!=
																										[Const:Null<Array<haxe.macro.TypeParamDecl>>] null
																									&&
																									[Binop:Bool]
																										[Field:Int]
																											[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																												[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																												[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																											[FInstance:Int]
																												Array<haxe.macro.TypeParamDecl>
																												length:Int
																										>
																										[Const:Int] 0
																							[Then:String] [Block:String]
																								[Binop:String]
																									[Binop:String]
																										[Const:String] "<"
																										+
																										[Call:String]
																											[Field:(sep : String) -> String]
																												[Block:Array<String>]
																													[Var _this(113285):Null<Array<haxe.macro.TypeParamDecl>>]
																														[Field:Null<Array<haxe.macro.TypeParamDecl>>]
																															[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																															[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
																													[Var f(113286):haxe.macro.TypeParamDecl -> String]
																														[Field:(tpd : haxe.macro.TypeParamDecl) -> String]
																															[Const:haxe.macro.Printer] this
																															[FClosure:(tpd : haxe.macro.TypeParamDecl) -> String]
																																haxe.macro.Printer
																																printTypeParamDecl:(tpd : haxe.macro.TypeParamDecl) -> String
																													[Block:Array<String>]
																														[Var `(113287):Array<String>] [ArrayDecl:Array<String>]
																														[Block:Void]
																															[Var `1(113288):Int] [Const:Int] 0
																															[Var `2(113289):Array<haxe.macro.TypeParamDecl>] [Local _this(113285):Null<Array<haxe.macro.TypeParamDecl>>:Array<haxe.macro.TypeParamDecl>]
																															[While:Void]
																																[Binop:Bool]
																																	[Local `1(113288):Int:Int]
																																	<
																																	[Field:Int]
																																		[Local `2(113289):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																																		[FInstance:Int]
																																			Array<haxe.macro.TypeParamDecl>
																																			length:Int
																																[Block:Void]
																																	[Var v(113290):haxe.macro.TypeParamDecl]
																																		[Array:haxe.macro.TypeParamDecl]
																																			[Local `2(113289):Array<haxe.macro.TypeParamDecl>:Array<haxe.macro.TypeParamDecl>]
																																			[Local `1(113288):Int:Int]
																																	[Unop:Int]
																																		++
																																		Prefix
																																		[Local `1(113288):Int:Int]
																																	[Call:Int]
																																		[Field:(x : String) -> Int]
																																			[Local `(113287):Array<String>:Array<String>]
																																			[FInstance:(x : String) -> Int]
																																				Array<String>
																																				push:(x : Array.T) -> Int
																																		[Call:String]
																																			[Local f(113286):haxe.macro.TypeParamDecl -> String:haxe.macro.TypeParamDecl -> String]
																																			[Local v(113290):haxe.macro.TypeParamDecl:haxe.macro.TypeParamDecl]
																														[Local `(113287):Array<String>:Array<String>]
																												[FInstance:(sep : String) -> String]
																													Array<String>
																													join:(sep : String) -> String
																											[Const:String] ", "
																									+
																									[Const:String] ">"
																							[Else:String] [Block:String] [Const:String] ""
																				+
																				[Parenthesis:String]
																					[If:String]
																						[Binop:Bool]
																							[Local tthis(113284):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
																							==
																							[Const:Null<haxe.macro.ComplexType>] null
																						[Then:String] [Block:String] [Const:String] ""
																						[Else:String] [Block:String]
																							[Binop:String]
																								[Binop:String]
																									[Const:String] "("
																									+
																									[Call:String]
																										[Field:(ct : haxe.macro.ComplexType) -> String]
																											[Const:haxe.macro.Printer] this
																											[FInstance:(ct : haxe.macro.ComplexType) -> String]
																												haxe.macro.Printer
																												printComplexType:(ct : haxe.macro.ComplexType) -> String
																										[Local tthis(113284):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
																								+
																								[Const:String] ")"
																			+
																			[Parenthesis:String]
																				[If:String]
																					[Binop:Bool]
																						[Local from(113283):Null<Array<haxe.macro.ComplexType>>:Null<Array<haxe.macro.ComplexType>>]
																						==
																						[Const:Null<Array<haxe.macro.ComplexType>>] null
																					[Then:String] [Block:String] [Const:String] ""
																					[Else:String] [Block:String]
																						[Call:String]
																							[Field:(sep : String) -> String]
																								[Block:Array<String>]
																									[Var `(113291):Array<String>] [ArrayDecl:Array<String>]
																									[Block:Void]
																										[Var `1(113292):Int] [Const:Int] 0
																										[While:Void]
																											[Binop:Bool]
																												[Local `1(113292):Int:Int]
																												<
																												[Field:Int]
																													[Local from(113283):Null<Array<haxe.macro.ComplexType>>:Null<Array<haxe.macro.ComplexType>>]
																													[FInstance:Int]
																														Array<haxe.macro.ComplexType>
																														length:Int
																											[Block:Void]
																												[Var f(113293):haxe.macro.ComplexType]
																													[Array:haxe.macro.ComplexType]
																														[Local from(113283):Null<Array<haxe.macro.ComplexType>>:Null<Array<haxe.macro.ComplexType>>]
																														[Local `1(113292):Int:Int]
																												[Unop:Int]
																													++
																													Prefix
																													[Local `1(113292):Int:Int]
																												[Call:Int]
																													[Field:(x : String) -> Int]
																														[Local `(113291):Array<String>:Array<String>]
																														[FInstance:(x : String) -> Int]
																															Array<String>
																															push:(x : Array.T) -> Int
																													[Binop:String]
																														[Const:String] " from "
																														+
																														[Call:String]
																															[Field:(ct : haxe.macro.ComplexType) -> String]
																																[Const:haxe.macro.Printer] this
																																[FInstance:(ct : haxe.macro.ComplexType) -> String]
																																	haxe.macro.Printer
																																	printComplexType:(ct : haxe.macro.ComplexType) -> String
																															[Local f(113293):haxe.macro.ComplexType:haxe.macro.ComplexType]
																									[Local `(113291):Array<String>:Array<String>]
																								[FInstance:(sep : String) -> String]
																									Array<String>
																									join:(sep : String) -> String
																							[Const:String] ""
																		+
																		[Parenthesis:String]
																			[If:String]
																				[Binop:Bool]
																					[Local to(113282):Null<Array<haxe.macro.ComplexType>>:Null<Array<haxe.macro.ComplexType>>]
																					==
																					[Const:Null<Array<haxe.macro.ComplexType>>] null
																				[Then:String] [Block:String] [Const:String] ""
																				[Else:String] [Block:String]
																					[Call:String]
																						[Field:(sep : String) -> String]
																							[Block:Array<String>]
																								[Var `(113294):Array<String>] [ArrayDecl:Array<String>]
																								[Block:Void]
																									[Var `1(113295):Int] [Const:Int] 0
																									[While:Void]
																										[Binop:Bool]
																											[Local `1(113295):Int:Int]
																											<
																											[Field:Int]
																												[Local to(113282):Null<Array<haxe.macro.ComplexType>>:Null<Array<haxe.macro.ComplexType>>]
																												[FInstance:Int]
																													Array<haxe.macro.ComplexType>
																													length:Int
																										[Block:Void]
																											[Var t(113296):haxe.macro.ComplexType]
																												[Array:haxe.macro.ComplexType]
																													[Local to(113282):Null<Array<haxe.macro.ComplexType>>:Null<Array<haxe.macro.ComplexType>>]
																													[Local `1(113295):Int:Int]
																											[Unop:Int]
																												++
																												Prefix
																												[Local `1(113295):Int:Int]
																											[Call:Int]
																												[Field:(x : String) -> Int]
																													[Local `(113294):Array<String>:Array<String>]
																													[FInstance:(x : String) -> Int]
																														Array<String>
																														push:(x : Array.T) -> Int
																												[Binop:String]
																													[Const:String] " to "
																													+
																													[Call:String]
																														[Field:(ct : haxe.macro.ComplexType) -> String]
																															[Const:haxe.macro.Printer] this
																															[FInstance:(ct : haxe.macro.ComplexType) -> String]
																																haxe.macro.Printer
																																printComplexType:(ct : haxe.macro.ComplexType) -> String
																														[Local t(113296):haxe.macro.ComplexType:haxe.macro.ComplexType]
																								[Local `(113294):Array<String>:Array<String>]
																							[FInstance:(sep : String) -> String]
																								Array<String>
																								join:(sep : String) -> String
																						[Const:String] ""
																	+
																	[Const:String] " {\n"
																+
																[Call:String]
																	[Field:(sep : String) -> String]
																		[Block:Array<String>]
																			[Var `(113297):Array<String>] [ArrayDecl:Array<String>]
																			[Block:Void]
																				[Var `1(113298):Int] [Const:Int] 0
																				[Var `2(113299):Array<haxe.macro.Field>]
																					[Field:Array<haxe.macro.Field>]
																						[Local t(113044):haxe.macro.TypeDefinition:haxe.macro.TypeDefinition]
																						[FAnon:Array<haxe.macro.Field>] fields:Array<haxe.macro.Field>
																				[While:Void]
																					[Binop:Bool]
																						[Local `1(113298):Int:Int]
																						<
																						[Field:Int]
																							[Local `2(113299):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																							[FInstance:Int]
																								Array<haxe.macro.Field>
																								length:Int
																					[Block:Void]
																						[Var f(113300):haxe.macro.Field]
																							[Array:haxe.macro.Field]
																								[Local `2(113299):Array<haxe.macro.Field>:Array<haxe.macro.Field>]
																								[Local `1(113298):Int:Int]
																						[Unop:Int]
																							++
																							Prefix
																							[Local `1(113298):Int:Int]
																						[Call:Int]
																							[Field:(x : String) -> Int]
																								[Local `(113297):Array<String>:Array<String>]
																								[FInstance:(x : String) -> Int]
																									Array<String>
																									push:(x : Array.T) -> Int
																							[Binop:String]
																								[Field:String]
																									[Const:haxe.macro.Printer] this
																									[FInstance:String]
																										haxe.macro.Printer
																										tabs:String
																								+
																								[Call:String]
																									[Field:(f : haxe.macro.Field) -> String]
																										[Const:haxe.macro.Printer] this
																										[FInstance:(f : haxe.macro.Field) -> String]
																											haxe.macro.Printer
																											printFieldWithDelimiter:(f : haxe.macro.Field) -> String
																									[Local f(113300):haxe.macro.Field:haxe.macro.Field]
																			[Local `(113297):Array<String>:Array<String>]
																		[FInstance:(sep : String) -> String]
																			Array<String>
																			join:(sep : String) -> String
																	[Const:String] "\n"
															+
															[Const:String] "\n}"
			[Binop:String]
				[Field:String]
					[Const:haxe.macro.Printer] this
					[FInstance:String]
						haxe.macro.Printer
						tabs:String
				=
				[Local old(113046):String:String]
			[Return:Dynamic] [Local str(113301):String:String]

	function printFieldWithDelimiter[Function:(f : haxe.macro.Field) -> String]
		[Arg:haxe.macro.Field] [Local f(113122):haxe.macro.Field]
		[Block:Dynamic]
			[Return:Dynamic]
				[Binop:String]
					[Call:String]
						[Field:(field : haxe.macro.Field) -> String]
							[Const:haxe.macro.Printer] this
							[FInstance:(field : haxe.macro.Field) -> String]
								haxe.macro.Printer
								printField:(field : haxe.macro.Field) -> String
						[Local f(113122):haxe.macro.Field:haxe.macro.Field]
					+
					[Meta:String]
						:ast(switch (f.kind) {
	case FVar(_, _), FProp(_, _, _, _):
		";";	
	case FFun({ expr : null }):
		";";	
	case FFun({ expr : { expr : EBlock(_) } }):
		"";	
	case FFun(_):
		";";	
	case _:
		"";	
})
						[Block:String]
							[Var `(113138):haxe.macro.FieldType]
								[Field:haxe.macro.FieldType]
									[Local f(113122):haxe.macro.Field:haxe.macro.Field]
									[FAnon:haxe.macro.FieldType] kind:haxe.macro.FieldType
							[Switch:String]
								[Meta:Int]
									:exhaustive
									[EnumIndex:Int] [Local `(113138):haxe.macro.FieldType:haxe.macro.FieldType]
								[Case:String]
									[Const:Int] 0
									[Block:String]
										[Var `6(113139):Null<haxe.macro.Expr>]
											[EnumParameter:Null<haxe.macro.Expr>]
												[Local `(113138):haxe.macro.FieldType:haxe.macro.FieldType]
												FVar
												1
										[Var `5(113140):Null<haxe.macro.ComplexType>]
											[EnumParameter:Null<haxe.macro.ComplexType>]
												[Local `(113138):haxe.macro.FieldType:haxe.macro.FieldType]
												FVar
												0
										[Block:String] [Const:String] ";"
								[Case:String]
									[Const:Int] 1
									[Block:String]
										[Var `7(113141):haxe.macro.Function]
											[EnumParameter:haxe.macro.Function]
												[Local `(113138):haxe.macro.FieldType:haxe.macro.FieldType]
												FFun
												0
										[Block:String]
											[Var `11(113142):Null<haxe.macro.ComplexType>]
												[Field:Null<haxe.macro.ComplexType>]
													[Local `7(113141):haxe.macro.Function:haxe.macro.Function]
													[FAnon:Null<haxe.macro.ComplexType>] ret:Null<haxe.macro.ComplexType>
											[Var `10(113143):Null<Array<haxe.macro.TypeParamDecl>>]
												[Field:Null<Array<haxe.macro.TypeParamDecl>>]
													[Local `7(113141):haxe.macro.Function:haxe.macro.Function]
													[FAnon:Null<Array<haxe.macro.TypeParamDecl>>] params:Null<Array<haxe.macro.TypeParamDecl>>
											[Var `9(113144):Null<haxe.macro.Expr>]
												[Field:Null<haxe.macro.Expr>]
													[Local `7(113141):haxe.macro.Function:haxe.macro.Function]
													[FAnon:Null<haxe.macro.Expr>] expr:Null<haxe.macro.Expr>
											[Var `8(113145):Array<haxe.macro.FunctionArg>]
												[Field:Array<haxe.macro.FunctionArg>]
													[Local `7(113141):haxe.macro.Function:haxe.macro.Function]
													[FAnon:Array<haxe.macro.FunctionArg>] args:Array<haxe.macro.FunctionArg>
											[If:String]
												[Binop:Bool]
													[Local `9(113144):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
													==
													[Const:Null<haxe.macro.Expr>] null
												[Then:String] [Block:String] [Const:String] ";"
												[Else:String] [Block:String]
													[Var `13(113146):haxe.macro.Position]
														[Field:haxe.macro.Position]
															[Local `9(113144):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
															[FAnon:haxe.macro.Position] pos:haxe.macro.Position
													[Var `12(113147):haxe.macro.ExprDef]
														[Field:haxe.macro.ExprDef]
															[Local `9(113144):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
															[FAnon:haxe.macro.ExprDef] expr:haxe.macro.ExprDef
													[If:String]
														[Binop:Bool]
															[EnumIndex:Int] [Local `12(113147):haxe.macro.ExprDef:haxe.macro.ExprDef]
															==
															[Const:Int] 12
														[Then:String] [Block:String]
															[Var `14(113148):Array<haxe.macro.Expr>]
																[EnumParameter:Array<haxe.macro.Expr>]
																	[Local `12(113147):haxe.macro.ExprDef:haxe.macro.ExprDef]
																	EBlock
																	0
															[Block:String] [Const:String] ""
														[Else:String] [Block:String] [Const:String] ";"
								[Case:String]
									[Const:Int] 2
									[Block:String]
										[Var `4(113149):Null<haxe.macro.Expr>]
											[EnumParameter:Null<haxe.macro.Expr>]
												[Local `(113138):haxe.macro.FieldType:haxe.macro.FieldType]
												FProp
												3
										[Var `3(113150):Null<haxe.macro.ComplexType>]
											[EnumParameter:Null<haxe.macro.ComplexType>]
												[Local `(113138):haxe.macro.FieldType:haxe.macro.FieldType]
												FProp
												2
										[Var `2(113151):String]
											[EnumParameter:String]
												[Local `(113138):haxe.macro.FieldType:haxe.macro.FieldType]
												FProp
												1
										[Var `1(113152):String]
											[EnumParameter:String]
												[Local `(113138):haxe.macro.FieldType:haxe.macro.FieldType]
												FProp
												0
										[Block:String] [Const:String] ";"

	@:value({ prefix : "" })
	function opt<T : opt.T>[Function:(v : opt.T, f : (opt.T -> String), ?prefix : String) -> String]
		[Arg:opt.T] [Local v(112398):opt.T]
		[Arg:opt.T -> String] [Local f(112399):opt.T -> String]
		[Arg:String]
			[Local prefix(112400):String]
			[Const:String] ""
		[Return:Dynamic]
			[If:String]
				[Binop:Bool]
					[Local v(112398):opt.T:opt.T]
					==
					[Const:opt.T] null
				[Then:String] [Block:String] [Const:String] ""
				[Else:String] [Block:String]
					[Parenthesis:String]
						[Binop:String]
							[Local prefix(112400):String:String]
							+
							[Call:String]
								[Local f(112399):opt.T -> String:opt.T -> String]
								[Local v(112398):opt.T:opt.T]

	public function printExprWithPositions[Function:(e : haxe.macro.Expr) -> String]
		[Arg:haxe.macro.Expr] [Local e(113302):haxe.macro.Expr]
		[Block:Dynamic]
			[Var `this(113315):haxe.macro.Printer] [Const:haxe.macro.Printer] this
			[Var buffer(113303):StringBuf] [New:StringBuf] StringBuf
			[Var format4(113304):(i : Int) -> String]
				[Function:(i : Int) -> String]
					[Arg:Int] [Local i(113305):Int]
					[Block:Dynamic]
						[Return:Dynamic]
							[Call:String]
								[Field:(s : String, c : String, l : Int) -> String]
									[TypeExpr StringTools:Class<StringTools>]
									[FStatic:(s : String, c : String, l : Int) -> String]
										StringTools
										lpad:(s : String, c : String, l : Int) -> String
								[Call:String]
									[Field:(s : Dynamic) -> String]
										[TypeExpr Std:Class<Std>]
										[FStatic:(s : Dynamic) -> String]
											Std
											string:(s : Dynamic) -> String
									[Local i(113305):Int:Int]
								[Const:String] " "
								[Const:Int] 4
			[Var loop(113306):Array<(tabs : String, e : haxe.macro.Expr) -> Void>] [ArrayDecl:Array<(tabs : String, e : haxe.macro.Expr) -> Void>] [Const:(tabs : String, e : haxe.macro.Expr) -> Void] null
			[Binop:(tabs : String, e : haxe.macro.Expr) -> Void]
				[Array:(tabs : String, e : haxe.macro.Expr) -> Void]
					[Local loop(113306):Array<(tabs : String, e : haxe.macro.Expr) -> Void>:Array<(tabs : String, e : haxe.macro.Expr) -> Void>]
					[Const:Int] 0
				=
				[Function:(tabs : String, e : haxe.macro.Expr) -> Void]
					[Arg:String] [Local tabs(113307):String]
					[Arg:haxe.macro.Expr] [Local e(113308):haxe.macro.Expr]
					[Block:Void]
						[Var add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void]
							[Function:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
								[Arg:String] [Local s(113310):String]
								[Arg:Null<haxe.macro.Position>]
									[Local p(113311):Null<haxe.macro.Position>]
									[Const:Null<haxe.macro.Position>] null
								[Block:Void]
									[If:Void]
										[Binop:Bool]
											[Local p(113311):Null<haxe.macro.Position>:Null<haxe.macro.Position>]
											==
											[Const:Null<haxe.macro.Position>] null
										[Then:Null<haxe.macro.Position>] [Block:Null<haxe.macro.Position>]
											[Binop:Null<haxe.macro.Position>]
												[Local p(113311):Null<haxe.macro.Position>:Null<haxe.macro.Position>]
												=
												[Field:haxe.macro.Position]
													[Local e(113308):haxe.macro.Expr:haxe.macro.Expr]
													[FAnon:haxe.macro.Position] pos:haxe.macro.Position
									[Var p(113312):{ min : Int, max : Int, file : String }]
										[Call:{ min : Int, max : Int, file : String }]
											[Field:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }]
												[TypeExpr haxe.macro.Context:Class<haxe.macro.Context>]
												[FStatic:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }]
													haxe.macro.Context
													getPosInfos:(p : haxe.macro.Position) -> { min : Int, max : Int, file : String }
											[Local p(113311):Null<haxe.macro.Position>:Null<haxe.macro.Position>]
									[Call:Void]
										[Field:(x : String) -> Void]
											[Local buffer(113303):StringBuf:StringBuf]
											[FInstance:(x : String) -> Void]
												StringBuf
												add:(x : add.T) -> Void
										[Binop:String]
											[Binop:String]
												[Binop:String]
													[Binop:String]
														[Binop:String]
															[Binop:String]
																[Binop:String]
																	[Const:String] ""
																	+
																	[Call:String]
																		[Local format4(113304):(i : Int) -> String:(i : Int) -> String]
																		[Field:Int]
																			[Local p(113312):{ min : Int, max : Int, file : String }:{ min : Int, max : Int, file : String }]
																			[FAnon:Int] min:Int
																+
																[Const:String] "-"
															+
															[Call:String]
																[Local format4(113304):(i : Int) -> String:(i : Int) -> String]
																[Field:Int]
																	[Local p(113312):{ min : Int, max : Int, file : String }:{ min : Int, max : Int, file : String }]
																	[FAnon:Int] max:Int
														+
														[Const:String] " "
													+
													[Local tabs(113307):String:String]
												+
												[Local s(113310):String:String]
											+
											[Const:String] "\n"
						[Var loopI(113313):(e : haxe.macro.Expr) -> Void]
							[Function:(e : haxe.macro.Expr) -> Void]
								[Arg:haxe.macro.Expr] [Local e(113314):haxe.macro.Expr]
								[Call:Void]
									[Array:(tabs : String, e : haxe.macro.Expr) -> Void]
										[Local loop(113306):Array<(tabs : String, e : haxe.macro.Expr) -> Void>:Array<(tabs : String, e : haxe.macro.Expr) -> Void>]
										[Const:Int] 0
									[Binop:String]
										[Local tabs(113307):String:String]
										+
										[Field:String]
											[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
											[FInstance:String]
												haxe.macro.Printer
												tabString:String
									[Local e(113314):haxe.macro.Expr:haxe.macro.Expr]
						[Meta:Void]
							:ast(switch (e.expr) {
	case EConst(c):
		add(printConstant(c));	
	case EArray(e1, e2):
		add("EArray");
		loopI(e1);
		loopI(e2);	
	case EBinop(op, e1, e2):
		add("EBinop " + printBinop(op));
		loopI(e1);
		loopI(e2);	
	case EField(e, field):
		add("EField " + field);
		loopI(e);	
	case EParenthesis(e):
		add("EParenthesis");
		loopI(e);	
	case EObjectDecl(fields):
		add("EObjectDecl");
		for (field  in  fields) {
			add(field.field);
			loopI(field.expr);
		};	
	case EArrayDecl(values):
		add("EArrayDecl");
		values.iter(loopI);	
	case ECall(e, params):
		add("ECall");
		loopI(e);
		params.iter(loopI);	
	case ENew(tp, params):
		add("ENew " + printTypePath(tp));
		params.iter(loopI);	
	case EUnop(op, postFix, e):
		add("EUnop " + printUnop(op));
		loopI(e);	
	case EVars(vars):
		add("EVars");
		for (v  in  vars) {
			if (v.expr != null) {
				add(v.name);
				loopI(v.expr);
			};
		};	
	case EFunction(_, f):
		add("EFunction");
		if (f.expr != null) {
			loopI(f.expr);
		};	
	case EBlock(exprs):
		add("EBlock");
		exprs.iter(loopI);	
	case EFor(it, expr):
		add("EFor");
		loopI(it);
		loopI(expr);	
	case EIf(econd, eif, eelse):
		add("EIf");
		loopI(econd);
		loopI(eif);
		if (eelse != null) {
			loopI(eelse);
		};	
	case EWhile(econd, e, normalWhile):
		add("EWhile");
		loopI(econd);
		loopI(e);	
	case ESwitch(e, cases, edef):
		add("ESwitch");
		loopI(e);
		for (c  in  cases) {
			for (pat  in  c.values) {
				loop(tabs + tabString + tabString, pat);
			};
			if (c.expr != null) {
				loop(tabs + tabString + tabString + tabString, c.expr);
			};
		};
		if (edef != null) {
			loop(tabs + tabString + tabString + tabString, edef);
		};	
	case ETry(e, catches):
		add("ETry");
		loopI(e);
		for (c  in  catches) {
			loop(tabs + tabString + tabString, c.expr);
		};	
	case EReturn(e):
		add("EReturn");
		if (e != null) {
			loopI(e);
		};	
	case EBreak:
		add("EBreak");	
	case EContinue:
		add("EContinue");	
	case EUntyped(e):
		add("EUntyped");
		loopI(e);	
	case EThrow(e):
		add("EThrow");
		loopI(e);	
	case ECast(e, t):
		add("ECast");
		loopI(e);	
	case EDisplay(e, displayKind):
		add("EDisplay");
		loopI(e);	
	case EDisplayNew(t):
		add("EDisplayNew");	
	case ETernary(econd, eif, eelse):
		add("ETernary");
		loopI(econd);
		loopI(eif);
		loopI(eelse);	
	case ECheckType(e, t):
		add("ECheckType");
		loopI(e);	
	case EMeta(s, e):
		add("EMeta " + printMetadata(s));
		loopI(e);	
})
							[Block:Void]
								[Var `(113427):haxe.macro.ExprDef]
									[Field:haxe.macro.ExprDef]
										[Local e(113308):haxe.macro.Expr:haxe.macro.Expr]
										[FAnon:haxe.macro.ExprDef] expr:haxe.macro.ExprDef
								[Switch:Void]
									[Meta:Int]
										:exhaustive
										[EnumIndex:Int] [Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
									[Case:Void]
										[Const:Int] 0
										[Block:Void]
											[Var `48(113428):haxe.macro.Constant]
												[EnumParameter:haxe.macro.Constant]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EConst
													0
											[Block:Void]
												[Var c(113429):haxe.macro.Constant] [Local `48(113428):haxe.macro.Constant:haxe.macro.Constant]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Call:String]
															[Field:(c : haxe.macro.Constant) -> String]
																[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																[FInstance:(c : haxe.macro.Constant) -> String]
																	haxe.macro.Printer
																	printConstant:(c : haxe.macro.Constant) -> String
															[Local c(113429):haxe.macro.Constant:haxe.macro.Constant]
														[Const:Null<haxe.macro.Position>] null
									[Case:Void]
										[Const:Int] 1
										[Block:Void]
											[Var `36(113430):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EArray
													1
											[Var `35(113431):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EArray
													0
											[Block:Void]
												[Var e2(113432):haxe.macro.Expr] [Local `36(113430):haxe.macro.Expr:haxe.macro.Expr]
												[Var e1(113433):haxe.macro.Expr] [Local `35(113431):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EArray"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e1(113433):haxe.macro.Expr:haxe.macro.Expr]
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e2(113432):haxe.macro.Expr:haxe.macro.Expr]
									[Case:Void]
										[Const:Int] 2
										[Block:Void]
											[Var `44(113434):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EBinop
													2
											[Var `43(113435):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EBinop
													1
											[Var `42(113436):haxe.macro.Binop]
												[EnumParameter:haxe.macro.Binop]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EBinop
													0
											[Block:Void]
												[Var e2(113437):haxe.macro.Expr] [Local `44(113434):haxe.macro.Expr:haxe.macro.Expr]
												[Var e1(113438):haxe.macro.Expr] [Local `43(113435):haxe.macro.Expr:haxe.macro.Expr]
												[Var op(113439):haxe.macro.Binop] [Local `42(113436):haxe.macro.Binop:haxe.macro.Binop]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Binop:String]
															[Const:String] "EBinop "
															+
															[Call:String]
																[Field:(op : haxe.macro.Binop) -> String]
																	[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																	[FInstance:(op : haxe.macro.Binop) -> String]
																		haxe.macro.Printer
																		printBinop:(op : haxe.macro.Binop) -> String
																[Local op(113439):haxe.macro.Binop:haxe.macro.Binop]
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e1(113438):haxe.macro.Expr:haxe.macro.Expr]
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e2(113437):haxe.macro.Expr:haxe.macro.Expr]
									[Case:Void]
										[Const:Int] 3
										[Block:Void]
											[Var `38(113440):String]
												[EnumParameter:String]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EField
													1
											[Var `37(113441):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EField
													0
											[Block:Void]
												[Var field(113442):String] [Local `38(113440):String:String]
												[Var e(113443):haxe.macro.Expr] [Local `37(113441):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Binop:String]
															[Const:String] "EField "
															+
															[Local field(113442):String:String]
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e(113443):haxe.macro.Expr:haxe.macro.Expr]
									[Case:Void]
										[Const:Int] 4
										[Block:Void]
											[Var `6(113444):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EParenthesis
													0
											[Block:Void]
												[Var e(113445):haxe.macro.Expr] [Local `6(113444):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EParenthesis"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e(113445):haxe.macro.Expr:haxe.macro.Expr]
									[Case:Void]
										[Const:Int] 5
										[Block:Void]
											[Var `1(113446):Array<haxe.macro.ObjectField>]
												[EnumParameter:Array<haxe.macro.ObjectField>]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EObjectDecl
													0
											[Block:Void]
												[Var fields(113447):Array<haxe.macro.ObjectField>] [Local `1(113446):Array<haxe.macro.ObjectField>:Array<haxe.macro.ObjectField>]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EObjectDecl"
														[Const:Null<haxe.macro.Position>] null
													[Block:Void]
														[Var `(113448):Int] [Const:Int] 0
														[While:Void]
															[Binop:Bool]
																[Local `(113448):Int:Int]
																<
																[Field:Int]
																	[Local fields(113447):Array<haxe.macro.ObjectField>:Array<haxe.macro.ObjectField>]
																	[FInstance:Int]
																		Array<haxe.macro.ObjectField>
																		length:Int
															[Block:Void]
																[Var field(113449):haxe.macro.ObjectField]
																	[Array:haxe.macro.ObjectField]
																		[Local fields(113447):Array<haxe.macro.ObjectField>:Array<haxe.macro.ObjectField>]
																		[Local `(113448):Int:Int]
																[Unop:Int]
																	++
																	Prefix
																	[Local `(113448):Int:Int]
																[Call:Void]
																	[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
																	[Field:String]
																		[Local field(113449):haxe.macro.ObjectField:haxe.macro.ObjectField]
																		[FAnon:String] field:String
																	[Const:Null<haxe.macro.Position>] null
																[Call:Void]
																	[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
																	[Field:haxe.macro.Expr]
																		[Local field(113449):haxe.macro.ObjectField:haxe.macro.ObjectField]
																		[FAnon:haxe.macro.Expr] expr:haxe.macro.Expr
									[Case:Void]
										[Const:Int] 6
										[Block:Void]
											[Var `39(113450):Array<haxe.macro.Expr>]
												[EnumParameter:Array<haxe.macro.Expr>]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EArrayDecl
													0
											[Block:Void]
												[Var values(113451):Array<haxe.macro.Expr>] [Local `39(113450):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EArrayDecl"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Field:(it : Iterable<haxe.macro.Expr>, f : ((item : haxe.macro.Expr) -> Void)) -> Void]
															[TypeExpr Lambda:Class<Lambda>]
															[FStatic:(it : Iterable<haxe.macro.Expr>, f : ((item : haxe.macro.Expr) -> Void)) -> Void]
																Lambda
																iter:(it : Iterable<iter.A>, f : ((item : iter.A) -> Void)) -> Void
														[Local values(113451):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
									[Case:Void]
										[Const:Int] 7
										[Block:Void]
											[Var `3(113452):Array<haxe.macro.Expr>]
												[EnumParameter:Array<haxe.macro.Expr>]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ECall
													1
											[Var `2(113453):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ECall
													0
											[Block:Void]
												[Var params(113454):Array<haxe.macro.Expr>] [Local `3(113452):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
												[Var e(113455):haxe.macro.Expr] [Local `2(113453):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "ECall"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e(113455):haxe.macro.Expr:haxe.macro.Expr]
													[Call:Void]
														[Field:(it : Iterable<haxe.macro.Expr>, f : ((item : haxe.macro.Expr) -> Void)) -> Void]
															[TypeExpr Lambda:Class<Lambda>]
															[FStatic:(it : Iterable<haxe.macro.Expr>, f : ((item : haxe.macro.Expr) -> Void)) -> Void]
																Lambda
																iter:(it : Iterable<iter.A>, f : ((item : iter.A) -> Void)) -> Void
														[Local params(113454):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
									[Case:Void]
										[Const:Int] 8
										[Block:Void]
											[Var `8(113456):Array<haxe.macro.Expr>]
												[EnumParameter:Array<haxe.macro.Expr>]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ENew
													1
											[Var `7(113457):haxe.macro.TypePath]
												[EnumParameter:haxe.macro.TypePath]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ENew
													0
											[Block:Void]
												[Var params(113458):Array<haxe.macro.Expr>] [Local `8(113456):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
												[Var tp(113459):haxe.macro.TypePath] [Local `7(113457):haxe.macro.TypePath:haxe.macro.TypePath]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Binop:String]
															[Const:String] "ENew "
															+
															[Call:String]
																[Field:(tp : haxe.macro.TypePath) -> String]
																	[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																	[FInstance:(tp : haxe.macro.TypePath) -> String]
																		haxe.macro.Printer
																		printTypePath:(tp : haxe.macro.TypePath) -> String
																[Local tp(113459):haxe.macro.TypePath:haxe.macro.TypePath]
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Field:(it : Iterable<haxe.macro.Expr>, f : ((item : haxe.macro.Expr) -> Void)) -> Void]
															[TypeExpr Lambda:Class<Lambda>]
															[FStatic:(it : Iterable<haxe.macro.Expr>, f : ((item : haxe.macro.Expr) -> Void)) -> Void]
																Lambda
																iter:(it : Iterable<iter.A>, f : ((item : iter.A) -> Void)) -> Void
														[Local params(113458):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
									[Case:Void]
										[Const:Int] 9
										[Block:Void]
											[Var `20(113460):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EUnop
													2
											[Var `19(113461):Bool]
												[EnumParameter:Bool]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EUnop
													1
											[Var `18(113462):haxe.macro.Unop]
												[EnumParameter:haxe.macro.Unop]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EUnop
													0
											[Block:Void]
												[Var e(113463):haxe.macro.Expr] [Local `20(113460):haxe.macro.Expr:haxe.macro.Expr]
												[Var postFix(113464):Bool] [Local `19(113461):Bool:Bool]
												[Var op(113465):haxe.macro.Unop] [Local `18(113462):haxe.macro.Unop:haxe.macro.Unop]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Binop:String]
															[Const:String] "EUnop "
															+
															[Call:String]
																[Field:(op : haxe.macro.Unop) -> String]
																	[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																	[FInstance:(op : haxe.macro.Unop) -> String]
																		haxe.macro.Printer
																		printUnop:(op : haxe.macro.Unop) -> String
																[Local op(113465):haxe.macro.Unop:haxe.macro.Unop]
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e(113463):haxe.macro.Expr:haxe.macro.Expr]
									[Case:Void]
										[Const:Int] 10
										[Block:Void]
											[Var `31(113466):Array<haxe.macro.Var>]
												[EnumParameter:Array<haxe.macro.Var>]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EVars
													0
											[Block:Void]
												[Var vars(113467):Array<haxe.macro.Var>] [Local `31(113466):Array<haxe.macro.Var>:Array<haxe.macro.Var>]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EVars"
														[Const:Null<haxe.macro.Position>] null
													[Block:Void]
														[Var `(113468):Int] [Const:Int] 0
														[While:Void]
															[Binop:Bool]
																[Local `(113468):Int:Int]
																<
																[Field:Int]
																	[Local vars(113467):Array<haxe.macro.Var>:Array<haxe.macro.Var>]
																	[FInstance:Int]
																		Array<haxe.macro.Var>
																		length:Int
															[Block:Void]
																[Var v(113469):haxe.macro.Var]
																	[Array:haxe.macro.Var]
																		[Local vars(113467):Array<haxe.macro.Var>:Array<haxe.macro.Var>]
																		[Local `(113468):Int:Int]
																[Unop:Int]
																	++
																	Prefix
																	[Local `(113468):Int:Int]
																[If:Void]
																	[Binop:Bool]
																		[Field:Null<haxe.macro.Expr>]
																			[Local v(113469):haxe.macro.Var:haxe.macro.Var]
																			[FAnon:Null<haxe.macro.Expr>] expr:Null<haxe.macro.Expr>
																		!=
																		[Const:Null<haxe.macro.Expr>] null
																	[Then:Void] [Block:Void]
																		[Call:Void]
																			[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
																			[Field:String]
																				[Local v(113469):haxe.macro.Var:haxe.macro.Var]
																				[FAnon:String] name:String
																			[Const:Null<haxe.macro.Position>] null
																		[Call:Void]
																			[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
																			[Field:Null<haxe.macro.Expr>]
																				[Local v(113469):haxe.macro.Var:haxe.macro.Var]
																				[FAnon:Null<haxe.macro.Expr>] expr:Null<haxe.macro.Expr>
									[Case:Void]
										[Const:Int] 11
										[Block:Void]
											[Var `22(113470):haxe.macro.Function]
												[EnumParameter:haxe.macro.Function]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EFunction
													1
											[Var `21(113471):Null<haxe.macro.FunctionKind>]
												[EnumParameter:Null<haxe.macro.FunctionKind>]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EFunction
													0
											[Block:Void]
												[Var f(113472):haxe.macro.Function] [Local `22(113470):haxe.macro.Function:haxe.macro.Function]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EFunction"
														[Const:Null<haxe.macro.Position>] null
													[If:Void]
														[Binop:Bool]
															[Field:Null<haxe.macro.Expr>]
																[Local f(113472):haxe.macro.Function:haxe.macro.Function]
																[FAnon:Null<haxe.macro.Expr>] expr:Null<haxe.macro.Expr>
															!=
															[Const:Null<haxe.macro.Expr>] null
														[Then:Void] [Block:Void]
															[Call:Void]
																[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
																[Field:Null<haxe.macro.Expr>]
																	[Local f(113472):haxe.macro.Function:haxe.macro.Function]
																	[FAnon:Null<haxe.macro.Expr>] expr:Null<haxe.macro.Expr>
									[Case:Void]
										[Const:Int] 12
										[Block:Void]
											[Var `23(113473):Array<haxe.macro.Expr>]
												[EnumParameter:Array<haxe.macro.Expr>]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EBlock
													0
											[Block:Void]
												[Var exprs(113474):Array<haxe.macro.Expr>] [Local `23(113473):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EBlock"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Field:(it : Iterable<haxe.macro.Expr>, f : ((item : haxe.macro.Expr) -> Void)) -> Void]
															[TypeExpr Lambda:Class<Lambda>]
															[FStatic:(it : Iterable<haxe.macro.Expr>, f : ((item : haxe.macro.Expr) -> Void)) -> Void]
																Lambda
																iter:(it : Iterable<iter.A>, f : ((item : iter.A) -> Void)) -> Void
														[Local exprs(113474):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
									[Case:Void]
										[Const:Int] 13
										[Block:Void]
											[Var `10(113475):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EFor
													1
											[Var `9(113476):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EFor
													0
											[Block:Void]
												[Var expr(113477):haxe.macro.Expr] [Local `10(113475):haxe.macro.Expr:haxe.macro.Expr]
												[Var it(113478):haxe.macro.Expr] [Local `9(113476):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EFor"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local it(113478):haxe.macro.Expr:haxe.macro.Expr]
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local expr(113477):haxe.macro.Expr:haxe.macro.Expr]
									[Case:Void]
										[Const:Int] 14
										[Block:Void]
											[Var `13(113479):Null<haxe.macro.Expr>]
												[EnumParameter:Null<haxe.macro.Expr>]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EIf
													2
											[Var `12(113480):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EIf
													1
											[Var `11(113481):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EIf
													0
											[Block:Void]
												[Var eelse(113482):Null<haxe.macro.Expr>] [Local `13(113479):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
												[Var eif(113483):haxe.macro.Expr] [Local `12(113480):haxe.macro.Expr:haxe.macro.Expr]
												[Var econd(113484):haxe.macro.Expr] [Local `11(113481):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EIf"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local econd(113484):haxe.macro.Expr:haxe.macro.Expr]
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local eif(113483):haxe.macro.Expr:haxe.macro.Expr]
													[If:Void]
														[Binop:Bool]
															[Local eelse(113482):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
															!=
															[Const:Null<haxe.macro.Expr>] null
														[Then:Void] [Block:Void]
															[Call:Void]
																[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
																[Local eelse(113482):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
									[Case:Void]
										[Const:Int] 15
										[Block:Void]
											[Var `34(113485):Bool]
												[EnumParameter:Bool]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EWhile
													2
											[Var `33(113486):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EWhile
													1
											[Var `32(113487):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EWhile
													0
											[Block:Void]
												[Var normalWhile(113488):Bool] [Local `34(113485):Bool:Bool]
												[Var e(113489):haxe.macro.Expr] [Local `33(113486):haxe.macro.Expr:haxe.macro.Expr]
												[Var econd(113490):haxe.macro.Expr] [Local `32(113487):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EWhile"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local econd(113490):haxe.macro.Expr:haxe.macro.Expr]
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e(113489):haxe.macro.Expr:haxe.macro.Expr]
									[Case:Void]
										[Const:Int] 16
										[Block:Void]
											[Var `30(113491):Null<haxe.macro.Expr>]
												[EnumParameter:Null<haxe.macro.Expr>]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ESwitch
													2
											[Var `29(113492):Array<haxe.macro.Case>]
												[EnumParameter:Array<haxe.macro.Case>]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ESwitch
													1
											[Var `28(113493):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ESwitch
													0
											[Block:Void]
												[Var edef(113494):Null<haxe.macro.Expr>] [Local `30(113491):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
												[Var cases(113495):Array<haxe.macro.Case>] [Local `29(113492):Array<haxe.macro.Case>:Array<haxe.macro.Case>]
												[Var e(113496):haxe.macro.Expr] [Local `28(113493):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "ESwitch"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e(113496):haxe.macro.Expr:haxe.macro.Expr]
													[Block:Void]
														[Var `(113497):Int] [Const:Int] 0
														[While:Void]
															[Binop:Bool]
																[Local `(113497):Int:Int]
																<
																[Field:Int]
																	[Local cases(113495):Array<haxe.macro.Case>:Array<haxe.macro.Case>]
																	[FInstance:Int]
																		Array<haxe.macro.Case>
																		length:Int
															[Block:Void]
																[Var c(113498):haxe.macro.Case]
																	[Array:haxe.macro.Case]
																		[Local cases(113495):Array<haxe.macro.Case>:Array<haxe.macro.Case>]
																		[Local `(113497):Int:Int]
																[Unop:Int]
																	++
																	Prefix
																	[Local `(113497):Int:Int]
																[Block:Void]
																	[Var `(113499):Int] [Const:Int] 0
																	[Var `1(113500):Array<haxe.macro.Expr>]
																		[Field:Array<haxe.macro.Expr>]
																			[Local c(113498):haxe.macro.Case:haxe.macro.Case]
																			[FAnon:Array<haxe.macro.Expr>] values:Array<haxe.macro.Expr>
																	[While:Void]
																		[Binop:Bool]
																			[Local `(113499):Int:Int]
																			<
																			[Field:Int]
																				[Local `1(113500):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
																				[FInstance:Int]
																					Array<haxe.macro.Expr>
																					length:Int
																		[Block:Void]
																			[Var pat(113501):haxe.macro.Expr]
																				[Array:haxe.macro.Expr]
																					[Local `1(113500):Array<haxe.macro.Expr>:Array<haxe.macro.Expr>]
																					[Local `(113499):Int:Int]
																			[Unop:Int]
																				++
																				Prefix
																				[Local `(113499):Int:Int]
																			[Call:Void]
																				[Array:(tabs : String, e : haxe.macro.Expr) -> Void]
																					[Local loop(113306):Array<(tabs : String, e : haxe.macro.Expr) -> Void>:Array<(tabs : String, e : haxe.macro.Expr) -> Void>]
																					[Const:Int] 0
																				[Binop:String]
																					[Binop:String]
																						[Local tabs(113307):String:String]
																						+
																						[Field:String]
																							[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																							[FInstance:String]
																								haxe.macro.Printer
																								tabString:String
																					+
																					[Field:String]
																						[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																						[FInstance:String]
																							haxe.macro.Printer
																							tabString:String
																				[Local pat(113501):haxe.macro.Expr:haxe.macro.Expr]
																[If:Void]
																	[Binop:Bool]
																		[Field:Null<haxe.macro.Expr>]
																			[Local c(113498):haxe.macro.Case:haxe.macro.Case]
																			[FAnon:Null<haxe.macro.Expr>] expr:Null<haxe.macro.Expr>
																		!=
																		[Const:Null<haxe.macro.Expr>] null
																	[Then:Void] [Block:Void]
																		[Call:Void]
																			[Array:(tabs : String, e : haxe.macro.Expr) -> Void]
																				[Local loop(113306):Array<(tabs : String, e : haxe.macro.Expr) -> Void>:Array<(tabs : String, e : haxe.macro.Expr) -> Void>]
																				[Const:Int] 0
																			[Binop:String]
																				[Binop:String]
																					[Binop:String]
																						[Local tabs(113307):String:String]
																						+
																						[Field:String]
																							[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																							[FInstance:String]
																								haxe.macro.Printer
																								tabString:String
																					+
																					[Field:String]
																						[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																						[FInstance:String]
																							haxe.macro.Printer
																							tabString:String
																				+
																				[Field:String]
																					[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																					[FInstance:String]
																						haxe.macro.Printer
																						tabString:String
																			[Field:Null<haxe.macro.Expr>]
																				[Local c(113498):haxe.macro.Case:haxe.macro.Case]
																				[FAnon:Null<haxe.macro.Expr>] expr:Null<haxe.macro.Expr>
													[If:Void]
														[Binop:Bool]
															[Local edef(113494):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
															!=
															[Const:Null<haxe.macro.Expr>] null
														[Then:Void] [Block:Void]
															[Call:Void]
																[Array:(tabs : String, e : haxe.macro.Expr) -> Void]
																	[Local loop(113306):Array<(tabs : String, e : haxe.macro.Expr) -> Void>:Array<(tabs : String, e : haxe.macro.Expr) -> Void>]
																	[Const:Int] 0
																[Binop:String]
																	[Binop:String]
																		[Binop:String]
																			[Local tabs(113307):String:String]
																			+
																			[Field:String]
																				[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																				[FInstance:String]
																					haxe.macro.Printer
																					tabString:String
																		+
																		[Field:String]
																			[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																			[FInstance:String]
																				haxe.macro.Printer
																				tabString:String
																	+
																	[Field:String]
																		[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																		[FInstance:String]
																			haxe.macro.Printer
																			tabString:String
																[Local edef(113494):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
									[Case:Void]
										[Const:Int] 17
										[Block:Void]
											[Var `27(113502):Array<haxe.macro.Catch>]
												[EnumParameter:Array<haxe.macro.Catch>]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ETry
													1
											[Var `26(113503):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ETry
													0
											[Block:Void]
												[Var catches(113504):Array<haxe.macro.Catch>] [Local `27(113502):Array<haxe.macro.Catch>:Array<haxe.macro.Catch>]
												[Var e(113505):haxe.macro.Expr] [Local `26(113503):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "ETry"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e(113505):haxe.macro.Expr:haxe.macro.Expr]
													[Block:Void]
														[Var `(113506):Int] [Const:Int] 0
														[While:Void]
															[Binop:Bool]
																[Local `(113506):Int:Int]
																<
																[Field:Int]
																	[Local catches(113504):Array<haxe.macro.Catch>:Array<haxe.macro.Catch>]
																	[FInstance:Int]
																		Array<haxe.macro.Catch>
																		length:Int
															[Block:Void]
																[Var c(113507):haxe.macro.Catch]
																	[Array:haxe.macro.Catch]
																		[Local catches(113504):Array<haxe.macro.Catch>:Array<haxe.macro.Catch>]
																		[Local `(113506):Int:Int]
																[Unop:Int]
																	++
																	Prefix
																	[Local `(113506):Int:Int]
																[Call:Void]
																	[Array:(tabs : String, e : haxe.macro.Expr) -> Void]
																		[Local loop(113306):Array<(tabs : String, e : haxe.macro.Expr) -> Void>:Array<(tabs : String, e : haxe.macro.Expr) -> Void>]
																		[Const:Int] 0
																	[Binop:String]
																		[Binop:String]
																			[Local tabs(113307):String:String]
																			+
																			[Field:String]
																				[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																				[FInstance:String]
																					haxe.macro.Printer
																					tabString:String
																		+
																		[Field:String]
																			[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																			[FInstance:String]
																				haxe.macro.Printer
																				tabString:String
																	[Field:haxe.macro.Expr]
																		[Local c(113507):haxe.macro.Catch:haxe.macro.Catch]
																		[FAnon:haxe.macro.Expr] expr:haxe.macro.Expr
									[Case:Void]
										[Const:Int] 18
										[Block:Void]
											[Var `49(113508):Null<haxe.macro.Expr>]
												[EnumParameter:Null<haxe.macro.Expr>]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EReturn
													0
											[Block:Void]
												[Var e(113509):Null<haxe.macro.Expr>] [Local `49(113508):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EReturn"
														[Const:Null<haxe.macro.Position>] null
													[If:Void]
														[Binop:Bool]
															[Local e(113509):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
															!=
															[Const:Null<haxe.macro.Expr>] null
														[Then:Void] [Block:Void]
															[Call:Void]
																[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
																[Local e(113509):Null<haxe.macro.Expr>:Null<haxe.macro.Expr>]
									[Case:Void]
										[Const:Int] 19
										[Block:Void]
											[Block:Void]
												[Call:Void]
													[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
													[Const:String] "EBreak"
													[Const:Null<haxe.macro.Position>] null
									[Case:Void]
										[Const:Int] 20
										[Block:Void]
											[Block:Void]
												[Call:Void]
													[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
													[Const:String] "EContinue"
													[Const:Null<haxe.macro.Position>] null
									[Case:Void]
										[Const:Int] 21
										[Block:Void]
											[Var `14(113510):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EUntyped
													0
											[Block:Void]
												[Var e(113511):haxe.macro.Expr] [Local `14(113510):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EUntyped"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e(113511):haxe.macro.Expr:haxe.macro.Expr]
									[Case:Void]
										[Const:Int] 22
										[Block:Void]
											[Var `15(113512):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EThrow
													0
											[Block:Void]
												[Var e(113513):haxe.macro.Expr] [Local `15(113512):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EThrow"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e(113513):haxe.macro.Expr:haxe.macro.Expr]
									[Case:Void]
										[Const:Int] 23
										[Block:Void]
											[Var `5(113514):Null<haxe.macro.ComplexType>]
												[EnumParameter:Null<haxe.macro.ComplexType>]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ECast
													1
											[Var `4(113515):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ECast
													0
											[Block:Void]
												[Var t(113516):Null<haxe.macro.ComplexType>] [Local `5(113514):Null<haxe.macro.ComplexType>:Null<haxe.macro.ComplexType>]
												[Var e(113517):haxe.macro.Expr] [Local `4(113515):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "ECast"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e(113517):haxe.macro.Expr:haxe.macro.Expr]
									[Case:Void]
										[Const:Int] 24
										[Block:Void]
											[Var `41(113518):haxe.macro.DisplayKind]
												[EnumParameter:haxe.macro.DisplayKind]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EDisplay
													1
											[Var `40(113519):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EDisplay
													0
											[Block:Void]
												[Var displayKind(113520):haxe.macro.DisplayKind] [Local `41(113518):haxe.macro.DisplayKind:haxe.macro.DisplayKind]
												[Var e(113521):haxe.macro.Expr] [Local `40(113519):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EDisplay"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e(113521):haxe.macro.Expr:haxe.macro.Expr]
									[Case:Void]
										[Const:Int] 25
										[Block:Void]
											[Var `50(113522):haxe.macro.TypePath]
												[EnumParameter:haxe.macro.TypePath]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EDisplayNew
													0
											[Block:Void]
												[Var t(113523):haxe.macro.TypePath] [Local `50(113522):haxe.macro.TypePath:haxe.macro.TypePath]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "EDisplayNew"
														[Const:Null<haxe.macro.Position>] null
									[Case:Void]
										[Const:Int] 26
										[Block:Void]
											[Var `47(113524):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ETernary
													2
											[Var `46(113525):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ETernary
													1
											[Var `45(113526):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ETernary
													0
											[Block:Void]
												[Var eelse(113527):haxe.macro.Expr] [Local `47(113524):haxe.macro.Expr:haxe.macro.Expr]
												[Var eif(113528):haxe.macro.Expr] [Local `46(113525):haxe.macro.Expr:haxe.macro.Expr]
												[Var econd(113529):haxe.macro.Expr] [Local `45(113526):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "ETernary"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local econd(113529):haxe.macro.Expr:haxe.macro.Expr]
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local eif(113528):haxe.macro.Expr:haxe.macro.Expr]
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local eelse(113527):haxe.macro.Expr:haxe.macro.Expr]
									[Case:Void]
										[Const:Int] 27
										[Block:Void]
											[Var `25(113530):haxe.macro.ComplexType]
												[EnumParameter:haxe.macro.ComplexType]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ECheckType
													1
											[Var `24(113531):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													ECheckType
													0
											[Block:Void]
												[Var t(113532):haxe.macro.ComplexType] [Local `25(113530):haxe.macro.ComplexType:haxe.macro.ComplexType]
												[Var e(113533):haxe.macro.Expr] [Local `24(113531):haxe.macro.Expr:haxe.macro.Expr]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Const:String] "ECheckType"
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e(113533):haxe.macro.Expr:haxe.macro.Expr]
									[Case:Void]
										[Const:Int] 28
										[Block:Void]
											[Var `17(113534):haxe.macro.Expr]
												[EnumParameter:haxe.macro.Expr]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EMeta
													1
											[Var `16(113535):haxe.macro.MetadataEntry]
												[EnumParameter:haxe.macro.MetadataEntry]
													[Local `(113427):haxe.macro.ExprDef:haxe.macro.ExprDef]
													EMeta
													0
											[Block:Void]
												[Var e(113536):haxe.macro.Expr] [Local `17(113534):haxe.macro.Expr:haxe.macro.Expr]
												[Var s(113537):haxe.macro.MetadataEntry] [Local `16(113535):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
												[Block:Void]
													[Call:Void]
														[Local add(113309):(s : String, ?p : Null<haxe.macro.Position>) -> Void:(s : String, ?p : Null<haxe.macro.Position>) -> Void]
														[Binop:String]
															[Const:String] "EMeta "
															+
															[Call:String]
																[Field:(meta : haxe.macro.MetadataEntry) -> String]
																	[Local `this(113315):haxe.macro.Printer:haxe.macro.Printer]
																	[FInstance:(meta : haxe.macro.MetadataEntry) -> String]
																		haxe.macro.Printer
																		printMetadata:(meta : haxe.macro.MetadataEntry) -> String
																[Local s(113537):haxe.macro.MetadataEntry:haxe.macro.MetadataEntry]
														[Const:Null<haxe.macro.Position>] null
													[Call:Void]
														[Local loopI(113313):(e : haxe.macro.Expr) -> Void:(e : haxe.macro.Expr) -> Void]
														[Local e(113536):haxe.macro.Expr:haxe.macro.Expr]
			[Call:Void]
				[Array:(tabs : String, e : haxe.macro.Expr) -> Void]
					[Local loop(113306):Array<(tabs : String, e : haxe.macro.Expr) -> Void>:Array<(tabs : String, e : haxe.macro.Expr) -> Void>]
					[Const:Int] 0
				[Const:String] ""
				[Local e(113302):haxe.macro.Expr:haxe.macro.Expr]
			[Return:Dynamic]
				[Call:String]
					[Field:Void -> String]
						[Local buffer(113303):StringBuf:StringBuf]
						[FInstance:Void -> String]
							StringBuf
							toString:Void -> String
}