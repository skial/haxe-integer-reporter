class haxe.ValueException extends haxe.Exception {

	public function new[Function:(value : Any, ?previous : Null<haxe.Exception>, ?native : Null<Any>) -> Void]
		[Arg:Any] [Local value(109515):Any]
		[Arg:Null<haxe.Exception>]
			[Local previous(109516):Null<haxe.Exception>]
			[Const:Null<haxe.Exception>] null
		[Arg:Null<Any>]
			[Local native(109517):Null<Any>]
			[Const:Null<Any>] null
		[Block:Void]
			[Block:Any]
				[Call:Void]
					[Const:haxe.Exception] super
					[Call:String]
						[Field:(s : Dynamic) -> String]
							[TypeExpr Std:Class<Std>]
							[FStatic:(s : Dynamic) -> String]
								Std
								string:(s : Dynamic) -> String
						[Cast:Dynamic] [Cast:Dynamic] [Local value(109515):Any:Any]
					[Local previous(109516):Null<haxe.Exception>:Null<haxe.Exception>]
					[Local native(109517):Null<Any>:Null<Any>]
				[Binop:Any]
					[Field:Any]
						[Const:haxe.ValueException] this
						[FInstance:Any]
							haxe.ValueException
							value:Any
					=
					[Local value(109515):Any:Any]
			[Block:Void]
				[Unop:Int]
					++
					Postfix
					[Field:Int]
						[Const:haxe.ValueException] this
						[FInstance:Int]
							haxe.Exception
							__skipStack:Int

	public var value(default,null):Any;

	function unwrap[Function:Void -> Any]
		[Block:Dynamic]
			[Return:Dynamic]
				[Field:Any]
					[Const:haxe.ValueException] this
					[FInstance:Any]
						haxe.ValueException
						value:Any
}