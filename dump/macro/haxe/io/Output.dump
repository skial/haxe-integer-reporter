class haxe.io.Output {

	public var bigEndian(default,set):Bool;

	public function writeByte[Function:(c : Int) -> Void]
		[Arg:Int] [Local c(110278):Int]
		[Block:Unknown<42>]
			[Throw:Unknown<42>]
				[Throw:Unknown<42>]
					[Call:Any]
						[Field:(value : Any) -> Any]
							[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
							[FStatic:(value : Any) -> Any]
								haxe.Exception
								thrown:(value : Any) -> Any
						[Const:String] "Not implemented"

	@:has_untyped
	public function writeBytes[Function:(s : haxe.io.Bytes, pos : Int, len : Int) -> Int]
		[Arg:haxe.io.Bytes] [Local s(110282):haxe.io.Bytes]
		[Arg:Int] [Local pos(110283):Int]
		[Arg:Int] [Local len(110284):Int]
		[Block:Dynamic]
			[If:Void]
				[Binop:Bool]
					[Binop:Bool]
						[Binop:Bool]
							[Local pos(110283):Int:Int]
							<
							[Const:Int] 0
						||
						[Binop:Bool]
							[Local len(110284):Int:Int]
							<
							[Const:Int] 0
					||
					[Binop:Bool]
						[Binop:Int]
							[Local pos(110283):Int:Int]
							+
							[Local len(110284):Int:Int]
						>
						[Field:Int]
							[Local s(110282):haxe.io.Bytes:haxe.io.Bytes]
							[FInstance:Int]
								haxe.io.Bytes
								length:Int
				[Then:Unknown<43>] [Block:Unknown<43>]
					[Throw:Unknown<43>]
						[Throw:Unknown<43>]
							[Call:Any]
								[Field:(value : Any) -> Any]
									[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
									[FStatic:(value : Any) -> Any]
										haxe.Exception
										thrown:(value : Any) -> Any
								[Field:haxe.io.Error]
									[TypeExpr haxe.io.Error:Enum<haxe.io.Error>]
									[FEnum:haxe.io.Error]
										haxe.io.Error
										OutsideBounds
			[Var b(110285):haxe.io.BytesData]
				[Call:haxe.io.BytesData]
					[Field:Void -> haxe.io.BytesData]
						[Local s(110282):haxe.io.Bytes:haxe.io.Bytes]
						[FInstance:Void -> haxe.io.BytesData]
							haxe.io.Bytes
							getData:Void -> haxe.io.BytesData
			[Var k(110286):Int] [Local len(110284):Int:Int]
			[While:Void]
				[Binop:Bool]
					[Local k(110286):Int:Int]
					>
					[Const:Int] 0
				[Block:Int]
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Call:Int]
							[Field:(pos : Int) -> Int]
								[Cast:haxe.io.Bytes] [Local b(110285):haxe.io.BytesData:haxe.io.BytesData]
								[FInstance:(pos : Int) -> Int]
									haxe.io.Bytes
									get:(pos : Int) -> Int
							[Local pos(110283):Int:Int]
					[Unop:Int]
						++
						Postfix
						[Local pos(110283):Int:Int]
					[Unop:Int]
						--
						Postfix
						[Local k(110286):Int:Int]
			[Return:Dynamic] [Local len(110284):Int:Int]

	public function flush[Function:Void -> Void] [Block:Void]

	public function close[Function:Void -> Void] [Block:Void]

	function set_bigEndian[Function:(b : Bool) -> Bool]
		[Arg:Bool] [Local b(109970):Bool]
		[Block:Dynamic]
			[Binop:Bool]
				[Field:Bool]
					[Const:haxe.io.Output] this
					[FInstance:Bool]
						haxe.io.Output
						bigEndian:Bool
				=
				[Local b(109970):Bool:Bool]
			[Return:Dynamic] [Local b(109970):Bool:Bool]

	public function write[Function:(s : haxe.io.Bytes) -> Void]
		[Arg:haxe.io.Bytes] [Local s(110571):haxe.io.Bytes]
		[Block:Void]
			[Var l(110572):Int]
				[Field:Int]
					[Local s(110571):haxe.io.Bytes:haxe.io.Bytes]
					[FInstance:Int]
						haxe.io.Bytes
						length:Int
			[Var p(110573):Int] [Const:Int] 0
			[While:Void]
				[Binop:Bool]
					[Local l(110572):Int:Int]
					>
					[Const:Int] 0
				[Block:Int]
					[Var k(110574):Int]
						[Call:Int]
							[Field:(s : haxe.io.Bytes, pos : Int, len : Int) -> Int]
								[Const:haxe.io.Output] this
								[FInstance:(s : haxe.io.Bytes, pos : Int, len : Int) -> Int]
									haxe.io.Output
									writeBytes:(s : haxe.io.Bytes, pos : Int, len : Int) -> Int
							[Local s(110571):haxe.io.Bytes:haxe.io.Bytes]
							[Local p(110573):Int:Int]
							[Local l(110572):Int:Int]
					[If:Void]
						[Binop:Bool]
							[Local k(110574):Int:Int]
							==
							[Const:Int] 0
						[Then:Unknown<44>] [Block:Unknown<44>]
							[Throw:Unknown<44>]
								[Throw:Unknown<44>]
									[Call:Any]
										[Field:(value : Any) -> Any]
											[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
											[FStatic:(value : Any) -> Any]
												haxe.Exception
												thrown:(value : Any) -> Any
										[Field:haxe.io.Error]
											[TypeExpr haxe.io.Error:Enum<haxe.io.Error>]
											[FEnum:haxe.io.Error]
												haxe.io.Error
												Blocked
					[Binop:Int]
						[Local p(110573):Int:Int]
						+=
						[Local k(110574):Int:Int]
					[Binop:Int]
						[Local l(110572):Int:Int]
						-=
						[Local k(110574):Int:Int]

	public function writeFullBytes[Function:(s : haxe.io.Bytes, pos : Int, len : Int) -> Void]
		[Arg:haxe.io.Bytes] [Local s(110577):haxe.io.Bytes]
		[Arg:Int] [Local pos(110578):Int]
		[Arg:Int] [Local len(110579):Int]
		[Block:Void]
			[While:Void]
				[Binop:Bool]
					[Local len(110579):Int:Int]
					>
					[Const:Int] 0
				[Block:Int]
					[Var k(110580):Int]
						[Call:Int]
							[Field:(s : haxe.io.Bytes, pos : Int, len : Int) -> Int]
								[Const:haxe.io.Output] this
								[FInstance:(s : haxe.io.Bytes, pos : Int, len : Int) -> Int]
									haxe.io.Output
									writeBytes:(s : haxe.io.Bytes, pos : Int, len : Int) -> Int
							[Local s(110577):haxe.io.Bytes:haxe.io.Bytes]
							[Local pos(110578):Int:Int]
							[Local len(110579):Int:Int]
					[Binop:Int]
						[Local pos(110578):Int:Int]
						+=
						[Local k(110580):Int:Int]
					[Binop:Int]
						[Local len(110579):Int:Int]
						-=
						[Local k(110580):Int:Int]

	public function writeFloat[Function:(x : Float) -> Void]
		[Arg:Float] [Local x(110583):Float]
		[Block:Void]
			[Call:Void]
				[Field:(x : Int) -> Void]
					[Const:haxe.io.Output] this
					[FInstance:(x : Int) -> Void]
						haxe.io.Output
						writeInt32:(x : Int) -> Void
				[Call:Int]
					[Field:(f : Float) -> Int]
						[TypeExpr haxe.io.FPHelper:Class<haxe.io.FPHelper>]
						[FStatic:(f : Float) -> Int]
							haxe.io.FPHelper
							floatToI32:(f : Float) -> Int
					[Local x(110583):Float:Float]

	public function writeDouble[Function:(x : Float) -> Void]
		[Arg:Float] [Local x(110585):Float]
		[Block:Void]
			[Var i64(110586):haxe.Int64]
				[Call:haxe.Int64]
					[Field:(v : Float) -> haxe.Int64]
						[TypeExpr haxe.io.FPHelper:Class<haxe.io.FPHelper>]
						[FStatic:(v : Float) -> haxe.Int64]
							haxe.io.FPHelper
							doubleToI64:(v : Float) -> haxe.Int64
					[Local x(110585):Float:Float]
			[If:Void]
				[Field:Bool]
					[Const:haxe.io.Output] this
					[FInstance:Bool]
						haxe.io.Output
						bigEndian:Bool
				[Then:Void] [Block:Void]
					[Call:Void]
						[Field:(x : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(x : Int) -> Void]
								haxe.io.Output
								writeInt32:(x : Int) -> Void
						[Field:haxe.Int32]
							[Cast:haxe._Int64.__Int64] [Local i64(110586):haxe.Int64:haxe.Int64]
							[FInstance:haxe.Int32]
								haxe._Int64.___Int64
								high:haxe.Int32
					[Call:Void]
						[Field:(x : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(x : Int) -> Void]
								haxe.io.Output
								writeInt32:(x : Int) -> Void
						[Field:haxe.Int32]
							[Cast:haxe._Int64.__Int64] [Local i64(110586):haxe.Int64:haxe.Int64]
							[FInstance:haxe.Int32]
								haxe._Int64.___Int64
								low:haxe.Int32
				[Else:Void] [Block:Void]
					[Call:Void]
						[Field:(x : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(x : Int) -> Void]
								haxe.io.Output
								writeInt32:(x : Int) -> Void
						[Field:haxe.Int32]
							[Cast:haxe._Int64.__Int64] [Local i64(110586):haxe.Int64:haxe.Int64]
							[FInstance:haxe.Int32]
								haxe._Int64.___Int64
								low:haxe.Int32
					[Call:Void]
						[Field:(x : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(x : Int) -> Void]
								haxe.io.Output
								writeInt32:(x : Int) -> Void
						[Field:haxe.Int32]
							[Cast:haxe._Int64.__Int64] [Local i64(110586):haxe.Int64:haxe.Int64]
							[FInstance:haxe.Int32]
								haxe._Int64.___Int64
								high:haxe.Int32

	public function writeInt8[Function:(x : Int) -> Void]
		[Arg:Int] [Local x(110599):Int]
		[Block:Void]
			[If:Void]
				[Binop:Bool]
					[Binop:Bool]
						[Local x(110599):Int:Int]
						<
						[Const:Int] -128
					||
					[Binop:Bool]
						[Local x(110599):Int:Int]
						>=
						[Const:Int] 128
				[Then:Unknown<45>] [Block:Unknown<45>]
					[Throw:Unknown<45>]
						[Throw:Unknown<45>]
							[Call:Any]
								[Field:(value : Any) -> Any]
									[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
									[FStatic:(value : Any) -> Any]
										haxe.Exception
										thrown:(value : Any) -> Any
								[Field:haxe.io.Error]
									[TypeExpr haxe.io.Error:Enum<haxe.io.Error>]
									[FEnum:haxe.io.Error]
										haxe.io.Error
										Overflow
			[Call:Void]
				[Field:(c : Int) -> Void]
					[Const:haxe.io.Output] this
					[FInstance:(c : Int) -> Void]
						haxe.io.Output
						writeByte:(c : Int) -> Void
				[Binop:Int]
					[Local x(110599):Int:Int]
					&
					[Const:Int] 255

	public function writeInt16[Function:(x : Int) -> Void]
		[Arg:Int] [Local x(110600):Int]
		[Block:Void]
			[If:Void]
				[Binop:Bool]
					[Binop:Bool]
						[Local x(110600):Int:Int]
						<
						[Const:Int] -32768
					||
					[Binop:Bool]
						[Local x(110600):Int:Int]
						>=
						[Const:Int] 32768
				[Then:Unknown<46>] [Block:Unknown<46>]
					[Throw:Unknown<46>]
						[Throw:Unknown<46>]
							[Call:Any]
								[Field:(value : Any) -> Any]
									[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
									[FStatic:(value : Any) -> Any]
										haxe.Exception
										thrown:(value : Any) -> Any
								[Field:haxe.io.Error]
									[TypeExpr haxe.io.Error:Enum<haxe.io.Error>]
									[FEnum:haxe.io.Error]
										haxe.io.Error
										Overflow
			[Call:Void]
				[Field:(x : Int) -> Void]
					[Const:haxe.io.Output] this
					[FInstance:(x : Int) -> Void]
						haxe.io.Output
						writeUInt16:(x : Int) -> Void
				[Binop:Int]
					[Local x(110600):Int:Int]
					&
					[Const:Int] 65535

	public function writeUInt16[Function:(x : Int) -> Void]
		[Arg:Int] [Local x(110601):Int]
		[Block:Void]
			[If:Void]
				[Binop:Bool]
					[Binop:Bool]
						[Local x(110601):Int:Int]
						<
						[Const:Int] 0
					||
					[Binop:Bool]
						[Local x(110601):Int:Int]
						>=
						[Const:Int] 65536
				[Then:Unknown<47>] [Block:Unknown<47>]
					[Throw:Unknown<47>]
						[Throw:Unknown<47>]
							[Call:Any]
								[Field:(value : Any) -> Any]
									[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
									[FStatic:(value : Any) -> Any]
										haxe.Exception
										thrown:(value : Any) -> Any
								[Field:haxe.io.Error]
									[TypeExpr haxe.io.Error:Enum<haxe.io.Error>]
									[FEnum:haxe.io.Error]
										haxe.io.Error
										Overflow
			[If:Void]
				[Field:Bool]
					[Const:haxe.io.Output] this
					[FInstance:Bool]
						haxe.io.Output
						bigEndian:Bool
				[Then:Void] [Block:Void]
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Local x(110601):Int:Int]
							>>
							[Const:Int] 8
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Local x(110601):Int:Int]
							&
							[Const:Int] 255
				[Else:Void] [Block:Void]
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Local x(110601):Int:Int]
							&
							[Const:Int] 255
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Local x(110601):Int:Int]
							>>
							[Const:Int] 8

	public function writeInt24[Function:(x : Int) -> Void]
		[Arg:Int] [Local x(110602):Int]
		[Block:Void]
			[If:Void]
				[Binop:Bool]
					[Binop:Bool]
						[Local x(110602):Int:Int]
						<
						[Const:Int] -8388608
					||
					[Binop:Bool]
						[Local x(110602):Int:Int]
						>=
						[Const:Int] 8388608
				[Then:Unknown<48>] [Block:Unknown<48>]
					[Throw:Unknown<48>]
						[Throw:Unknown<48>]
							[Call:Any]
								[Field:(value : Any) -> Any]
									[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
									[FStatic:(value : Any) -> Any]
										haxe.Exception
										thrown:(value : Any) -> Any
								[Field:haxe.io.Error]
									[TypeExpr haxe.io.Error:Enum<haxe.io.Error>]
									[FEnum:haxe.io.Error]
										haxe.io.Error
										Overflow
			[Call:Void]
				[Field:(x : Int) -> Void]
					[Const:haxe.io.Output] this
					[FInstance:(x : Int) -> Void]
						haxe.io.Output
						writeUInt24:(x : Int) -> Void
				[Binop:Int]
					[Local x(110602):Int:Int]
					&
					[Const:Int] 16777215

	public function writeUInt24[Function:(x : Int) -> Void]
		[Arg:Int] [Local x(110603):Int]
		[Block:Void]
			[If:Void]
				[Binop:Bool]
					[Binop:Bool]
						[Local x(110603):Int:Int]
						<
						[Const:Int] 0
					||
					[Binop:Bool]
						[Local x(110603):Int:Int]
						>=
						[Const:Int] 16777216
				[Then:Unknown<49>] [Block:Unknown<49>]
					[Throw:Unknown<49>]
						[Throw:Unknown<49>]
							[Call:Any]
								[Field:(value : Any) -> Any]
									[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
									[FStatic:(value : Any) -> Any]
										haxe.Exception
										thrown:(value : Any) -> Any
								[Field:haxe.io.Error]
									[TypeExpr haxe.io.Error:Enum<haxe.io.Error>]
									[FEnum:haxe.io.Error]
										haxe.io.Error
										Overflow
			[If:Void]
				[Field:Bool]
					[Const:haxe.io.Output] this
					[FInstance:Bool]
						haxe.io.Output
						bigEndian:Bool
				[Then:Void] [Block:Void]
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Local x(110603):Int:Int]
							>>
							[Const:Int] 16
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Parenthesis:Int]
								[Binop:Int]
									[Local x(110603):Int:Int]
									>>
									[Const:Int] 8
							&
							[Const:Int] 255
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Local x(110603):Int:Int]
							&
							[Const:Int] 255
				[Else:Void] [Block:Void]
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Local x(110603):Int:Int]
							&
							[Const:Int] 255
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Parenthesis:Int]
								[Binop:Int]
									[Local x(110603):Int:Int]
									>>
									[Const:Int] 8
							&
							[Const:Int] 255
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Local x(110603):Int:Int]
							>>
							[Const:Int] 16

	public function writeInt32[Function:(x : Int) -> Void]
		[Arg:Int] [Local x(110584):Int]
		[Block:Void]
			[If:Void]
				[Field:Bool]
					[Const:haxe.io.Output] this
					[FInstance:Bool]
						haxe.io.Output
						bigEndian:Bool
				[Then:Void] [Block:Void]
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Local x(110584):Int:Int]
							>>>
							[Const:Int] 24
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Parenthesis:Int]
								[Binop:Int]
									[Local x(110584):Int:Int]
									>>
									[Const:Int] 16
							&
							[Const:Int] 255
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Parenthesis:Int]
								[Binop:Int]
									[Local x(110584):Int:Int]
									>>
									[Const:Int] 8
							&
							[Const:Int] 255
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Local x(110584):Int:Int]
							&
							[Const:Int] 255
				[Else:Void] [Block:Void]
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Local x(110584):Int:Int]
							&
							[Const:Int] 255
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Parenthesis:Int]
								[Binop:Int]
									[Local x(110584):Int:Int]
									>>
									[Const:Int] 8
							&
							[Const:Int] 255
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Parenthesis:Int]
								[Binop:Int]
									[Local x(110584):Int:Int]
									>>
									[Const:Int] 16
							&
							[Const:Int] 255
					[Call:Void]
						[Field:(c : Int) -> Void]
							[Const:haxe.io.Output] this
							[FInstance:(c : Int) -> Void]
								haxe.io.Output
								writeByte:(c : Int) -> Void
						[Binop:Int]
							[Local x(110584):Int:Int]
							>>>
							[Const:Int] 24

	public function prepare[Function:(nbytes : Int) -> Void]
		[Arg:Int] [Local nbytes(110604):Int]
		[Block:Void]

	public function writeInput[Function:(i : haxe.io.Input, ?bufsize : Null<Int>) -> Void]
		[Arg:haxe.io.Input] [Local i(110297):haxe.io.Input]
		[Arg:Null<Int>]
			[Local bufsize(110298):Null<Int>]
			[Const:Null<Int>] null
		[Block:Void]
			[If:Void]
				[Binop:Bool]
					[Local bufsize(110298):Null<Int>:Null<Int>]
					==
					[Const:Null<Int>] null
				[Then:Null<Int>] [Block:Null<Int>]
					[Binop:Null<Int>]
						[Local bufsize(110298):Null<Int>:Null<Int>]
						=
						[Const:Int] 4096
			[Var buf(110299):haxe.io.Bytes]
				[Call:haxe.io.Bytes]
					[Field:(length : Int) -> haxe.io.Bytes]
						[TypeExpr haxe.io.Bytes:Class<haxe.io.Bytes>]
						[FStatic:(length : Int) -> haxe.io.Bytes]
							haxe.io.Bytes
							alloc:(length : Int) -> haxe.io.Bytes
					[Local bufsize(110298):Null<Int>:Null<Int>]
			[Try:Void]
				[Block:Void]
					[While:Void]
						[Const:Bool] true
						[Block:Void]
							[Var len(110314):Int]
								[Call:Int]
									[Field:(s : haxe.io.Bytes, pos : Int, len : Int) -> Int]
										[Local i(110297):haxe.io.Input:haxe.io.Input]
										[FInstance:(s : haxe.io.Bytes, pos : Int, len : Int) -> Int]
											haxe.io.Input
											readBytes:(s : haxe.io.Bytes, pos : Int, len : Int) -> Int
									[Local buf(110299):haxe.io.Bytes:haxe.io.Bytes]
									[Const:Int] 0
									[Local bufsize(110298):Null<Int>:Null<Int>]
							[If:Void]
								[Binop:Bool]
									[Local len(110314):Int:Int]
									==
									[Const:Int] 0
								[Then:Unknown<51>] [Block:Unknown<51>]
									[Throw:Unknown<51>]
										[Throw:Unknown<51>]
											[Call:Any]
												[Field:(value : Any) -> Any]
													[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
													[FStatic:(value : Any) -> Any]
														haxe.Exception
														thrown:(value : Any) -> Any
												[Field:haxe.io.Error]
													[TypeExpr haxe.io.Error:Enum<haxe.io.Error>]
													[FEnum:haxe.io.Error]
														haxe.io.Error
														Blocked
							[Var p(110315):Int] [Const:Int] 0
							[While:Void]
								[Binop:Bool]
									[Local len(110314):Int:Int]
									>
									[Const:Int] 0
								[Block:Int]
									[Var k(110316):Int]
										[Call:Int]
											[Field:(s : haxe.io.Bytes, pos : Int, len : Int) -> Int]
												[Const:haxe.io.Output] this
												[FInstance:(s : haxe.io.Bytes, pos : Int, len : Int) -> Int]
													haxe.io.Output
													writeBytes:(s : haxe.io.Bytes, pos : Int, len : Int) -> Int
											[Local buf(110299):haxe.io.Bytes:haxe.io.Bytes]
											[Local p(110315):Int:Int]
											[Local len(110314):Int:Int]
									[If:Void]
										[Binop:Bool]
											[Local k(110316):Int:Int]
											==
											[Const:Int] 0
										[Then:Unknown<52>] [Block:Unknown<52>]
											[Throw:Unknown<52>]
												[Throw:Unknown<52>]
													[Call:Any]
														[Field:(value : Any) -> Any]
															[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
															[FStatic:(value : Any) -> Any]
																haxe.Exception
																thrown:(value : Any) -> Any
														[Field:haxe.io.Error]
															[TypeExpr haxe.io.Error:Enum<haxe.io.Error>]
															[FEnum:haxe.io.Error]
																haxe.io.Error
																Blocked
									[Binop:Int]
										[Local p(110315):Int:Int]
										+=
										[Local k(110316):Int:Int]
									[Binop:Int]
										[Local len(110314):Int:Int]
										-=
										[Local k(110316):Int:Int]
				Catch [Local `12(117529):Dynamic]
					[Block:Void]
						[Var `13(117530):haxe.Exception]
							[Call:haxe.Exception]
								[Field:(value : Any) -> haxe.Exception]
									[TypeExpr haxe.Exception:{ Statics haxe.Exception }]
									[FStatic:(value : Any) -> haxe.Exception]
										haxe.Exception
										caught:(value : Any) -> haxe.Exception
								[Local `12(117529):Dynamic:Dynamic]
						[Var `14(117531):Dynamic]
							[Call:Any]
								[Field:Void -> Any]
									[Local `13(117530):haxe.Exception:haxe.Exception]
									[FInstance:Void -> Any]
										haxe.Exception
										unwrap:Void -> Any
						[If:Void]
							[Call:Bool]
								[Field:(v : Dynamic, t : Dynamic) -> Bool]
									[TypeExpr Std:{ Statics Std }]
									[FStatic:(v : Dynamic, t : Dynamic) -> Bool]
										Std
										isOfType:(v : Dynamic, t : Dynamic) -> Bool
								[Local `14(117531):Dynamic:Dynamic]
								[TypeExpr haxe.io.Eof:haxe.io.Eof]
							[Then:Void] [Block:Void]
								[Block:Void]
								[Block:Void]
							[Else:Unknown<50>] [Throw:Unknown<50>] [Local `12(117529):Dynamic:Dynamic]

	public function writeString[Function:(s : String, ?encoding : Null<haxe.io.Encoding>) -> Void]
		[Arg:String] [Local s(110605):String]
		[Arg:Null<haxe.io.Encoding>]
			[Local encoding(110606):Null<haxe.io.Encoding>]
			[Const:Null<haxe.io.Encoding>] null
		[Block:Void]
			[Var b(110607):haxe.io.Bytes]
				[Call:haxe.io.Bytes]
					[Field:(s : String, ?encoding : Null<haxe.io.Encoding>) -> haxe.io.Bytes]
						[TypeExpr haxe.io.Bytes:Class<haxe.io.Bytes>]
						[FStatic:(s : String, ?encoding : Null<haxe.io.Encoding>) -> haxe.io.Bytes]
							haxe.io.Bytes
							ofString:(s : String, ?encoding : Null<haxe.io.Encoding>) -> haxe.io.Bytes
					[Local s(110605):String:String]
					[Local encoding(110606):Null<haxe.io.Encoding>:Null<haxe.io.Encoding>]
			[Call:Void]
				[Field:(s : haxe.io.Bytes, pos : Int, len : Int) -> Void]
					[Const:haxe.io.Output] this
					[FInstance:(s : haxe.io.Bytes, pos : Int, len : Int) -> Void]
						haxe.io.Output
						writeFullBytes:(s : haxe.io.Bytes, pos : Int, len : Int) -> Void
				[Local b(110607):haxe.io.Bytes:haxe.io.Bytes]
				[Const:Int] 0
				[Field:Int]
					[Local b(110607):haxe.io.Bytes:haxe.io.Bytes]
					[FInstance:Int]
						haxe.io.Bytes
						length:Int
}