@:dox(hide) @:noCompletion
class haxe.NativeStackTrace {

	@:ifFeature("haxe.NativeStackTrace.exceptionStack")
	public static inline function saveStack[Function:(exception : Any) -> Void]
		[Arg:Any] [Local exception(109357):Any]
		[Block:Void]

	public static function callStack[Function:Void -> Array<haxe.StackItem>]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Array<haxe.StackItem>]
					[Field:Void -> Array<haxe.StackItem>]
						[TypeExpr haxe.NativeStackTrace:Class<haxe.NativeStackTrace>]
						[FStatic:Void -> Array<haxe.StackItem>]
							haxe.NativeStackTrace
							_callStack:Void -> Array<haxe.StackItem>

	static function _callStack[Function:Void -> Array<haxe.StackItem>] [Block:Dynamic] [Return:Dynamic] [Const:Array<haxe.StackItem>] null

	public static function exceptionStack[Function:Void -> Array<haxe.StackItem>] [Block:Dynamic] [Return:Dynamic] [Const:Array<haxe.StackItem>] null

	@:value({ skip : 0 })
	public static inline function toHaxe[Function:(stack : Array<haxe.StackItem>, ?skip : Int) -> Array<haxe.StackItem>]
		[Arg:Array<haxe.StackItem>] [Local stack(109351):Array<haxe.StackItem>]
		[Arg:Int]
			[Local skip(109352):Int]
			[Const:Int] 0
		[Block:Dynamic]
			[Return:Dynamic]
				[If:Array<haxe.StackItem>]
					[Binop:Bool]
						[Local skip(109352):Int:Int]
						>
						[Const:Int] 0
					[Then:Array<haxe.StackItem>] [Block:Array<haxe.StackItem>]
						[Call:Array<haxe.StackItem>]
							[Field:(pos : Int, ?end : Null<Int>) -> Array<haxe.StackItem>]
								[Local stack(109351):Array<haxe.StackItem>:Array<haxe.StackItem>]
								[FInstance:(pos : Int, ?end : Null<Int>) -> Array<haxe.StackItem>]
									Array<haxe.StackItem>
									slice:(pos : Int, ?end : Null<Int>) -> Array<Array.T>
							[Local skip(109352):Int:Int]
							[Const:Null<Int>] null
					[Else:Array<haxe.StackItem>] [Block:Array<haxe.StackItem>] [Local stack(109351):Array<haxe.StackItem>:Array<haxe.StackItem>]
}