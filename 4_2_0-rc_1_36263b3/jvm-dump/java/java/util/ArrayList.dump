@:realPath("java.util.ArrayList") @:used @:native("java.util.ArrayList") @:libType
extern class java.util.ArrayList<E:Dynamic> extends java.util.AbstractList<java.util.ArrayList.E> implements java.io.Serializable implements java.lang.Cloneable implements java.util.RandomAccess implements java.util.List<java.util.ArrayList.E> {

	function new(param1:Int):Void;

	function new(param1:java.util.Collection<java.util.ArrayList.E>):Void;

	function new():Void;

	function trimToSize():Void;

	function ensureCapacity(param1:Int):Void;

	function size():Int;

	function isEmpty():Bool;

	function contains(param1:Dynamic):Bool;

	function indexOf(param1:Dynamic):Int;

	function lastIndexOf(param1:Dynamic):Int;

	function clone():Dynamic;

	function toArray():java.NativeArray<Dynamic>;

	function toArray<T:Dynamic>(param1:java.NativeArray<toArray.T>):java.NativeArray<toArray.T>;

	function elementData(param1:Int):java.util.ArrayList.E;

	function get(param1:Int):java.util.ArrayList.E;

	function set(param1:Int, param2:java.util.ArrayList.E):java.util.ArrayList.E;

	function add(param1:java.util.ArrayList.E):Bool;

	function add(param1:Int, param2:java.util.ArrayList.E):Void;

	function remove(param1:Int):java.util.ArrayList.E;

	function remove(param1:Dynamic):Bool;

	function clear():Void;

	function addAll(param1:java.util.Collection<java.util.ArrayList.E>):Bool;

	function addAll(param1:Int, param2:java.util.Collection<java.util.ArrayList.E>):Bool;

	function removeRange(param1:Int, param2:Int):Void;

	function removeAll(param1:java.util.Collection<Dynamic>):Bool;

	function retainAll(param1:java.util.Collection<Dynamic>):Bool;

	function listIterator(param1:Int):java.util.ListIterator<java.util.ArrayList.E>;

	function listIterator():java.util.ListIterator<java.util.ArrayList.E>;

	function iterator():java.util.Iterator<java.util.ArrayList.E>;

	function subList(param1:Int, param2:Int):java.util.List<java.util.ArrayList.E>;

	function forEach(param1:java.util.function.Consumer<Dynamic>):Void;

	function spliterator():java.util.Spliterator<java.util.ArrayList.E>;

	function removeIf(param1:java.util.function.Predicate<Dynamic>):Bool;

	function replaceAll(param1:java.util.function.UnaryOperator<java.util.ArrayList.E>):Void;

	function sort(param1:java.util.Comparator<Dynamic>):Void;

	static function subListRangeCheck(param1:Int, param2:Int, param3:Int):Void;

	@:realPath("access_100") @:native("access$100")
	static function access$100(param1:java.util.ArrayList<Dynamic>):Int;

	static function <clinit>():Void;
}