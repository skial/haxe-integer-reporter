@:realPath("java.time.chrono.ChronoLocalDate") @:used @:native("java.time.chrono.ChronoLocalDate") @:libType
extern interface java.time.chrono.ChronoLocalDate implements java.lang.Comparable<java.time.chrono.ChronoLocalDate> implements java.time.temporal.TemporalAdjuster implements java.time.temporal.Temporal {

	function getChronology():java.time.chrono.Chronology;

	function getEra():java.time.chrono.Era;

	function isLeapYear():Bool;

	function lengthOfMonth():Int;

	function lengthOfYear():Int;

	function isSupported(param1:java.time.temporal.TemporalField):Bool;

	function isSupported(param1:java.time.temporal.TemporalUnit):Bool;

	function with(param1:java.time.temporal.TemporalAdjuster):java.time.chrono.ChronoLocalDate;

	function with(param1:java.time.temporal.TemporalField, param2:haxe.Int64):java.time.chrono.ChronoLocalDate;

	function plus(param1:java.time.temporal.TemporalAmount):java.time.chrono.ChronoLocalDate;

	function plus(param1:haxe.Int64, param2:java.time.temporal.TemporalUnit):java.time.chrono.ChronoLocalDate;

	function minus(param1:java.time.temporal.TemporalAmount):java.time.chrono.ChronoLocalDate;

	function minus(param1:haxe.Int64, param2:java.time.temporal.TemporalUnit):java.time.chrono.ChronoLocalDate;

	function query<R:Dynamic>(param1:java.time.temporal.TemporalQuery<query.R>):query.R;

	function adjustInto(param1:java.time.temporal.Temporal):java.time.temporal.Temporal;

	function until(param1:java.time.temporal.Temporal, param2:java.time.temporal.TemporalUnit):haxe.Int64;

	function until(param1:java.time.chrono.ChronoLocalDate):java.time.chrono.ChronoPeriod;

	function format(param1:java.time.format.DateTimeFormatter):java.lang.String;

	function atTime(param1:java.time.LocalTime):java.time.chrono.ChronoLocalDateTime<Dynamic>;

	function toEpochDay():haxe.Int64;

	function compareTo(param1:java.time.chrono.ChronoLocalDate):Int;

	function compareTo(param1:Dynamic):Int;

	function isAfter(param1:java.time.chrono.ChronoLocalDate):Bool;

	function isBefore(param1:java.time.chrono.ChronoLocalDate):Bool;

	function isEqual(param1:java.time.chrono.ChronoLocalDate):Bool;

	function equals(param1:Dynamic):Bool;

	function hashCode():Int;

	function toString():java.lang.String;

	static function timeLineOrder():java.util.Comparator<java.time.chrono.ChronoLocalDate>;

	static function from(param1:java.time.temporal.TemporalAccessor):java.time.chrono.ChronoLocalDate;
}