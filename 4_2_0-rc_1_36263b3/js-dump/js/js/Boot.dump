@:keep @:directlyUsed @:used @:dox(hide)
class js.Boot {

	@:has_untyped @:ifFeature("has_enum")
	static function __string_rec(o:{ toString : () -> String, length : Int, hasOwnProperty : String -> Bool, _hx_index : Int, __enum__ : Bool }, s:String) {
		if ((o == null)) return "null";
		if ((s.length >= 5)) return "<...>";
		var t = js.Syntax.typeof(o);
		if ((t == "function" && (__define_feature__("js.Boot.isClass", cast o.__name__) || __define_feature__("js.Boot.isEnum", cast o.__ename__)))) t = "object";
		switch ((t)) {
			case "function": return "<function>";
			case "object": {
				__feature__("has_enum", if ((o.__enum__)) {
					var e = $hxEnums[o.__enum__];
					var con = e.__constructs__[o._hx_index];
					var n = con._hx_name;
					if ((con.__params__)) {
						s = s + "\t";
						return n + "(" + ({
							var _g = [];
							{
								var _g1 = 0;
								var _g2 = cast con.__params__;
								while ((true)) {
									if ((! (_g1 < _g2.length))) break;
									var p = _g2[_g1];
									_g1 = _g1 + 1;
									_g.push(js.Boot.__string_rec(o[p], s));
								};
							};
							_g;
						}).join(",") + ")";
					} else return n;
				});
				if ((js.Syntax.instanceof(o, Array))) {
					var str = "[";
					s += "\t";
					{
						var _g = 0;
						var _g1 = o.length;
						while ((_g < _g1)) {
							var i = _g ++;
							str += (if ((i > 0)) "," else "") + js.Boot.__string_rec(o[i], s);
						};
					};
					str += "]";
					return str;
				};
				var tostr;
				try {
					tostr = o.toString;
				} catch (_g:Dynamic) {
					return "???";
				};
				if ((tostr != null && tostr != js.Syntax.code("Object.toString") && js.Syntax.typeof(tostr) == "function")) {
					var s2 = o.toString();
					if ((s2 != "[object Object]")) return s2;
				};
				var str = "{\n";
				s += "\t";
				var hasp = o.hasOwnProperty != null;
				var k = null;
				js.Syntax.code("for( {0} in {1} ) {", k, o);
				if ((hasp && ! o.hasOwnProperty(k))) js.Syntax.code("continue");
				if ((k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__")) js.Syntax.code("continue");
				if ((str.length != 2)) str += ", \n";
				str += s + k + " : " + js.Boot.__string_rec(o[k], s);
				js.Syntax.code("}");
				s = s.substring(1);
				str += "\n" + s + "}";
				return str;
			};
			case "string": return o;
			default: return String(o)
		};
	}

	static var __toStr:Function;

	static function __init__() js.Boot.__toStr = cast {}.toString
}