@:keep @:directlyUsed @:used
class haxe.io.Path {

	public static function normalize(path:str) {
		var slash = "/";
		var _this = python.Syntax.call(python.Syntax.field(path, "split"), ["\\"]);
		path = cast python.Syntax.field(slash, "join")(python.Syntax.code("[{0}(x1,'') for x1 in {1}]", python.Boot.toString1, _this));
		if ((path == slash)) return slash;
		var target = [];
		{
			var _g = 0;
			var _g1 = if ((slash == "")) python.internal.UBuiltins.list(path) else python.Syntax.call(python.Syntax.field(path, "split"), [slash]);
			while ((_g < _g1.length)) {
				var token = _g1[_g];
				++ _g;
				if ((token == ".." && target.length > 0 && target[target.length - 1] != "..")) {
					if ((target.length != 0)) python.Syntax.call(python.Syntax.field(target, "pop"), []);
				} else if ((token == "")) {
					if ((target.length > 0 || HxString.charCodeAt(path, 0) == 47)) python.Syntax.call(python.Syntax.field(target, "append"), [token]);
				} else if ((token != ".")) python.Syntax.call(python.Syntax.field(target, "append"), [token]);
			};
		};
		var tmp = cast python.Syntax.field(slash, "join")(python.Syntax.code("[{0}(x1,'') for x1 in {1}]", python.Boot.toString1, target));
		var acc_b = new python.lib.io.StringIO();
		var colon = false;
		var slashes = false;
		{
			var _g = 0;
			var _g1 = tmp.length;
			while ((_g < _g1)) {
				var i = _g ++;
				{
					var _g2 = if ((i >= tmp.length)) -1 else python.internal.UBuiltins.ord(python.Syntax._arrayAccess(tmp, [i]));
					var _g3 = _g2;
					switch ((_g3)) {
						case 47: if ((! colon)) slashes = true else {
							var i1 = _g2;
							{
								colon = false;
								if ((slashes)) {
									acc_b.write("/");
									slashes = false;
								};
								acc_b.write(cast python.Syntax.call(python.Syntax.field("", "join"), [python.internal.UBuiltins.map(python.internal.UBuiltins.chr, cast [i1])]));
							};
						};
						case 58: {
							acc_b.write(":");
							colon = true;
						};
						default: {
							var i2 = _g2;
							{
								colon = false;
								if ((slashes)) {
									acc_b.write("/");
									slashes = false;
								};
								acc_b.write(cast python.Syntax.call(python.Syntax.field("", "join"), [python.internal.UBuiltins.map(python.internal.UBuiltins.chr, cast [i2])]));
							};
						}
					};
				};
			};
		};
		return acc_b.getvalue();
	}
}