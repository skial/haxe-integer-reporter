@:realPath("java.util.Hashtable") @:used @:nativeGen @:libType @:javaNative @:native("java.util.Hashtable") @:javaCanonical("java.util", "Hashtable")
extern class java.util.Hashtable<K:Dynamic, V:Dynamic> extends java.util.Dictionary<java.util.Hashtable.K, java.util.Hashtable.V> implements java.io.Serializable implements java.lang.Cloneable implements java.util.Map<java.util.Hashtable.K, java.util.Hashtable.V> {

	function new(param1:java.util.Map<java.util.Hashtable.K, java.util.Hashtable.V>):Void;

	function new(param1:Int, param2:Single):Void;

	function new(param1:Int):Void;

	function new():Void;

	function merge(param1:java.util.Hashtable.K, param2:java.util.Hashtable.V, param3:java.util.function.BiFunction<Dynamic, Dynamic, java.util.Hashtable.V>):java.util.Hashtable.V;

	function compute(param1:java.util.Hashtable.K, param2:java.util.function.BiFunction<Dynamic, Dynamic, java.util.Hashtable.V>):java.util.Hashtable.V;

	function computeIfPresent(param1:java.util.Hashtable.K, param2:java.util.function.BiFunction<Dynamic, Dynamic, java.util.Hashtable.V>):java.util.Hashtable.V;

	function computeIfAbsent(param1:java.util.Hashtable.K, param2:java.util.function.Function<Dynamic, java.util.Hashtable.V>):java.util.Hashtable.V;

	function replace(param1:java.util.Hashtable.K, param2:java.util.Hashtable.V):java.util.Hashtable.V;

	function replace(param1:java.util.Hashtable.K, param2:java.util.Hashtable.V, param3:java.util.Hashtable.V):Bool;

	function remove(param1:Dynamic, param2:Dynamic):Bool;

	function remove(param1:Dynamic):java.util.Hashtable.V;

	function putIfAbsent(param1:java.util.Hashtable.K, param2:java.util.Hashtable.V):java.util.Hashtable.V;

	function replaceAll(param1:java.util.function.BiFunction<Dynamic, Dynamic, java.util.Hashtable.V>):Void;

	function forEach(param1:java.util.function.BiConsumer<Dynamic, Dynamic>):Void;

	function getOrDefault(param1:Dynamic, param2:java.util.Hashtable.V):java.util.Hashtable.V;

	function hashCode():Int;

	function equals(param1:Dynamic):Bool;

	function values():java.util.Collection<java.util.Hashtable.V>;

	function entrySet():java.util.Set<java.util.Map$Entry<java.util.Hashtable.K, java.util.Hashtable.V>>;

	function keySet():java.util.Set<java.util.Hashtable.K>;

	function toString():String;

	function clone():Dynamic;

	function clear():Void;

	function putAll(param1:java.util.Map<java.util.Hashtable.K, java.util.Hashtable.V>):Void;

	function put(param1:java.util.Hashtable.K, param2:java.util.Hashtable.V):java.util.Hashtable.V;

	@:protected
	function rehash():Void;

	function get(param1:Dynamic):java.util.Hashtable.V;

	function containsKey(param1:Dynamic):Bool;

	function containsValue(param1:Dynamic):Bool;

	function contains(param1:Dynamic):Bool;

	function elements():java.util.Enumeration<java.util.Hashtable.V>;

	function keys():java.util.Enumeration<java.util.Hashtable.K>;

	function isEmpty():Bool;

	function size():Int;
}