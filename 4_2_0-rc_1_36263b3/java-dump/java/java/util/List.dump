@:realPath("java.util.List") @:used @:nativeGen @:abstract @:libType @:javaNative @:native("java.util.List") @:javaCanonical("java.util", "List")
extern interface java.util.List<E:Dynamic> implements java.util.Collection<java.util.List.E> {

	function spliterator():java.util.Spliterator<java.util.List.E>;

	function subList(param1:Int, param2:Int):java.util.List<java.util.List.E>;

	function listIterator(param1:Int):java.util.ListIterator<java.util.List.E>;

	function listIterator():java.util.ListIterator<java.util.List.E>;

	function lastIndexOf(param1:Dynamic):Int;

	function indexOf(param1:Dynamic):Int;

	function remove(param1:Int):java.util.List.E;

	function remove(param1:Dynamic):Bool;

	function add(param1:Int, param2:java.util.List.E):Void;

	function add(param1:java.util.List.E):Bool;

	function set(param1:Int, param2:java.util.List.E):java.util.List.E;

	function get(param1:Int):java.util.List.E;

	function clear():Void;

	function sort(param1:java.util.Comparator<Dynamic>):Void;

	function replaceAll(param1:java.util.function.UnaryOperator<java.util.List.E>):Void;

	function retainAll(param1:java.util.Collection<Dynamic>):Bool;

	function removeAll(param1:java.util.Collection<Dynamic>):Bool;

	function addAll(param1:Int, param2:java.util.Collection<java.util.List.E>):Bool;

	function addAll(param1:java.util.Collection<java.util.List.E>):Bool;

	function containsAll(param1:java.util.Collection<Dynamic>):Bool;

	function toArray<T:Dynamic>(param1:java.NativeArray<toArray.T>):java.NativeArray<toArray.T>;

	function toArray():java.NativeArray<Dynamic>;

	function iterator():java.util.Iterator<java.util.List.E>;

	function contains(param1:Dynamic):Bool;

	function isEmpty():Bool;

	function size():Int;

	function forEach(param1:java.util.function.Consumer<Dynamic>):Void;

	function removeIf(param1:java.util.function.Predicate<Dynamic>):Bool;

	function stream():java.util.stream.Stream<java.util.List.E>;

	function parallelStream():java.util.stream.Stream<java.util.List.E>;
}