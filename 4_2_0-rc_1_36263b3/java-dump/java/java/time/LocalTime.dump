@:realPath("java.time.LocalTime") @:used @:nativeGen @:libType @:javaNative @:native("java.time.LocalTime") @:javaCanonical("java.time", "LocalTime")
extern class java.time.LocalTime implements java.io.Serializable implements java.lang.Comparable<java.time.LocalTime> implements java.time.temporal.TemporalAdjuster implements java.time.temporal.Temporal {

	function compareTo(param1:Dynamic):Int;

	function compareTo(param1:java.time.LocalTime):Int;

	function with(param1:java.time.temporal.TemporalAdjuster):java.time.LocalTime;

	function with(param1:java.time.temporal.TemporalField, param2:haxe.Int64):java.time.LocalTime;

	function plus(param1:java.time.temporal.TemporalAmount):java.time.LocalTime;

	function plus(param1:haxe.Int64, param2:java.time.temporal.TemporalUnit):java.time.LocalTime;

	function minus(param1:java.time.temporal.TemporalAmount):java.time.LocalTime;

	function minus(param1:haxe.Int64, param2:java.time.temporal.TemporalUnit):java.time.LocalTime;

	function toString():String;

	function hashCode():Int;

	function equals(param1:Dynamic):Bool;

	function isBefore(param1:java.time.LocalTime):Bool;

	function isAfter(param1:java.time.LocalTime):Bool;

	function toNanoOfDay():haxe.Int64;

	function toSecondOfDay():Int;

	function atOffset(param1:java.time.ZoneOffset):java.time.OffsetTime;

	function atDate(param1:java.time.LocalDate):java.time.LocalDateTime;

	function format(param1:java.time.format.DateTimeFormatter):String;

	function until(param1:java.time.temporal.Temporal, param2:java.time.temporal.TemporalUnit):haxe.Int64;

	function adjustInto(param1:java.time.temporal.Temporal):java.time.temporal.Temporal;

	function query<R:Dynamic>(param1:java.time.temporal.TemporalQuery<query.R>):query.R;

	function minusNanos(param1:haxe.Int64):java.time.LocalTime;

	function minusSeconds(param1:haxe.Int64):java.time.LocalTime;

	function minusMinutes(param1:haxe.Int64):java.time.LocalTime;

	function minusHours(param1:haxe.Int64):java.time.LocalTime;

	function plusNanos(param1:haxe.Int64):java.time.LocalTime;

	function plusSeconds(param1:haxe.Int64):java.time.LocalTime;

	function plusMinutes(param1:haxe.Int64):java.time.LocalTime;

	function plusHours(param1:haxe.Int64):java.time.LocalTime;

	function truncatedTo(param1:java.time.temporal.TemporalUnit):java.time.LocalTime;

	function withNano(param1:Int):java.time.LocalTime;

	function withSecond(param1:Int):java.time.LocalTime;

	function withMinute(param1:Int):java.time.LocalTime;

	function withHour(param1:Int):java.time.LocalTime;

	function getNano():Int;

	function getSecond():Int;

	function getMinute():Int;

	function getHour():Int;

	function getLong(param1:java.time.temporal.TemporalField):haxe.Int64;

	function get(param1:java.time.temporal.TemporalField):Int;

	function range(param1:java.time.temporal.TemporalField):java.time.temporal.ValueRange;

	function isSupported(param1:java.time.temporal.TemporalUnit):Bool;

	function isSupported(param1:java.time.temporal.TemporalField):Bool;

	static function parse(param1:java.lang.CharSequence, param2:java.time.format.DateTimeFormatter):java.time.LocalTime;

	static function parse(param1:java.lang.CharSequence):java.time.LocalTime;

	static function from(param1:java.time.temporal.TemporalAccessor):java.time.LocalTime;

	static function ofNanoOfDay(param1:haxe.Int64):java.time.LocalTime;

	static function ofSecondOfDay(param1:haxe.Int64):java.time.LocalTime;

	static function of(param1:Int, param2:Int, param3:Int, param4:Int):java.time.LocalTime;

	static function of(param1:Int, param2:Int):java.time.LocalTime;

	static function of(param1:Int, param2:Int, param3:Int):java.time.LocalTime;

	static function now(param1:java.time.Clock):java.time.LocalTime;

	static function now():java.time.LocalTime;

	static function now(param1:java.time.ZoneId):java.time.LocalTime;

	static var MIN(default,never):java.time.LocalTime;

	static var MAX(default,never):java.time.LocalTime;

	static var MIDNIGHT(default,never):java.time.LocalTime;

	static var NOON(default,never):java.time.LocalTime;
}