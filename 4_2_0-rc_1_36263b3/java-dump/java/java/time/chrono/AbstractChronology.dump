@:realPath("java.time.chrono.AbstractChronology") @:used @:nativeGen @:abstract @:libType @:javaNative @:native("java.time.chrono.AbstractChronology") @:javaCanonical("java.time.chrono", "AbstractChronology")
extern class java.time.chrono.AbstractChronology implements java.time.chrono.Chronology {

	@:protected
	function new():Void;

	function compareTo(param1:Dynamic):Int;

	function compareTo(param1:java.time.chrono.Chronology):Int;

	function toString():String;

	function hashCode():Int;

	function equals(param1:Dynamic):Bool;

	function resolveDate(param1:java.util.Map<java.time.temporal.TemporalField, java.lang.Long>, param2:java.time.format.ResolverStyle):java.time.chrono.ChronoLocalDate;

	function getId():String;

	function getCalendarType():String;

	function date(param1:java.time.chrono.Era, param2:Int, param3:Int, param4:Int):java.time.chrono.ChronoLocalDate;

	function date(param1:java.time.temporal.TemporalAccessor):java.time.chrono.ChronoLocalDate;

	function date(param1:Int, param2:Int, param3:Int):java.time.chrono.ChronoLocalDate;

	function dateYearDay(param1:java.time.chrono.Era, param2:Int, param3:Int):java.time.chrono.ChronoLocalDate;

	function dateYearDay(param1:Int, param2:Int):java.time.chrono.ChronoLocalDate;

	function dateEpochDay(param1:haxe.Int64):java.time.chrono.ChronoLocalDate;

	function dateNow():java.time.chrono.ChronoLocalDate;

	function dateNow(param1:java.time.Clock):java.time.chrono.ChronoLocalDate;

	function dateNow(param1:java.time.ZoneId):java.time.chrono.ChronoLocalDate;

	function localDateTime(param1:java.time.temporal.TemporalAccessor):java.time.chrono.ChronoLocalDateTime<java.time.chrono.ChronoLocalDate>;

	function zonedDateTime(param1:java.time.temporal.TemporalAccessor):java.time.chrono.ChronoZonedDateTime<java.time.chrono.ChronoLocalDate>;

	function zonedDateTime(param1:java.time.Instant, param2:java.time.ZoneId):java.time.chrono.ChronoZonedDateTime<java.time.chrono.ChronoLocalDate>;

	function isLeapYear(param1:haxe.Int64):Bool;

	function prolepticYear(param1:java.time.chrono.Era, param2:Int):Int;

	function eraOf(param1:Int):java.time.chrono.Era;

	function eras():java.util.List<java.time.chrono.Era>;

	function range(param1:java.time.temporal.ChronoField):java.time.temporal.ValueRange;

	function getDisplayName(param1:java.time.format.TextStyle, param2:java.util.Locale):String;

	function period(param1:Int, param2:Int, param3:Int):java.time.chrono.ChronoPeriod;
}