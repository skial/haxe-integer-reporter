@:realPath("java.lang.IntegerClass") @:directlyUsed @:used @:nativeGen @:native("java.lang.Integer")
extern class java.lang.Integer extends java.lang.Number implements java.lang.Comparable<java.lang.Integer> {

	@:overload
	function new(param1:Int):Void;

	@:overload @:throws("java.lang.NumberFormatException")
	function new(param1:String):Void;

	@:overload
	function compareTo(param1:java.lang.Integer):Int;

	@:overload
	function compareTo(param1:Dynamic):Int;

	@:overload
	function equals(param1:Dynamic):Bool;

	@:overload
	function hashCode():Int;

	@:overload
	function toString():String;

	function doubleValue():Float;

	function floatValue():Single;

	function intValue():Int;

	function longValue():haxe.Int64;

	static var MAX_VALUE(default,never):Int;

	static var MIN_VALUE(default,never):Int;

	static var SIZE(default,never):Int;

	static var TYPE(default,never):java.lang.Class<java.lang.Integer>;

	@:overload
	static function bitCount(param1:Int):Int;

	@:overload
	static function compare(param1:Int, param2:Int):Int;

	@:overload @:throws("java.lang.NumberFormatException")
	static function decode(param1:String):java.lang.Integer;

	@:overload
	static function getInteger(param1:String):java.lang.Integer;

	@:overload
	static function getInteger(param1:String, param2:Int):java.lang.Integer;

	@:overload
	static function getInteger(param1:String, param2:java.lang.Integer):java.lang.Integer;

	@:overload
	static function highestOneBit(param1:Int):Int;

	@:overload
	static function lowestOneBit(param1:Int):Int;

	@:overload
	static function numberOfLeadingZeros(param1:Int):Int;

	@:overload
	static function numberOfTrailingZeros(param1:Int):Int;

	@:overload @:throws("java.lang.NumberFormatException")
	static function parseInt(param1:String, param2:Int):Int;

	@:overload @:throws("java.lang.NumberFormatException")
	static function parseInt(param1:String):Int;

	@:overload
	static function reverse(param1:Int):Int;

	@:overload
	static function reverseBytes(param1:Int):Int;

	@:overload
	static function rotateLeft(param1:Int, param2:Int):Int;

	@:overload
	static function rotateRight(param1:Int, param2:Int):Int;

	@:overload
	static function signum(param1:Int):Int;

	@:overload
	static function toBinaryString(param1:Int):String;

	@:overload
	static function toHexString(param1:Int):String;

	@:overload
	static function toOctalString(param1:Int):String;

	@:realPath("_toString") @:native("toString") @:overload
	static function toString(param1:Int, param2:Int):String;

	@:native("toString") @:overload
	static function toString(param1:Int):String;

	@:overload
	static function valueOf(param1:Int):java.lang.Integer;

	@:overload @:throws("java.lang.NumberFormatException")
	static function valueOf(param1:String):java.lang.Integer;

	@:overload @:throws("java.lang.NumberFormatException")
	static function valueOf(param1:String, param2:Int):java.lang.Integer;
}