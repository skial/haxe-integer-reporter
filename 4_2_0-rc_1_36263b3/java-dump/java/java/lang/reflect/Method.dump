@:realPath("java.lang.reflect.Method") @:used @:nativeGen @:libType @:javaNative @:native("java.lang.reflect.Method") @:javaCanonical("java.lang.reflect", "Method")
extern class java.lang.reflect.Method extends java.lang.reflect.Executable {

	function getAnnotatedReturnType():java.lang.reflect.AnnotatedType;

	function getParameterAnnotations():java.NativeArray<java.NativeArray<java.lang.annotation.Annotation>>;

	function getDeclaredAnnotations():java.NativeArray<java.lang.annotation.Annotation>;

	function getAnnotation<T:java.lang.annotation.Annotation>(param1:java.lang.Class<getAnnotation.T>):getAnnotation.T;

	function getDefaultValue():Dynamic;

	function isDefault():Bool;

	function isSynthetic():Bool;

	function isVarArgs():Bool;

	function isBridge():Bool;

	@:throws("java.lang.reflect.InvocationTargetException") @:throws("java.lang.IllegalArgumentException") @:throws("java.lang.IllegalAccessException")
	function invoke(param1:Dynamic, param2:java.NativeArray<Dynamic>):Dynamic;

	function toGenericString():String;

	function toString():String;

	function hashCode():Int;

	function equals(param1:Dynamic):Bool;

	function getGenericExceptionTypes():java.NativeArray<java.lang.reflect.Type>;

	function getExceptionTypes():java.NativeArray<java.lang.Class<Dynamic>>;

	function getGenericParameterTypes():java.NativeArray<java.lang.reflect.Type>;

	function getParameterCount():Int;

	function getParameterTypes():java.NativeArray<java.lang.Class<Dynamic>>;

	function getGenericReturnType():java.lang.reflect.Type;

	function getReturnType():java.lang.Class<Dynamic>;

	function getTypeParameters():java.NativeArray<java.lang.reflect.TypeVariable<java.lang.reflect.Method>>;

	function getModifiers():Int;

	function getName():String;

	function getDeclaringClass():java.lang.Class<Dynamic>;
}