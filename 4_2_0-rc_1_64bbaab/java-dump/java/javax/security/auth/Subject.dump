@:realPath("java.javax.security.auth.Subject") @:used @:nativeGen @:libType @:javaNative @:native("javax.security.auth.Subject") @:javaCanonical("javax.security.auth", "Subject")
extern class javax.security.auth.Subject implements java.io.Serializable {

	function new(param1:Bool, param2:java.util.Set<java.security.Principal>, param3:java.util.Set<Dynamic>, param4:java.util.Set<Dynamic>):Void;

	function new():Void;

	function hashCode():Int;

	function toString():String;

	function equals(param1:Dynamic):Bool;

	function getPrivateCredentials<T:Dynamic>(param1:java.lang.Class<getPrivateCredentials.T>):java.util.Set<getPrivateCredentials.T>;

	function getPrivateCredentials():java.util.Set<Dynamic>;

	function getPublicCredentials<T:Dynamic>(param1:java.lang.Class<getPublicCredentials.T>):java.util.Set<getPublicCredentials.T>;

	function getPublicCredentials():java.util.Set<Dynamic>;

	function getPrincipals<T:java.security.Principal>(param1:java.lang.Class<getPrincipals.T>):java.util.Set<getPrincipals.T>;

	function getPrincipals():java.util.Set<java.security.Principal>;

	function isReadOnly():Bool;

	function setReadOnly():Void;

	@:throws("java.security.PrivilegedActionException")
	static function doAsPrivileged<T:Dynamic>(param1:javax.security.auth.Subject, param2:java.security.PrivilegedExceptionAction<doAsPrivileged.T>, param3:java.security.AccessControlContext):doAsPrivileged.T;

	static function doAsPrivileged<T:Dynamic>(param1:javax.security.auth.Subject, param2:java.security.PrivilegedAction<doAsPrivileged.T>, param3:java.security.AccessControlContext):doAsPrivileged.T;

	@:throws("java.security.PrivilegedActionException")
	static function doAs<T:Dynamic>(param1:javax.security.auth.Subject, param2:java.security.PrivilegedExceptionAction<doAs.T>):doAs.T;

	static function doAs<T:Dynamic>(param1:javax.security.auth.Subject, param2:java.security.PrivilegedAction<doAs.T>):doAs.T;

	static function getSubject(param1:java.security.AccessControlContext):javax.security.auth.Subject;
}