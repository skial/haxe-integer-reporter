@:realPath("java.lang.StringBuilder") @:directlyUsed @:used @:nativeGen @:libType @:javaNative @:native("java.lang.StringBuilder") @:javaCanonical("java.lang", "StringBuilder")
extern class java.lang.StringBuilder extends java.lang.AbstractStringBuilder implements java.io.Serializable implements java.lang.CharSequence {

	function new(param1:java.lang.CharSequence):Void;

	function new():Void;

	function new(param1:Int):Void;

	function new(param1:String):Void;

	function append(param1:java.lang.CharSequence):java.lang.StringBuilder;

	function append(param1:Float):java.lang.StringBuilder;

	function append(param1:Single):java.lang.StringBuilder;

	function append(param1:haxe.Int64):java.lang.StringBuilder;

	function append(param1:Int):java.lang.StringBuilder;

	function append(param1:Bool):java.lang.StringBuilder;

	function append(param1:java.NativeArray<java.types.Char16>, param2:Int, param3:Int):java.lang.StringBuilder;

	function append(param1:java.NativeArray<java.types.Char16>):java.lang.StringBuilder;

	function append(param1:java.lang.StringBuffer):java.lang.StringBuilder;

	function append(param1:String):java.lang.StringBuilder;

	function append(param1:Dynamic):java.lang.StringBuilder;

	function append(param1:java.types.Char16):java.lang.StringBuilder;

	function append(param1:java.lang.CharSequence, param2:Int, param3:Int):java.lang.StringBuilder;

	function length():Int;

	function capacity():Int;

	function ensureCapacity(param1:Int):Void;

	function trimToSize():Void;

	function setLength(param1:Int):Void;

	function charAt(param1:Int):java.types.Char16;

	function codePointAt(param1:Int):Int;

	function codePointBefore(param1:Int):Int;

	function codePointCount(param1:Int, param2:Int):Int;

	function offsetByCodePoints(param1:Int, param2:Int):Int;

	function getChars(param1:Int, param2:Int, param3:java.NativeArray<java.types.Char16>, param4:Int):Void;

	function setCharAt(param1:Int, param2:java.types.Char16):Void;

	function delete(param1:Int, param2:Int):java.lang.StringBuilder;

	function appendCodePoint(param1:Int):java.lang.StringBuilder;

	function deleteCharAt(param1:Int):java.lang.StringBuilder;

	function replace(param1:Int, param2:Int, param3:String):java.lang.StringBuilder;

	function substring(param1:Int):String;

	function substring(param1:Int, param2:Int):String;

	function subSequence(param1:Int, param2:Int):java.lang.CharSequence;

	function insert(param1:Int, param2:java.NativeArray<java.types.Char16>, param3:Int, param4:Int):java.lang.StringBuilder;

	function insert(param1:Int, param2:Float):java.lang.StringBuilder;

	function insert(param1:Int, param2:Single):java.lang.StringBuilder;

	function insert(param1:Int, param2:haxe.Int64):java.lang.StringBuilder;

	function insert(param1:Int, param2:Int):java.lang.StringBuilder;

	function insert(param1:Int, param2:java.types.Char16):java.lang.StringBuilder;

	function insert(param1:Int, param2:Bool):java.lang.StringBuilder;

	function insert(param1:Int, param2:java.lang.CharSequence, param3:Int, param4:Int):java.lang.StringBuilder;

	function insert(param1:Int, param2:java.lang.CharSequence):java.lang.StringBuilder;

	function insert(param1:Int, param2:java.NativeArray<java.types.Char16>):java.lang.StringBuilder;

	function insert(param1:Int, param2:String):java.lang.StringBuilder;

	function insert(param1:Int, param2:Dynamic):java.lang.StringBuilder;

	function reverse():java.lang.StringBuilder;

	function toString():String;

	function lastIndexOf(param1:String, param2:Int):Int;

	function lastIndexOf(param1:String):Int;

	function indexOf(param1:String, param2:Int):Int;

	function indexOf(param1:String):Int;
}