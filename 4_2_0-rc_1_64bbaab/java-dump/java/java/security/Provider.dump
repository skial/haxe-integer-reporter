@:realPath("java.security.Provider") @:used @:nativeGen @:abstract @:libType @:javaNative @:native("java.security.Provider") @:javaCanonical("java.security", "Provider")
extern class java.security.Provider extends java.util.Properties {

	@:protected
	function new(param1:String, param2:Float, param3:String):Void;

	@:protected
	function removeService(param1:java.security.Provider$Service):Void;

	@:protected
	function putService(param1:java.security.Provider$Service):Void;

	function getServices():java.util.Set<java.security.Provider$Service>;

	function getService(param1:String, param2:String):java.security.Provider$Service;

	function getProperty(param1:String):String;

	function elements():java.util.Enumeration<Dynamic>;

	function keys():java.util.Enumeration<Dynamic>;

	function forEach(param1:java.util.function.BiConsumer<Dynamic, Dynamic>):Void;

	function getOrDefault(param1:Dynamic, param2:Dynamic):Dynamic;

	function get(param1:Dynamic):Dynamic;

	function merge(param1:Dynamic, param2:Dynamic, param3:java.util.function.BiFunction<Dynamic, Dynamic, Dynamic>):Dynamic;

	function computeIfPresent(param1:Dynamic, param2:java.util.function.BiFunction<Dynamic, Dynamic, Dynamic>):Dynamic;

	function computeIfAbsent(param1:Dynamic, param2:java.util.function.Function<Dynamic, Dynamic>):Dynamic;

	function compute(param1:Dynamic, param2:java.util.function.BiFunction<Dynamic, Dynamic, Dynamic>):Dynamic;

	function replaceAll(param1:java.util.function.BiFunction<Dynamic, Dynamic, Dynamic>):Void;

	function replace(param1:Dynamic, param2:Dynamic):Dynamic;

	function replace(param1:Dynamic, param2:Dynamic, param3:Dynamic):Bool;

	function remove(param1:Dynamic, param2:Dynamic):Bool;

	function remove(param1:Dynamic):Dynamic;

	function putIfAbsent(param1:Dynamic, param2:Dynamic):Dynamic;

	function put(param1:Dynamic, param2:Dynamic):Dynamic;

	function values():java.util.Collection<Dynamic>;

	function keySet():java.util.Set<Dynamic>;

	function entrySet():java.util.Set<java.util.Map$Entry<Dynamic, Dynamic>>;

	function putAll(param1:java.util.Map<Dynamic, Dynamic>):Void;

	@:throws("java.io.IOException")
	function load(param1:java.io.InputStream):Void;

	function clear():Void;

	function toString():String;

	function getInfo():String;

	function getVersion():Float;

	function getName():String;
}