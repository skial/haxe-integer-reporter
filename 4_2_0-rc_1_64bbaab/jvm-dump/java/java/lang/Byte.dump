@:realPath("java.lang.ByteClass") @:directlyUsed @:used @:native("java.lang.Byte")
extern class java.lang.Byte extends java.lang.Number implements java.lang.Comparable<java.lang.Byte> {

	@:overload
	function new(param1:java.types.Int8):Void;

	@:overload @:throws("java.lang.NumberFormatException")
	function new(param1:java.lang.String):Void;

	@:overload
	function compareTo(param1:java.lang.Byte):Int;

	@:overload
	function compareTo(param1:Dynamic):Int;

	@:overload
	function equals(param1:Dynamic):Bool;

	@:overload
	function hashCode():Int;

	@:overload
	function toString():java.lang.String;

	function doubleValue():Float;

	function floatValue():Single;

	function intValue():Int;

	function longValue():haxe.Int64;

	static var MAX_VALUE(default,never):java.types.Int8;

	static var MIN_VALUE(default,never):java.types.Int8;

	static var SIZE(default,never):Int;

	static var TYPE(default,never):java.lang.Class<java.lang.Byte>;

	@:overload
	static function compare(param1:java.types.Int8, param2:java.types.Int8):Int;

	@:overload @:throws("java.lang.NumberFormatException")
	static function decode(param1:java.lang.String):java.lang.Byte;

	@:overload @:throws("java.lang.NumberFormatException")
	static function parseByte(param1:java.lang.String, param2:Int):java.types.Int8;

	@:overload @:throws("java.lang.NumberFormatException")
	static function parseByte(param1:java.lang.String):java.types.Int8;

	@:realPath("_toString") @:native("toString") @:overload
	static function toString(param1:java.types.Int8):java.lang.String;

	@:overload
	static function valueOf(param1:java.types.Int8):java.lang.Byte;

	@:overload @:throws("java.lang.NumberFormatException")
	static function valueOf(param1:java.lang.String, param2:Int):java.lang.Byte;

	@:overload @:throws("java.lang.NumberFormatException")
	static function valueOf(param1:java.lang.String):java.lang.Byte;
}