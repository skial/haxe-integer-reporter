@:realPath("js.lib.Object") @:directlyUsed @:used @:native("Object")
extern class Object {

	@:pure
	function new(value:Null<Any>):Void;

	static function assign<T:{ }>(target:assign.T, sources:haxe.extern.Rest<{ }>):assign.T;

	@:pure
	static function create<T>(proto:{ }, propertiesObject:Null<haxe.DynamicAccess<js.lib.ObjectPropertyDescriptor>>):create.T;

	static function defineProperties<T:{ }>(obj:defineProperties.T, props:haxe.DynamicAccess<js.lib.ObjectPropertyDescriptor>):defineProperties.T;

	static function defineProperty<T:{ }>(obj:defineProperty.T, prop:String, descriptor:js.lib.ObjectPropertyDescriptor):defineProperty.T;

	static function defineProperty<T:{ }>(obj:defineProperty.T, prop:Symbol, descriptor:js.lib.ObjectPropertyDescriptor):defineProperty.T;

	@:pure
	static function entries(obj:{ }):Array<js.lib.ObjectEntry>;

	static function freeze<T:{ }>(obj:freeze.T):freeze.T;

	@:pure
	static function fromEntries<T:{ }>(iterable:Any):fromEntries.T;

	@:pure
	static function getOwnPropertyDescriptor(obj:{ }, prop:String):Null<js.lib.ObjectPropertyDescriptor>;

	@:pure
	static function getOwnPropertyDescriptor<T>(target:Array<getOwnPropertyDescriptor.T>, propertyKey:Int):Null<js.lib.ObjectPropertyDescriptor>;

	@:pure
	static function getOwnPropertyDescriptor(obj:{ }, prop:Symbol):Null<js.lib.ObjectPropertyDescriptor>;

	@:pure
	static function getOwnPropertyNames(obj:{ }):Array<String>;

	@:pure
	static function getOwnPropertySymbols(obj:{ }):Array<Symbol>;

	@:pure
	static function getPrototypeOf<TProto:{ }>(obj:{ }):Null<getPrototypeOf.TProto>;

	@:deprecated("js.lib.Object.is is deprecated. Use js.lib.Object.isSame instead.") @:pure
	static function is<T>(value1:is.T, value2:is.T):Bool;

	@:realPath("isSame") @:native("is") @:pure
	static function is<T>(value1:isSame.T, value2:isSame.T):Bool;

	@:pure
	static function isExtensible(obj:{ }):Bool;

	@:pure
	static function isFrozen(obj:{ }):Bool;

	@:pure
	static function isSealed(obj:{ }):Bool;

	@:pure
	static function keys(obj:{ }):Array<String>;

	static function preventExtensions<T:{ }>(obj:preventExtensions.T):preventExtensions.T;

	static function seal<T:{ }>(obj:seal.T):seal.T;

	static function setPrototypeOf<T:{ }>(obj:setPrototypeOf.T, prototype:Null<{ }>):setPrototypeOf.T;

	@:pure
	static function values(obj:{ }):Array<Any>;

	static var prototype(default,never):js.lib.ObjectPrototype;
}