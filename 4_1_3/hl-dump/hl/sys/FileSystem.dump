@:keep @:directlyUsed @:used @:coreApi @:access(Sys)
class sys.FileSystem {

	public static function exists(path:String) {
		return sys.FileSystem.sys_exists(Sys.getPath(if ((path.charCodeAt(1) == 58 && path.length <= 3)) haxe.io.Path.addTrailingSlash(path) else if ((path == "/")) "/" else haxe.io.Path.removeTrailingSlashes(path)));
	}

	public static function createDirectory(path:String) {
		var path = haxe.io.Path.addTrailingSlash(path);
		var _p = null;
		var parts = [];
		while ((true)) {
			_p = haxe.io.Path.directory(path);
			if ((! (path != _p))) break;
			parts.unshift(path);
			path = _p;
		};
		{
			var _g = 0;
			while ((_g < parts.length)) {
				var part = parts[_g];
				++ _g;
				if ((part.charCodeAt(part.length - 1) != 58 && ! sys.FileSystem.exists(part))) {
					if ((! sys.FileSystem.sys_create_dir(Sys.getPath(part), 493))) throw haxe.Exception.thrown(new SysError("Failed to create directory " + part));
				};
			};
		};
	}

	@:hlNative("std", "sys_create_dir")
	static function sys_create_dir(path:hl.Bytes, rights:Int) {
		return false;
	}

	@:hlNative("std", "sys_exists")
	static function sys_exists(path:hl.Bytes) {
		return true;
	}
}