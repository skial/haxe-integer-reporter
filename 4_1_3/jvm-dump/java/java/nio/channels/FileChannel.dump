@:realPath("java.nio.channels.FileChannel") @:used @:abstract @:libType @:javaNative @:native("java.nio.channels.FileChannel") @:javaCanonical("java.nio.channels", "FileChannel")
extern class java.nio.channels.FileChannel extends java.nio.channels.spi.AbstractInterruptibleChannel implements java.nio.channels.SeekableByteChannel implements java.nio.channels.GatheringByteChannel implements java.nio.channels.ScatteringByteChannel {

	@:overload @:protected
	function new():Void;

	@:overload @:throws("java.io.IOException")
	function position(param1:haxe.Int64):java.nio.channels.FileChannel;

	@:overload @:throws("java.io.IOException")
	function position():haxe.Int64;

	@:overload @:throws("java.io.IOException")
	function truncate(param1:haxe.Int64):java.nio.channels.FileChannel;

	@:overload @:throws("java.io.IOException")
	function tryLock():java.nio.channels.FileLock;

	@:overload @:throws("java.io.IOException")
	function tryLock(param1:haxe.Int64, param2:haxe.Int64, param3:Bool):java.nio.channels.FileLock;

	@:overload @:throws("java.io.IOException")
	function lock():java.nio.channels.FileLock;

	@:overload @:throws("java.io.IOException")
	function lock(param1:haxe.Int64, param2:haxe.Int64, param3:Bool):java.nio.channels.FileLock;

	@:overload @:throws("java.io.IOException")
	function map(param1:java.nio.channels.FileChannel$MapMode, param2:haxe.Int64, param3:haxe.Int64):java.nio.MappedByteBuffer;

	@:overload @:throws("java.io.IOException")
	function write(param1:java.nio.ByteBuffer, param2:haxe.Int64):Int;

	@:overload @:throws("java.io.IOException")
	function write(param1:java.nio.ByteBuffer):Int;

	@:overload @:throws("java.io.IOException")
	function write(param1:java.NativeArray<java.nio.ByteBuffer>, param2:Int, param3:Int):haxe.Int64;

	@:overload @:throws("java.io.IOException")
	function write(param1:java.NativeArray<java.nio.ByteBuffer>):haxe.Int64;

	@:overload @:throws("java.io.IOException")
	function read(param1:java.nio.ByteBuffer, param2:haxe.Int64):Int;

	@:overload @:throws("java.io.IOException")
	function read(param1:java.nio.ByteBuffer):Int;

	@:overload @:throws("java.io.IOException")
	function read(param1:java.NativeArray<java.nio.ByteBuffer>, param2:Int, param3:Int):haxe.Int64;

	@:overload @:throws("java.io.IOException")
	function read(param1:java.NativeArray<java.nio.ByteBuffer>):haxe.Int64;

	@:overload @:throws("java.io.IOException")
	function transferFrom(param1:java.nio.channels.ReadableByteChannel, param2:haxe.Int64, param3:haxe.Int64):haxe.Int64;

	@:overload @:throws("java.io.IOException")
	function transferTo(param1:haxe.Int64, param2:haxe.Int64, param3:java.nio.channels.WritableByteChannel):haxe.Int64;

	@:overload @:throws("java.io.IOException")
	function force(param1:Bool):Void;

	@:overload @:throws("java.io.IOException")
	function size():haxe.Int64;

	@:overload @:throws("java.io.IOException")
	static function open(param1:java.nio.file.Path, param2:java.NativeArray<java.nio.file.OpenOption>):java.nio.channels.FileChannel;

	@:overload @:throws("java.io.IOException")
	static function open(param1:java.nio.file.Path, param2:java.util.Set<java.nio.file.OpenOption>, param3:java.NativeArray<java.nio.file.attribute.FileAttribute<Dynamic>>):java.nio.channels.FileChannel;
}