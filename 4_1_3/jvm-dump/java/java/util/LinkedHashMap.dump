@:realPath("java.util.LinkedHashMap") @:used @:libType @:javaNative @:native("java.util.LinkedHashMap") @:javaCanonical("java.util", "LinkedHashMap")
extern class java.util.LinkedHashMap<K : java.util.LinkedHashMap.K,V : java.util.LinkedHashMap.V> extends java.util.HashMap<java.util.LinkedHashMap.K, java.util.LinkedHashMap.V> implements java.util.Map<java.util.LinkedHashMap.K, java.util.LinkedHashMap.V> {

	@:overload
	function new(param1:Int, param2:Single, param3:Bool):Void;

	@:overload
	function new(param1:Int, param2:Single):Void;

	@:overload
	function new(param1:Int):Void;

	@:overload
	function new():Void;

	@:overload
	function new(param1:java.util.Map<java.util.LinkedHashMap.K, java.util.LinkedHashMap.V>):Void;

	@:overload
	function replaceAll(param1:java.util.function.BiFunction<Dynamic, Dynamic, java.util.LinkedHashMap.V>):Void;

	@:overload
	function forEach(param1:java.util.function.BiConsumer<Dynamic, Dynamic>):Void;

	@:overload
	function entrySet():java.util.Set<java.util.Map$Entry<java.util.LinkedHashMap.K, java.util.LinkedHashMap.V>>;

	@:overload
	function values():java.util.Collection<java.util.LinkedHashMap.V>;

	@:overload
	function keySet():java.util.Set<java.util.LinkedHashMap.K>;

	@:overload @:protected
	function removeEldestEntry(param1:java.util.Map$Entry<java.util.LinkedHashMap.K, java.util.LinkedHashMap.V>):Bool;

	@:overload
	function clear():Void;

	@:overload
	function getOrDefault(param1:Dynamic, param2:java.util.LinkedHashMap.V):java.util.LinkedHashMap.V;

	@:overload
	function get(param1:Dynamic):java.util.LinkedHashMap.V;

	@:overload
	function containsValue(param1:Dynamic):Bool;
}