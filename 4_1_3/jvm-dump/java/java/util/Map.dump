@:realPath("java.util.Map") @:used @:abstract @:libType @:javaNative @:native("java.util.Map") @:javaCanonical("java.util", "Map")
extern interface java.util.Map<K : java.util.Map.K,V : java.util.Map.V> {

	@:overload
	function merge(param1:java.util.Map.K, param2:java.util.Map.V, param3:java.util.function.BiFunction<Dynamic, Dynamic, java.util.Map.V>):java.util.Map.V;

	@:overload
	function compute(param1:java.util.Map.K, param2:java.util.function.BiFunction<Dynamic, Dynamic, java.util.Map.V>):java.util.Map.V;

	@:overload
	function computeIfPresent(param1:java.util.Map.K, param2:java.util.function.BiFunction<Dynamic, Dynamic, java.util.Map.V>):java.util.Map.V;

	@:overload
	function computeIfAbsent(param1:java.util.Map.K, param2:java.util.function.Function<Dynamic, java.util.Map.V>):java.util.Map.V;

	@:overload
	function replace(param1:java.util.Map.K, param2:java.util.Map.V):java.util.Map.V;

	@:overload
	function replace(param1:java.util.Map.K, param2:java.util.Map.V, param3:java.util.Map.V):Bool;

	@:overload
	function remove(param1:Dynamic, param2:Dynamic):Bool;

	@:overload
	function remove(param1:Dynamic):java.util.Map.V;

	@:overload
	function putIfAbsent(param1:java.util.Map.K, param2:java.util.Map.V):java.util.Map.V;

	@:overload
	function replaceAll(param1:java.util.function.BiFunction<Dynamic, Dynamic, java.util.Map.V>):Void;

	@:overload
	function forEach(param1:java.util.function.BiConsumer<Dynamic, Dynamic>):Void;

	@:overload
	function getOrDefault(param1:Dynamic, param2:java.util.Map.V):java.util.Map.V;

	@:overload
	function entrySet():java.util.Set<java.util.Map$Entry<java.util.Map.K, java.util.Map.V>>;

	@:overload
	function values():java.util.Collection<java.util.Map.V>;

	@:overload
	function keySet():java.util.Set<java.util.Map.K>;

	@:overload
	function clear():Void;

	@:overload
	function putAll(param1:java.util.Map<java.util.Map.K, java.util.Map.V>):Void;

	@:overload
	function put(param1:java.util.Map.K, param2:java.util.Map.V):java.util.Map.V;

	@:overload
	function get(param1:Dynamic):java.util.Map.V;

	@:overload
	function containsValue(param1:Dynamic):Bool;

	@:overload
	function containsKey(param1:Dynamic):Bool;

	@:overload
	function isEmpty():Bool;

	@:overload
	function size():Int;
}