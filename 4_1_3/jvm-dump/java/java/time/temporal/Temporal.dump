@:realPath("java.time.temporal.Temporal") @:used @:abstract @:libType @:javaNative @:native("java.time.temporal.Temporal") @:javaCanonical("java.time.temporal", "Temporal")
extern interface java.time.temporal.Temporal implements java.time.temporal.TemporalAccessor {

	@:overload
	function until(param1:java.time.temporal.Temporal, param2:java.time.temporal.TemporalUnit):haxe.Int64;

	@:overload
	function minus(param1:haxe.Int64, param2:java.time.temporal.TemporalUnit):java.time.temporal.Temporal;

	@:overload
	function minus(param1:java.time.temporal.TemporalAmount):java.time.temporal.Temporal;

	@:overload
	function plus(param1:haxe.Int64, param2:java.time.temporal.TemporalUnit):java.time.temporal.Temporal;

	@:overload
	function plus(param1:java.time.temporal.TemporalAmount):java.time.temporal.Temporal;

	@:overload
	function with(param1:java.time.temporal.TemporalField, param2:haxe.Int64):java.time.temporal.Temporal;

	@:overload
	function with(param1:java.time.temporal.TemporalAdjuster):java.time.temporal.Temporal;

	@:overload
	function isSupported(param1:java.time.temporal.TemporalUnit):Bool;

	@:overload
	function isSupported(param1:java.time.temporal.TemporalField):Bool;

	@:overload
	function range(param1:java.time.temporal.TemporalField):java.time.temporal.ValueRange;

	@:overload
	function get(param1:java.time.temporal.TemporalField):Int;

	@:overload
	function getLong(param1:java.time.temporal.TemporalField):haxe.Int64;

	@:overload
	function query<R : query.R>(param1:java.time.temporal.TemporalQuery<query.R>):query.R;
}